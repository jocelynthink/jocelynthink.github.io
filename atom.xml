<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>make everyday conut--Jocelyn Blag</title>
  <subtitle>Persistence, Patience, Work hard, Play Hard.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-06-13T08:24:06.426Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jocelynthink</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS22-javascript高级程序设计代码</title>
    <link href="http://yoursite.com/2016/05/06/JS22-javascript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E4%BB%A3%E7%A0%81/"/>
    <id>http://yoursite.com/2016/05/06/JS22-javascript高级程序设计代码/</id>
    <published>2016-05-06T13:15:25.000Z</published>
    <updated>2016-06-13T08:24:06.426Z</updated>
    
    <content type="html">&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;javascript是一种专为与网页交互而设计的脚本语言。&lt;/excerpt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;the rest=&quot;&quot; of=&quot;&quot; contents=&quot;&quot; |=&quot;&quot; 余下全文=&quot;&quot;&gt;

&lt;/the&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;DOM文档对象模型 DocumentObject Model:是针对XML但经过扩展用于HTML的应用程序编程接口API。&lt;/p&gt;
&lt;p&gt;DOM级别:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;DO&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;M1&lt;/span&gt;映射文档的结构
DOM core核心
DOM HTML模块
&lt;span class=&quot;keyword&quot;&gt;DO&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;M2&lt;/span&gt;
DOM试图
DOM事件
DOM样式
DOM遍历和范围
&lt;span class=&quot;keyword&quot;&gt;DO&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;M3&lt;/span&gt;
DOM加载和保存
DOM验证
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;BOM浏览器对象模型 Browser Object Model&lt;br&gt;BOM只处理浏览器窗口和框架&lt;br&gt;弹出新浏览器窗口的功能；&lt;br&gt;移动、缩放和关闭浏览器窗口的功能；&lt;br&gt;提供浏览器详细的navigator信息；&lt;br&gt;提供浏览器所加载页面的详细信息的location对象；&lt;br&gt;提供用户显示器分辨率详细信息的scree信息；&lt;br&gt;对cookies的支持；&lt;br&gt;想XMLHttpRequest和IE的ACtiveXObject这样的自定义对象。&lt;/p&gt;
&lt;p&gt;CData片段是文档中的一个特殊区域，这个区域中可以包含不需要解析的任何格式的文本内容。&lt;br&gt;文档模式&lt;br&gt;文档类型doctype&lt;br&gt;分类  混杂模式quirks mode 和标准模式 standards mode&lt;br&gt;准标准模式almost standards mode&lt;br&gt;IE8 超级标准模式&lt;br&gt;关闭其默认文档模式&lt;br&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=7&quot;&gt;&lt;/p&gt;
&lt;p&gt;不支持javascript时如何让页面平稳地退化 &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;变量、函数名、操作符都区分大小写&lt;br&gt;标示符一般采用驼峰式firstSecond&lt;br&gt;单行注释// 多行注释/**/&lt;br&gt;变量时松散类型的，意味着可以用来保存任何类型的数据。每个变量仅仅是一个用于保存值的占位符而已。&lt;br&gt;省略var操作符，创建一个全局变量。&lt;br&gt;6中类型：Undefined、Null、Boolean、Number、String、Object&lt;br&gt;不支持创建自定义类型的机制。&lt;br&gt;typeof检测给定变量的数据类型&lt;br&gt;typeof是一个操作数而不是函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num1,num2)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1+mum2;    
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;num2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;return num1+num2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createComparisonFunction&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(propertyName)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(object1,object2)&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value1 = object1[propertyName];
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value2 = object2[propertyName];
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; value1-value2;
    };
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数内部有两个特殊的对象 arguments 和 this&lt;br&gt;arguments是一个类数组对象，包含传入函数中的所有参数。主要用途：保存函数的参数。&lt;br&gt;有一个callee的属性，该属性是一个指针，指向拥有这个arguments对象的函数。&lt;br&gt;    function factorial(num){&lt;br&gt;        if(num &amp;lt;= -1){&lt;br&gt;            return 1;&lt;br&gt;        }else{&lt;br&gt;            return num* arguments.callee(num-1);&lt;br&gt;        }&lt;br&gt;    }&lt;/p&gt;
&lt;p&gt;this引用的是函数据以执行操作的对象，this函数在执行时所处的作用域。&lt;br&gt;函数的名字仅仅是一个包含函数的变量指针。&lt;/p&gt;
&lt;p&gt;函数的属性和方法：&lt;br&gt;函数属性：&lt;br&gt;length属：表示函数希望接受的命名参数个数&lt;br&gt;prototype属性：对于应用类型而言：prototype保存它们所有实例方法的真正所在。&lt;/p&gt;
&lt;p&gt;函数方法：非继承方法：&lt;br&gt;appley()和call()是在特定的作用于中调用函数，实际上等效设置函数体内this对象的值。&lt;br&gt;    window.color=”red”;&lt;br&gt;    var o={color:”blue”};&lt;br&gt;    function sayColor(){&lt;br&gt;        alert(this.color);&lt;br&gt;    }&lt;br&gt;    sayColor(); //red&lt;br&gt;    sayColor(this);//red&lt;br&gt;    sayColor(window);//red&lt;br&gt;    sayColor(o); // blue&lt;/p&gt;
&lt;p&gt;toLocaleString(),toString()方法始终都返回函数的代码。&lt;br&gt;valueOf()返回函数代码&lt;/p&gt;
&lt;p&gt;基本包装类型：String、Boolean、Number&lt;br&gt;引用类型和基本包装类型的主要区别就在对象的生存期。&lt;br&gt;自动创建的基本包装类型对象，只存在于一行代码的执行瞬间，然后立即被销毁。&lt;/p&gt;
&lt;p&gt;Number类型&lt;br&gt;    toFixed()&lt;br&gt;    toExponential()&lt;br&gt;    toPrecsion()&lt;/p&gt;
&lt;p&gt;String类型&lt;br&gt;length&lt;br&gt;字符方法：charAt() charCodeAt()&lt;br&gt;字符串操作方法：concat(),slice(),substr(),substring()都不会修改字符串本身&lt;br&gt;字符串位置方法：indexOf(),lastIndexOf()&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var stringValue = &quot;lo&lt;span class=&quot;comment&quot;&gt;rem ipsum dolor sit amtt,consectetur adipisicing elit&quot;;&lt;/span&gt;
var positions = new Array();
var pos = stringValue.indexOf(&quot;e&quot;);
while(pos &amp;gt; -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
    positions.push(pos);
    pos = stringValue.indexOf(&quot;e&quot;,pos+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
}
alert(position);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;字符串大小写转换方法：toLowerCase(),toLocaleLowerCase(),toUpperCase(),toLocaleUpperCase()&lt;br&gt;字符串的模式匹配方法：match(),search(),replace(),split()&lt;br&gt;localeCompare()&lt;br&gt;fromCharCode()&lt;/p&gt;
&lt;p&gt;内置对象：Global和Math&lt;br&gt;Global对象&lt;br&gt;方法:encodeURI和encodeURIComponent()方法，对URI进行编码，以便发送给浏览器。&lt;br&gt;encodeURI主要用于整个URI，而encodeURIComponent主要用于对URI中的某一段进行编码。&lt;br&gt;decodeURI和decodeURIComponent()&lt;br&gt;eval()方法&lt;br&gt;eval()方法就像是一个完整的ECMAScript解析器，它只接受一个参数，即要执行的ECMAScript字符串。&lt;br&gt;属性：&lt;br&gt;window对象，javascript中的window对象除了扮演ECMAScript规定的Global对象角色外，还承担了很多别的任务。&lt;/p&gt;
&lt;p&gt;Math对象&lt;br&gt;属性&lt;br&gt;方法：min() max()&lt;br&gt;舍入方法: ceil()执行向上舍入 floor()执行向下舍入 round()标准舍入&lt;br&gt;random() 返回介于0和1直接的一个随机数不包括0和1.&lt;/p&gt;
&lt;p&gt;工厂模式：&lt;br&gt;    function createPerson(name,age,job){&lt;br&gt;        var o = new Object();&lt;br&gt;        o.name=name;&lt;br&gt;        o.age=age;&lt;br&gt;        o.job = job;&lt;br&gt;        o.sayname = function(){&lt;br&gt;            alert(this.name);&lt;br&gt;        };&lt;br&gt;        return o;&lt;br&gt;    }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1&lt;/span&gt;=createPerson(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;software Engineer&quot;&lt;/span&gt;);
&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2&lt;/span&gt;=createPerson(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Doctor&quot;&lt;/span&gt;);

preson1.sayName();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造函数模式：&lt;br&gt;    function Person(name,age,job){&lt;br&gt;        this.name=name;&lt;br&gt;        this.age=age;&lt;br&gt;        this.job=job;&lt;br&gt;        this.sayName=sayName;&lt;br&gt;    }&lt;br&gt;    fucntion sayName(){&lt;br&gt;        alert(this.name);&lt;br&gt;    }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;software Engineer&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原型模式： –对于引用对象出现问题&lt;br&gt;每个函数都有一个prototype(原型属性),这个属性是一个对象，它的用途是包含可以由特定类型的所有实例共享的属性和方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

}
Person.prototype.name=&lt;span class=&quot;string&quot;&gt;&quot;nicolas&quot;&lt;/span&gt;;
Person.prototype.age=&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;;
Person.prototype.job=&lt;span class=&quot;string&quot;&gt;&quot;software Engineer&quot;&lt;/span&gt;;
Person.prototype.sayName=fucntion(){
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
}

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();
Person1.sayName();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();
Person2.sayName();

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

}
Person.prototype{
    &lt;span class=&quot;constructor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt; : Person;
    name:&quot;Nicholas&quot;;
    age:29;
    job:&quot;software Engineer&quot;;
    sayName: function()&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;组合使用构造函数模式和原型模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job=job;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.friends=[&lt;span class=&quot;string&quot;&gt;&quot;shelby&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Court&quot;&lt;/span&gt;];
}
Person.prototype={
    &lt;span class=&quot;constructor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;:Person;
    sayName = function()&lt;/span&gt;{
        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;动态原型模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name,age,job)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name=name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age=age;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job=job;
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sayName != &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;){
        Person.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
            alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;寄生构造函数模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();
    o.name= name;
    o.job=job;
    o.sayName=&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;software Engineer&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;稳妥构造模式：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();
    o.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        alter(name);
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;继承：&lt;br&gt;主要依赖于原型链。利用原型让一个引用类型继承另一个引用类型的属性和方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.property = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
}
SuperType.prototype.getSuperValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.property;
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subproperty = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
}
SubType.prototype= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();
SubType.prototype.getSubValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.subpropertype;
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();
alert(instance.getSubValue);

alert(instance instanceOf &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;);
alert(instance instanceOf SuperType);
alert(instance instanceOf SubType);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;借用构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.colors = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    SuperType.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();
instance1.colors.push(&lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;);
alert(instance1.colors);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();
alert(instance2.colors);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;组合继承，伪经典继承，将原型链和借用构造函数的记住组合到一起&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.colors = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];
}
SuperType.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name,age)&lt;/span&gt;&lt;/span&gt;{
    SuperType.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name);
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
}
SubType.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();
SubType.prototype.sayAge = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age);
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;);
instance1.colors.push(&lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;);
alert(instance1.colors);
instance1.sayName();
instance1.sayAge();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;);
alert(instance2.colors);
instance2.sayName();
instance2.sayAge();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;原型式继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(o)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}
    F.prototype = o;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = {
    name: &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
    friends: [&lt;span class=&quot;string&quot;&gt;&quot;shelby&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Court&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Van&quot;&lt;/span&gt;]
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anotherPerson = object(person);
anotherPerson.name=&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;;
anotherPerson.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;Rob&quot;&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yetAnotherPerson = object(person);
yetAnotherPerson.name=&lt;span class=&quot;string&quot;&gt;&quot;Linda&quot;&lt;/span&gt;;
yetAnotherPerson.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;Barbie&quot;&lt;/span&gt;);

alert(person.friends);
alert(person.name);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;寄生式模式&lt;br&gt;    function createAnother(original){&lt;br&gt;        var clone = object(original);&lt;br&gt;        clone.sayHi = function(){&lt;br&gt;            alert(“hi”);&lt;br&gt;        }&lt;br&gt;        return clone;&lt;br&gt;    }&lt;br&gt;    var person = {&lt;br&gt;        name :”Nicholas”,&lt;br&gt;        friends:[“shelby”,”court”,”ban”]&lt;br&gt;    }&lt;br&gt;    var anotherPerson = createAnother(person);&lt;br&gt;    anotherPerson.sayHi();&lt;/p&gt;
&lt;p&gt;寄生组合式模式&lt;br&gt;通过借用函数来继承属性，通过原型链的混成形成继承方法。&lt;br&gt;    function inheritProtoype(subType,SuperType){&lt;br&gt;        var prototype = object(SuperType.prototype);&lt;br&gt;        prototype.constructor = subType;&lt;br&gt;        subType.prototype = prototype;&lt;br&gt;    }&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.colors = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];
}
SuperType.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name,age)&lt;/span&gt;&lt;/span&gt;{
    SuperType.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name);
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
}
inheritProtoype(SubType,SuperType);
SubType.prototype.sayAge = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匿名函数：拉姆达(lambda)函数&lt;br&gt;函数声明：在代码执行以前就被加载到作用域中  会给函数声明一个名字&lt;br&gt;    function functionName(arg0,arg1,arg2){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;函数表达式：在代码执行到那一行的时候才会有定义  会创建一个匿名函数，然后将匿名函数赋给了变量，但是没有给匿名函数指定名字。&lt;br&gt;    var functionName = function(arg0,arg1,arg2){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;匿名函数: 将函数作为参数传入另一个函数，或者从一个函数返回另一个函数时。&lt;br&gt;    function(arg0,arg1,arg2){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;arguments.callee 是一个指向正在执行函数的指针。&lt;br&gt;闭包：是指有权访问另一个函数作用域中的变量的函数。&lt;/p&gt;
&lt;p&gt;初始化未经声明的变量，总是会创建一个全局变量&lt;/p&gt;
&lt;p&gt;静态私有变量&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyObject&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; privateVariable = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;privateVariable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    }
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.publicMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        privateVariable++;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; privateVariable();
    }
}

(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; privateVariable = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;privateVariable&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
    }
    MyObject = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{

    }
    MyObject.prototype.publicMethod = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        privateVariable++;
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; privateVariable();
    }
})();

(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;
    Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;&lt;/span&gt;{
        name = value;
    }
    Person.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;
    }
    Person.prototype.setName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(value)&lt;/span&gt;&lt;/span&gt;{
        name = value;
    }
})();

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;);
alert(person.getName());
person.setName(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;);
alert(person.getName());

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Michael&quot;&lt;/span&gt;);
alert(person.getName());
alert(person2.getName());
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;单例模式(singleton)：只有一个实例对象&lt;br&gt;    var singleton = {&lt;br&gt;        name :value,&lt;br&gt;        method:function(){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    }
}

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pageWidth = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth,pageHight = winow.innerHeight;
&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; pageWidth != &lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;){
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.compatMode == &lt;span class=&quot;string&quot;&gt;&quot;CSS1Compat&quot;&lt;/span&gt;){
        pageWidth = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.clientWidth;
        pageHight = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.clientHeight;
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        pageWidth = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.clientWidth;
        pageHight = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.clientHeight;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;//BOM对象 浏览器对象模型 以window对象为依托，表示浏览器窗口以及页面可见区域。&lt;/p&gt;
&lt;p&gt;//客户端检测&lt;br&gt;1.能力检测&lt;/p&gt;
&lt;p&gt;2.怪癖检测：识别浏览器的特殊行为&lt;/p&gt;
&lt;p&gt;3.用户代理检测：&lt;br&gt;五大主要引擎：IE、Gecko、Webkit、KHTML、Opera&lt;br&gt;Gecko -&amp;gt; Firefox&lt;br&gt;Mozilla&lt;br&gt;WebKit -&amp;gt; Safari&lt;br&gt;konqueror -&amp;gt;linux &lt;/p&gt;
&lt;p&gt;DOM 文档对象模型，是针对HTML和XML文件的一个API。&lt;br&gt;DOM 描绘了一个层次化的节点树，允许开发人员添加、移除、修改页面的某一部分。&lt;/p&gt;
&lt;p&gt;Node类型&lt;br&gt;nodeType属性&lt;br&gt;nodeName属性 nodeValue属性&lt;br&gt;childNodes属性 每个节点都有一个属性，其中保存着一个NodeList对象。&lt;br&gt;hasChildNodes()方法 在节点包含一或多个子节点的情况下返回true。&lt;br&gt;nextSibling属性&lt;br&gt;previousSibling属性&lt;br&gt;firstChild属性&lt;br&gt;lastChild属性&lt;br&gt;ownerDocument属性 指向表示整个文档的文档节点。&lt;br&gt;操作节点&lt;br&gt;appendChild()方法 用于向childNodes列表的末尾添加一个节点。返回新增的节点。&lt;br&gt;insertBefore()方法 把节点放在childNodes列表中某个特定的位置上，而不是放在末尾&lt;br&gt;replaceChild()方法 要插入的节点 替换的节点&lt;br&gt;removeChild()方法 移除节点&lt;/p&gt;
&lt;p&gt;cloneNode()方法 用于创建调用这个方法的节点的一个完全相同的副本，为true表示执行深复制，为false表示执行浅复制。&lt;br&gt;normalize()方法 处理文档树中的文本节点&lt;/p&gt;
&lt;p&gt;Document类型&lt;br&gt;表示整个文档&lt;br&gt;document对象时window对象的一个属性。&lt;br&gt;Document节点具有以下特征：&lt;br&gt;nodeType的值为9；&lt;br&gt;nodeName的值为”#document”&lt;br&gt;nodeValue的值为null&lt;br&gt;parentValue的值为null&lt;br&gt;其它节点可能是一个DocumentType(最多一个)，Element(最多一个)，PricessingInstruction或Comment&lt;/p&gt;
&lt;p&gt;document 是 HTMLDocument 的一个类型实例&lt;br&gt;documentElement属性，始终指向HTML页面中的&lt;html&gt;元素&lt;br&gt;body属性，直接指向&lt;body&gt;元素&lt;br&gt;DocumentType，&amp;lt;!DOCTYPE&amp;gt;标签看成是一个与文档其它部分不同的实体，通过doctype属性来访问它的信息。&lt;br&gt;title属性，包含title元素中的文本。&lt;/body&gt;&lt;/html&gt;&lt;/p&gt;
&lt;p&gt;URL属性：包含页面完整的URL&lt;br&gt;domain属性：包含页面的域名&lt;br&gt;referrer属性：保存着链接到当前页面的那个页面的URL。&lt;br&gt;方法：&lt;br&gt;getElementById()&lt;br&gt;getElementsByTagName() 取得元素的标签名，返回一个HTMLCollection对象&lt;br&gt;HTMLCollection对象的方法 namedItem()通过元素的name特性取得集合中的项 []&lt;br&gt;HTMLDocument有的方法 getElementsByName() 返回带有给定name特性的所有元素。&lt;/p&gt;
&lt;p&gt;HTMLCollection对象属性和方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document&lt;span class=&quot;class&quot;&gt;.anchors&lt;/span&gt; 包含文档中所有带name特性的&amp;lt;a&amp;gt;元素
document&lt;span class=&quot;class&quot;&gt;.applets&lt;/span&gt; 包含文档中所有的&amp;lt;applet&amp;gt;元素
document&lt;span class=&quot;class&quot;&gt;.forms&lt;/span&gt;
document&lt;span class=&quot;class&quot;&gt;.images&lt;/span&gt;
document.links
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;document.implementation属性 提供 hasFeature()&lt;/p&gt;
&lt;p&gt;将输出流写入网页中的能力&lt;br&gt;write() writeln() open() close()&lt;/p&gt;
&lt;p&gt;Element节点&lt;br&gt;    nodeType的值为1&lt;br&gt;    取得特征&lt;br&gt;    getAttribute()&lt;br&gt;    setAttribute()&lt;br&gt;    removeAttribute()&lt;/p&gt;
&lt;p&gt;attributes属性  NamedNodeMap&lt;br&gt;getNamedItem()&lt;br&gt;removeNamedItem()&lt;br&gt;setNamedItem()&lt;br&gt;item(pos)&lt;/p&gt;
&lt;p&gt;createElement()方法&lt;/p&gt;
&lt;p&gt;createTextNode()&lt;br&gt;normalize();&lt;br&gt;splitText();&lt;/p&gt;
&lt;p&gt;注释在DOM中通过Comment类型来表示。Comment节点具有下列特征：&lt;/p&gt;
&lt;p&gt;CData片段是文档中的一个特殊区域，这个区域中可以包含不需要解析的任何格式的文本内容。&lt;br&gt;CDATASection&lt;/p&gt;
&lt;p&gt;DocumentType类型&lt;br&gt;DocumentFragment类型 轻量级的文档 可以包含和控制节点，但是不会像完整的文档那样占用额外的资源。&lt;br&gt;Atrr类型 元素的特征： name,value,specified&lt;/p&gt;
&lt;p&gt;DOM扩展&lt;br&gt;document对象的一个属性：compatMode属性 标示浏览器处于什么模式&lt;br&gt;CSS1Compat标准模式&lt;br&gt;BackCompat混杂模式&lt;/p&gt;
&lt;p&gt;滚动&lt;br&gt;HTMLELementde类型的扩展&lt;br&gt;scrollIntoView(alignWithTop)&lt;br&gt;scrollIntoIfNeeded(alignCenter)&lt;br&gt;scrollByLines(linesCount)&lt;br&gt;scrollByPages(pageCount)&lt;/p&gt;
&lt;p&gt;childern属性&lt;/p&gt;
&lt;p&gt;contains()方法确定某个给定的节点是不是另一个节点的后代&lt;/p&gt;
&lt;p&gt;innerText属性可以操作元素中包含的所有文本内容，无论文本位于子文档树中的什么位置。&lt;br&gt;对所有稳重中的HTML语法字符进行编码。&lt;br&gt;过滤掉所有的HTML标签&lt;/p&gt;
&lt;p&gt;innerHTML属性 在读信息时，返回当前元素所有子节点的HTML表现，包括元素、注释及文本节点。&lt;br&gt;在写入信息时，会按照指定的值创建新的DOM子树，并以该子树替换当前的所有子节点。&lt;br&gt;innerHTML处理的是HTML字符串，而innerText处理的文本字符串&lt;br&gt;outerText属性&lt;br&gt;outerHTML属性&lt;/p&gt;
&lt;p&gt;动态脚本&lt;/p&gt;
&lt;p&gt;xhtml的命名空间是：&lt;a href=&quot;http://www.w3.org/1991/xhtml&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.w3.org/1991/xhtml&lt;/a&gt;&lt;br&gt;命名空间的变化&lt;/p&gt;
&lt;p&gt;DOM2样式&lt;br&gt;style对象&lt;br&gt;cssTest&lt;br&gt;getPropertyValue()&lt;br&gt;removeProperty()&lt;br&gt;计算样式 只读&lt;br&gt;getComputedStyle()&lt;br&gt;IE中 currentStyle&lt;/p&gt;
&lt;p&gt;浏览器属性：visibility属性 都有一个默认的值：visible  inherit&lt;/p&gt;
&lt;p&gt;操作样式表&lt;br&gt;CSSStyleSheet类型&lt;br&gt;属性：&lt;br&gt;disabled&lt;br&gt;href&lt;br&gt;media&lt;br&gt;ownerNode&lt;br&gt;parentStyleSheet&lt;br&gt;title&lt;br&gt;type&lt;br&gt;cssRules&lt;br&gt;ownerRule&lt;br&gt;deleteRule&lt;br&gt;insertRule&lt;/p&gt;
&lt;p&gt;CSSRule对象 表示样式表中的每一条规则。&lt;br&gt;CSSStyleRule对象包含以下属性：&lt;br&gt;cssText&lt;br&gt;parentRule&lt;br&gt;parentStyleSheet&lt;br&gt;selectorText&lt;br&gt;style对象typle&lt;/p&gt;
&lt;p&gt;事件 观察者模式&lt;br&gt;事件类型：&lt;br&gt;UI(User Interface，用户界面)事件，在用户与页面上的元素交互时触发；&lt;br&gt;DOMActive&lt;br&gt;DOMFocusIn&lt;br&gt;DOMFocusOut&lt;br&gt;鼠标事件，当用户通过鼠标在页面上执行操作时触发；&lt;br&gt;click&lt;br&gt;dblclick&lt;br&gt;mousedown&lt;br&gt;mouseout&lt;br&gt;mouseover&lt;br&gt;mouseup&lt;br&gt;mousemove&lt;br&gt;坐标 clientX clientY&lt;br&gt;键盘事件，当用户通过键盘在页面上执行操作时触发；&lt;br&gt;HTML事件，当浏览器窗口发生变化或发生特定的客户端/服务器交互时触发&lt;br&gt;变动(mutation)事件，当底层DOM结果发生变化时触发。&lt;br&gt;shiftKey&lt;br&gt;ctrlKey&lt;br&gt;altKey&lt;br&gt;metaKey (IE不支持)&lt;/p&gt;
&lt;p&gt;button属性&lt;br&gt;detail属性&lt;/p&gt;
&lt;p&gt;键盘事件，当用户通过键盘在页面上执行操作时触发；&lt;/p&gt;
&lt;p&gt;keydown&lt;br&gt;keypress&lt;br&gt;keyup&lt;br&gt;textInput&lt;br&gt;keyCode属性&lt;br&gt;charCode属性&lt;/p&gt;
&lt;p&gt;HTML事件：指那些不一定与用户操作有关的事件&lt;br&gt;load&lt;br&gt;unload&lt;br&gt;abort&lt;br&gt;error&lt;br&gt;selector&lt;br&gt;change&lt;br&gt;submit&lt;br&gt;reset&lt;br&gt;resize&lt;br&gt;scroll&lt;br&gt;focus&lt;br&gt;blur&lt;/p&gt;
&lt;p&gt;变动事件mutation DOM中某一部分发生变化时给出提示。&lt;br&gt;DOMSubtreeModified:&lt;br&gt;DOMNodeInserted&lt;br&gt;DOMNodeRemoved&lt;br&gt;DOMNodeInsertedIntoDocument&lt;br&gt;DOMNodeRemovedFromDocument&lt;br&gt;DOMAtrrModified&lt;br&gt;DOMCharacterDataModified&lt;/p&gt;
&lt;p&gt;专有事件&lt;br&gt;上下文菜单事件 contextmenu&lt;br&gt;卸载前事件 beforeunload事件&lt;br&gt;鼠标mouserwheel滚轮事件DOMMouseScroll&lt;br&gt;wheelDelta属性&lt;br&gt;DOMContentLoaded事件&lt;br&gt;就绪状态变化readystatechange事件&lt;/p&gt;
&lt;p&gt;函数柯理化：用于创建已经设置好了一个或多个参数的函数。&lt;br&gt;函数节流：背后思想：某些代码不可以在没有间断的情况连续重复执行&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;javascript是一种专为与网页交互而设计的脚本语言。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS21-Ajax与Comet</title>
    <link href="http://yoursite.com/2016/05/06/JS21-Ajax%E4%B8%8EComet/"/>
    <id>http://yoursite.com/2016/05/06/JS21-Ajax与Comet/</id>
    <published>2016-05-06T13:13:07.000Z</published>
    <updated>2016-06-13T08:24:25.795Z</updated>
    
    <content type="html">&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;Ajax : Asynchronous JavaScript + XML&lt;/excerpt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;the rest=&quot;&quot; of=&quot;&quot; contents=&quot;&quot; |=&quot;&quot; 余下全文=&quot;&quot;&gt;


&lt;/the&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;向服务器请求额外的数据而无须卸载页面，会带来更好的用户体验。&lt;/p&gt;
&lt;p&gt;核心对象：XMLHttpRequest对象(XHR)&lt;/p&gt;
&lt;h2 id=&quot;XMLHttpRequest对象&quot;&gt;XMLHttpRequest对象&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;var&lt;/span&gt; xhr = new &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;XMLHttpRequest&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;open方法&quot;&gt;open方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;参数：要发送的请求的类型(&lt;span class=&quot;built_in&quot;&gt;get&lt;/span&gt;,&lt;span class=&quot;built_in&quot;&gt;post&lt;/span&gt;)、请求的&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;、表示是否异步发送的布尔值。

&lt;span class=&quot;built_in&quot;&gt;open&lt;/span&gt;方法并不会真正发送请求，而只是启动一个请求以备发送

发送请求：&lt;span class=&quot;built_in&quot;&gt;send&lt;/span&gt;()

参数:作为请求主体发送的数据
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;同步请求：表示等服务器响应之后再继续执行。&lt;/p&gt;
&lt;p&gt;在收到请求之后，响应的数据会自动天长XHR对象的属性，相关属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;responseText:作为响应主体被返回的文本
responseXML:如果响应的内容是&lt;span class=&quot;string&quot;&gt;&quot;text/xml&quot;&lt;/span&gt;或&lt;span class=&quot;string&quot;&gt;&quot;application/xml&quot;&lt;/span&gt;,这个属性将保存着数据&lt;span class=&quot;keyword&quot;&gt;XML&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DOM&lt;/span&gt;文档
status：响应的HTTP状态
status：HTTP状态的说明。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;readyState属性：表示请求/响应过程的当前活动阶段。&lt;br&gt;    0:为初始化&lt;br&gt;    1：启动&lt;br&gt;    2：发送&lt;br&gt;    3:接受&lt;br&gt;    4:完成&lt;/p&gt;
&lt;p&gt;每一次状态的改变，都会触发一次readystatechange事件，不过必须在open()之前指定事件处理程序才能确保跨浏览器的兼容性。&lt;br&gt;必须通过XHR对象本身来确定下一步该怎么做。&lt;/p&gt;
&lt;p&gt;在接受相应之前，可以用abort()方法来取消异步的请求。&lt;/p&gt;
&lt;h2 id=&quot;HTTP头部信息&quot;&gt;HTTP头部信息&lt;/h2&gt;&lt;p&gt;在发送XHR请求的同时，还有发送：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Accept
Accept-Charset
Accept-Encoding
Accept-&lt;span class=&quot;built_in&quot;&gt;Language&lt;/span&gt;:
Connectio
Cookie
Host
Referer
User-&lt;span class=&quot;built_in&quot;&gt;Agent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;GET请求&quot;&gt;GET请求&lt;/h2&gt;&lt;p&gt;想服务器查询某些信息&lt;/p&gt;
&lt;p&gt;查询字符串中每个参数的名称和值都必须使用encodeURIComponent()进行编码，才能放到URL的末尾。所有的名-值对都必须由和号&amp;amp;分割。&lt;/p&gt;
&lt;h2 id=&quot;POST请求&quot;&gt;POST请求&lt;/h2&gt;&lt;p&gt;向服务器发送应该被保存的数据。POST请求，把数据作为请求的主体提交，POST请求的主体可以包含非常多的数据，而且格式不限。&lt;/p&gt;
&lt;h1 id=&quot;XMLHttpRequest2级&quot;&gt;XMLHttpRequest2级&lt;/h1&gt;&lt;h3 id=&quot;FormData&quot;&gt;FormData&lt;/h3&gt;&lt;h3 id=&quot;超时设定timeout_会触发ontimeout事件&quot;&gt;超时设定timeout 会触发ontimeout事件&lt;/h3&gt;&lt;h3 id=&quot;overrideMimeType()方法_用于重写XHR相应的MIME类型&quot;&gt;overrideMimeType()方法 用于重写XHR相应的MIME类型&lt;/h3&gt;&lt;h1 id=&quot;进度事件&quot;&gt;进度事件&lt;/h1&gt;&lt;p&gt;loadStart：在接收到相应数据的第一个字节时触发&lt;br&gt;progress：在接受相应期间持续不断地触发&lt;br&gt;error：在请求发生错误时触发&lt;br&gt;abort：在因为调用了abort()方法而终止连接时触发&lt;br&gt;load：在接受完整的响应数据时触发&lt;br&gt;loadend：在通信完成或者触发error、abort和load事件后触发。&lt;/p&gt;
&lt;h1 id=&quot;跨域资源共享&quot;&gt;跨域资源共享&lt;/h1&gt;&lt;p&gt;XHR对象只能访问与包含它的页面位于同一个于中的资源。&lt;br&gt;CORS（Cross-Origin Resource Sharing)&lt;br&gt;使用自定义的HTTP头部让浏览器与服务器进行沟通，从而决定请求或响应是否应该成功，还是失败。&lt;/p&gt;
&lt;h3 id=&quot;IE对CORS的实现&quot;&gt;IE对CORS的实现&lt;/h3&gt;&lt;p&gt;XDR(XdDomainRequest)类型&lt;/p&gt;
&lt;p&gt;所有XDR的请求都是异步执行的，不能用它来创建同步请求。&lt;/p&gt;
&lt;p&gt;CSRF（corss-site request forgery) 跨站点请求伪造&lt;br&gt;XSS(Corss-site scripting)跨站点脚本&lt;/p&gt;
&lt;h3 id=&quot;其它浏览器对CORS的实现&quot;&gt;其它浏览器对CORS的实现&lt;/h3&gt;&lt;p&gt;原生的XMLHttpRequest对象支持跨域，要在open中传入绝对URL&lt;/p&gt;
&lt;h3 id=&quot;Prefighted_Requests&quot;&gt;Prefighted Requests&lt;/h3&gt;&lt;p&gt;透明服务器验证技术&lt;/p&gt;
&lt;p&gt;Preflight请求。&lt;/p&gt;
&lt;h3 id=&quot;带凭据的请求&quot;&gt;带凭据的请求&lt;/h3&gt;&lt;p&gt;默认情况下，跨域请求不提供凭据(cookie,HTTP认证，客户端SSL证明)&lt;br&gt;通过将withCredentials属性设置为true，可以指定某个请求应该发送凭据。，服务器接受带凭据的请求，会用Access-Control-Allow-Credentials：true的HTTP头部来响应。&lt;/p&gt;
&lt;h2 id=&quot;其它跨域技术&quot;&gt;其它跨域技术&lt;/h2&gt;&lt;h3 id=&quot;图形ping&quot;&gt;图形ping&lt;/h3&gt;&lt;h3 id=&quot;JSONP&quot;&gt;JSONP&lt;/h3&gt;&lt;h3 id=&quot;Comet&quot;&gt;Comet&lt;/h3&gt;&lt;p&gt;一种服务器向叶面推送数据的技术。&lt;br&gt;Comet是能够让信息近乎实时地被推送到页面上，非常适合处理体育比赛的分数和股票报价。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;长轮询&lt;br&gt; 短轮询：浏览器定时向服务器发送请求，看有没有更新的数据。&lt;br&gt; 长轮询：页面发起一个到服务器的请求，然后服务器一直保持连接打开，直到有数据可发送。&lt;/li&gt;
&lt;li&gt;HTTP流&lt;br&gt; 它在整个生命周期内只使用一个HTTP连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;服务器发送事件&quot;&gt;服务器发送事件&lt;/h2&gt;&lt;p&gt;SSE(Server-Sent Events，服务器发送事件)&lt;/p&gt;
&lt;h2 id=&quot;web_sockets&quot;&gt;web sockets&lt;/h2&gt;&lt;p&gt;在一个单独的持久的连接上提供全双工、双向通信。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;Ajax : Asynchronous JavaScript + XML&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="ajax" scheme="http://yoursite.com/tags/ajax/"/>
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>JS20-JSON</title>
    <link href="http://yoursite.com/2016/04/30/JS20-JSON/"/>
    <id>http://yoursite.com/2016/04/30/JS20-JSON/</id>
    <published>2016-04-30T13:15:02.000Z</published>
    <updated>2016-06-13T08:24:46.115Z</updated>
    
    <content type="html">&lt;p&gt;&lt;excerpt in=&quot;&quot; index=&quot;&quot; |=&quot;&quot; 首页摘要=&quot;&quot;&gt;&lt;br&gt;JSON:JavaScript Object Notation，javascript对象表示法&lt;/excerpt&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;the rest=&quot;&quot; of=&quot;&quot; contents=&quot;&quot; |=&quot;&quot; 余下全文=&quot;&quot;&gt;

&lt;/the&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;JSON&quot;&gt;JSON&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;JSON:JavaScript Object Notation，javascript对象表示法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JSON可以直接传递给eval()&lt;/p&gt;
&lt;p&gt;JSON是javascript语法的子集。&lt;/p&gt;
&lt;h2 id=&quot;语法&quot;&gt;语法&lt;/h2&gt;&lt;p&gt;三种类型的值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;简单值&lt;/strong&gt;：字符串、数值、布尔值和null；不支持undefined&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;对象&lt;/strong&gt;：表示的是一组无序的键值对儿。每个键值对儿中的值可以是简单值，也可以是复杂数据类型的值。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;数组&lt;/strong&gt;：表示一组有序的值的列表，可以通过数值索引来访问其中的值。数组的值可以是任意类型的—简单值，对象或数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;JOSN是一种表示结构化数据的格式。&lt;/p&gt;
&lt;p&gt;注意：&lt;br&gt;&lt;strong&gt;JSON字符串必须使用双引号；&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;JSON的属性名也要加分号&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;对象&quot;&gt;对象&lt;/h2&gt;&lt;p&gt;JSON中对象：&lt;/p&gt;
&lt;p&gt;JSON中要求给属性加引号：&lt;br&gt;{&lt;br&gt;    “name”：”Nicholas”,&lt;br&gt;    “age”:29&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;和javascript对象比较：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;没有变量声明&lt;/li&gt;
&lt;li&gt;没有末尾的分号&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;属性的值可以简单之，也可以是复杂数据类型&lt;/p&gt;
&lt;h2 id=&quot;数组&quot;&gt;数组&lt;/h2&gt;&lt;p&gt;[25,”hi”,true]&lt;/p&gt;
&lt;h2 id=&quot;解析与序列化&quot;&gt;解析与序列化&lt;/h2&gt;&lt;p&gt;可以吧JSON数据结构解析为有用的javascript对象。&lt;/p&gt;
&lt;p&gt;序列号JSON&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;JSON.stringify()&lt;/li&gt;
&lt;li&gt;toJSON()对象的方法&lt;/li&gt;
&lt;li&gt;parser()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;shim : &lt;a href=&quot;https://github.com/douglascrockford/JSON-js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/douglascrockford/JSON-js&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;Excerpt in index | 首页摘要&gt;&lt;br&gt;JSON:JavaScript Object Notation，javascript对象表示法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="json" scheme="http://yoursite.com/tags/json/"/>
    
  </entry>
  
  <entry>
    <title>JS11--DOM2和DOM3</title>
    <link href="http://yoursite.com/2016/04/30/JS11-DOM2-DOM3/"/>
    <id>http://yoursite.com/2016/04/30/JS11-DOM2-DOM3/</id>
    <published>2016-04-30T13:14:35.000Z</published>
    <updated>2016-04-30T13:18:31.418Z</updated>
    
    <content type="html">&lt;h1 id=&quot;DOM2级核心和_DOM2级视图_以及_DOM2级HTML_的变化&quot;&gt;DOM2级核心和 DOM2级视图 以及 DOM2级HTML 的变化&lt;/h1&gt;&lt;h2 id=&quot;1-针对XML命名空间的变化&quot;&gt;1.针对XML命名空间的变化&lt;/h2&gt;&lt;h2 id=&quot;2-其它&quot;&gt;2.其它&lt;/h2&gt;&lt;h3 id=&quot;2-1DcoumentType&quot;&gt;2.1DcoumentType&lt;/h3&gt;&lt;p&gt;新增方法&lt;br&gt;    文档声明中的信息&lt;br&gt;    publicId&lt;br&gt;    systemId&lt;br&gt;    internalSubset&lt;/p&gt;
&lt;h3 id=&quot;2-2_Document类型的变化&quot;&gt;2.2 Document类型的变化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;importNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; 文档中取得一个节点，然后倒入到另一个文档，使其成为这个文档的一部分。

 DOM2级核心：
document.implementation对象 新增 
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createDcoumentType&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  创建一个新的节点，只在创建一个新的文档类型是有用
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createDocument&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;     创建新文档

DOM2级HTML：
document&lt;span class=&quot;class&quot;&gt;.implementation&lt;/span&gt;
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createHTMLDocument&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  用于创建一个完整的HTML文档

DOM2级视图：
defaultView属性，保存着一个指针，指向拥有给定文档的窗口
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-3Node类型的变化&quot;&gt;2.3Node类型的变化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isSupported&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;方法    用于确定当前节点具有什么能力
特性名和版本号

DOM3级,元素比较方法：
相等：两个节点是相同的类型，具有相等的属性
相同：两个节点引用的是同一个对象。
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isSameNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isEqualNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;

DOM3级: 为DOM添加格外数据的新方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getUserData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setUserData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;2-4框架的变化&quot;&gt;2.4框架的变化&lt;/h3&gt;&lt;pre&gt;&lt;code&gt; 框架 HTMLFrameElement
内嵌框架    HTMLIFrameElement
新的属性：contextDocument指向框架内容的文档对象。
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;DOM_2级样式&quot;&gt;DOM 2级样式&lt;/h1&gt;&lt;h2 id=&quot;1-访问元素的样式–style对象&quot;&gt;1.访问元素的样式–style对象&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;style对象是CSSStyleDeclaration的实例&lt;/li&gt;
&lt;li&gt;对于使用段划线的CSS属性名，必须将其转换为驼峰式，才能通过JavaScript访问。&lt;/li&gt;
&lt;li&gt;float是javascript的保留字，所有不能用在属性名，将其转换成cssFloat，sytleFloat(IE)&lt;/li&gt;
&lt;li&gt;标准模式下，所有度量值都必须指定一个度量单位。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;DOM2级支持的样式&lt;/p&gt;
&lt;p&gt; cssText      style特征中css代码&lt;br&gt; length        css属性的个数&lt;br&gt; parentRule    CSS信息的CSSRule对象&lt;br&gt; getPropertyCSSValue(propertyName)     返回包含给定属性的CSSValue对象&lt;br&gt;  getPropertyPriority(propertyName)     返回是否使用了！important&lt;br&gt; getPropertyValue(propertyName)        返回给定属性的字符串值&lt;br&gt; item(inexe)            返回给定位置的CSS属性名称&lt;br&gt; removeProperty(propretyName)    从样式中删除给定属性&lt;br&gt; setProperty(propertyName,value,priority)：将给定属性设置为相应的值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算样式&lt;br&gt; document.defaultView&lt;br&gt; 方法&lt;br&gt; getComputedStyle()方法 返回CSSStyleDeclaration对象&lt;br&gt;所有计算样式都是只读的。不能修改计算后样式对象中的CSS属性。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-操作样式表—CSSStyleSheet类型&quot;&gt;2.操作样式表—CSSStyleSheet类型&lt;/h2&gt;&lt;p&gt;包含通过&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;元素包含的样式表和&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;元素中定义的样式表。&lt;br&gt;这个两个元素分别由HTMLLinkElement和HTMLStyleElement类型表示。&lt;/p&gt;
&lt;p&gt;CSSStyleSheet类型更为通用，CSSStyleSheet是一套只读接口，有一个属性除外。&lt;/p&gt;
&lt;p&gt;CSSStyleSheet继承自StyleSheet(一个基础接口来定义非CSS样式表)&lt;br&gt;其StyleSheet的属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;disabled：表示样式是否被禁用
href
media
ownerNode
parentStyleSheet
&lt;span class=&quot;built_in&quot;&gt;title&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;type&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;除了disabled，其它样式都是只读的。&lt;/p&gt;
&lt;p&gt;CSSStyleSheet特有的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;cssRules
ownerRule
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;deleteRule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(index)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;insertRule&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(rule,index)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;应用于文档的所有样式表都是通过document.styleSheets集合来表示的。&lt;/p&gt;
&lt;h4 id=&quot;CSS规则&quot;&gt;CSS规则&lt;/h4&gt;&lt;p&gt;cssText&lt;br&gt;parentRule&lt;br&gt;parentSytleSheet&lt;br&gt;style&lt;br&gt;type&lt;/p&gt;
&lt;h4 id=&quot;创建规则&quot;&gt;创建规则&lt;/h4&gt;&lt;p&gt;isertRule()&lt;/p&gt;
&lt;p&gt;addRule()(IE)&lt;/p&gt;
&lt;h4 id=&quot;删除规则&quot;&gt;删除规则&lt;/h4&gt;&lt;p&gt;deleteRule()&lt;/p&gt;
&lt;p&gt;removeRule()(IE)&lt;/p&gt;
&lt;h1 id=&quot;DOM_2级_遍历&quot;&gt;DOM 2级 遍历&lt;/h1&gt;&lt;h3 id=&quot;偏移量&quot;&gt;偏移量&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;offsetHeight     元素在垂直方法上占用的空间大小&lt;/li&gt;
&lt;li&gt;offsetWidth        元素在水平方法上占用的空间大小&lt;/li&gt;
&lt;li&gt;offsetLeft        元素的左外边距包含至左内边框之间的像素距离&lt;/li&gt;
&lt;li&gt;offsetTop        元素的右外边距包含至上内边框之间的像素距离&lt;/li&gt;
&lt;li&gt;offsetParent&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;客户区大小&quot;&gt;客户区大小&lt;/h3&gt;&lt;p&gt;元素内容及其内边距所占据的空间大小。&lt;/p&gt;
&lt;p&gt;clientWidth 元素内容区宽度加左右内边距宽度&lt;br&gt;clientHeight    元素内容区高度加上上下内边距宽度&lt;/p&gt;
&lt;h3 id=&quot;滚动大小&quot;&gt;滚动大小&lt;/h3&gt;&lt;p&gt;包含滚动内容的元素的大小。&lt;/p&gt;
&lt;p&gt;scrollHeight&lt;br&gt;scrollWidth&lt;br&gt;scrollLeft&lt;br&gt;scrollTop&lt;/p&gt;
&lt;h1 id=&quot;DOM_2级_遍历-1&quot;&gt;DOM 2级 遍历&lt;/h1&gt;&lt;p&gt;NodeIterator&lt;br&gt;TreeWalker&lt;br&gt;对于给定的起点对DOM结构执行深度优先的遍历操作。&lt;/p&gt;
&lt;h3 id=&quot;NodeIterator&quot;&gt;NodeIterator&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用document.createNodeIterator()方法创建实例&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;参数：&lt;br&gt;    root&lt;br&gt;    whatToShow&lt;br&gt;    filter&lt;br&gt;    entityReferExpansion&lt;/p&gt;
&lt;p&gt;whatToShow掩码位&lt;br&gt;NodeFilter是一个抽象类型，不能直接创建其实例&lt;br&gt;NodeFilter中的类型定义&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NodeFilter.SHOW_ALL&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_ELEMENT&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_ATTRIBUTE&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_CDATA_SECTION&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_ENTITY_REFERENCE&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_ENTITY&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_PROCESSING_INSTRAUCTION&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_COMMENT&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_DOCUMENT&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_DOCUMENT_TYPE&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_DOCUMENT_FRAGMENT&lt;/li&gt;
&lt;li&gt;NodeFilter.SHOW_NOTATOIN&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;NodeFilter中的方法&lt;br&gt;acceptNode()&lt;/p&gt;
&lt;p&gt;过滤器的返回值：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;NodeFilter.FILTER_ACCEPT 应该访问给定的节点&lt;/li&gt;
&lt;li&gt;NodeFilter.FILTER_SKIP    不应该访问给定的节点&lt;br&gt;NodeIterator方法&lt;/li&gt;
&lt;li&gt;nextNode()&lt;/li&gt;
&lt;li&gt;previousNode()&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;TreeWalker&quot;&gt;TreeWalker&lt;/h3&gt;&lt;p&gt;更高级版本&lt;br&gt;创建 document.createTreeWalker()&lt;br&gt;除了nextNode()和previousNode()外，提供的方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parentNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;firstChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lastChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;nextSibling&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;previousSibling&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;过滤器的返回值：&lt;br&gt;NodeFilter.FILTER_ACCEPT  应该访问给定的节点&lt;br&gt;NodeFilter.FILTER_SKIP        跳过给定的节点继续前进到子树中的下一个节点。&lt;br&gt;NodeFilter.FILTER_REJECT    跳过相应的节点以及该节点的整个子树。&lt;/p&gt;
&lt;p&gt;属性：&lt;br&gt;currentNode任何遍历方法在上一次遍历中返回的节点。可以修改遍历继续进行的起点&lt;/p&gt;
&lt;h1 id=&quot;DOM_2级_范围&quot;&gt;DOM 2级　范围&lt;/h1&gt;&lt;p&gt;范围可以选择文档中的一个区域，而不必考虑节点的界限。&lt;/p&gt;
&lt;p&gt;document.createRange()&lt;/p&gt;
&lt;p&gt;属性提供了当前范围在文档中的位置&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;startContainer&lt;/li&gt;
&lt;li&gt;startOffset&lt;/li&gt;
&lt;li&gt;endContainer&lt;/li&gt;
&lt;li&gt;commonAncestorContainer&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;方法&lt;br&gt;    selectNode()&lt;br&gt;    selectNodeContents()&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM2级核心和_DOM2级视图_以及_DOM2级HTML_的变化&quot;&gt;DOM2级核心和 DOM2级视图 以及 DOM2级HTML 的变化&lt;/h1&gt;&lt;h2 id=&quot;1-针对XML命名空间的变化&quot;&gt;1.针对XML命名空间的变化&lt;/h2&gt;&lt;h2 id=&quot;2-其它&quot;&gt;2.
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS10--DOM扩展</title>
    <link href="http://yoursite.com/2016/04/30/JS10-DOM%E6%89%A9%E5%B1%95/"/>
    <id>http://yoursite.com/2016/04/30/JS10-DOM扩展/</id>
    <published>2016-04-30T13:14:02.000Z</published>
    <updated>2016-04-30T13:18:45.098Z</updated>
    
    <content type="html">&lt;h1 id=&quot;DOM扩展&quot;&gt;DOM扩展&lt;/h1&gt;&lt;p&gt;两个方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Selectors API(选择器API)&lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;选择符API&quot;&gt;选择符API&lt;/h2&gt;&lt;p&gt;Selectors API :让浏览器支持原生的CSS查询。&lt;/p&gt;
&lt;h3 id=&quot;1-querySelector()&quot;&gt;1.querySelector()&lt;/h3&gt;&lt;p&gt;Level1 中 接受一个CSS选择符，返回与该模式匹配的第一个元素，如果没有找到返回null。&lt;br&gt;可以通过Document、Element访问&lt;/p&gt;
&lt;h3 id=&quot;2-querySelectorAll()&quot;&gt;2.querySelectorAll()&lt;/h3&gt;&lt;p&gt;Level1中 接受一个CSS选择符，返回与该模式匹配的所有元素，一个NodeList实例，如果没有找到返回null。&lt;/p&gt;
&lt;p&gt;底层类似于一组元素的快照。&lt;br&gt; 可以使用item()或者方括号&lt;/p&gt;
&lt;p&gt;可以通过Document、Element访问&lt;/p&gt;
&lt;h3 id=&quot;matchesSelector()方法&quot;&gt;matchesSelector()方法&lt;/h3&gt;&lt;p&gt;Level 2 中新增的&lt;br&gt;接受一个CSS选择符，如果调用元素与该元素匹配，返回true，否则，返回false。&lt;/p&gt;
&lt;h2 id=&quot;元素遍历&quot;&gt;元素遍历&lt;/h2&gt;&lt;p&gt;Element Traversal API为DOM元素添加了一下5个属性：&lt;br&gt;可以不用担心空白节点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;childElementCount&lt;/li&gt;
&lt;li&gt;firstElementChild&lt;/li&gt;
&lt;li&gt;lastElementChild&lt;/li&gt;
&lt;li&gt;previousElementSibling&lt;/li&gt;
&lt;li&gt;nextEementSibling&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;HTML5&quot;&gt;HTML5&lt;/h1&gt;&lt;h2 id=&quot;1-getElementsByClassName()&quot;&gt;1.getElementsByClassName()&lt;/h2&gt;&lt;p&gt;接受一个包含多个类名的字符串，返回带有指定类的所有元素的NodeList。类名的先后顺序不重要。&lt;/p&gt;
&lt;h2 id=&quot;2-_classList属性&quot;&gt;2. classList属性&lt;/h2&gt;&lt;p&gt;在操作类名是，需要通过className属性添加、删除和替换类型。&lt;/p&gt;
&lt;p&gt;是新集合类型DOMTokenList的实例。&lt;/p&gt;
&lt;p&gt;方法：&lt;br&gt;add(value)&lt;br&gt;contains(value)&lt;br&gt;remove(value)&lt;br&gt;toggle(value)&lt;/p&gt;
&lt;h2 id=&quot;3-_焦点管理&quot;&gt;3. 焦点管理&lt;/h2&gt;&lt;p&gt;document.activeElement属性始终保存DOM中当前焦点的元素。&lt;/p&gt;
&lt;p&gt;document.hasDocus()方法用于确定文档是否获取了焦点。&lt;/p&gt;
&lt;h3 id=&quot;4-HTMLDocuement的变化&quot;&gt;4.HTMLDocuement的变化&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;readyState属性–&amp;gt;实现一个文档是否已经加载完毕&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;loading：正则加载文档&lt;/li&gt;
&lt;li&gt;complete：已经加载完文档&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;兼容模式 compatMode属性 告诉开发人员浏览器使用了哪种渲染模式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;CSS1Compat：标准模式&lt;/li&gt;
&lt;li&gt;BackCompat：混杂模式&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;head属性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引用head元素&lt;h3 id=&quot;5-字符集属性&quot;&gt;5.字符集属性&lt;/h3&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;charset属性：表示文档中实际使用的字符集，也可以用来定义新字符集&lt;/li&gt;
&lt;li&gt;defaultCharset：表示根据默认浏览器即操作系统的设计，当前文档默认的字符集属性是什么。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;6-自动以数据属性&quot;&gt;6.自动以数据属性&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;要加前缀data-&lt;/li&gt;
&lt;li&gt;通过dataset属性来访问自定义属性的值。&lt;/li&gt;
&lt;li&gt;dataset属性是DOMStringMap的一个实例。名值对。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;7-插入标记&quot;&gt;7.插入标记&lt;/h3&gt;&lt;h4 id=&quot;1-_innerHTML属性&quot;&gt;1. innerHTML属性&lt;/h4&gt;&lt;h4 id=&quot;2-_outerHTML属性&quot;&gt;2. outerHTML属性&lt;/h4&gt;&lt;h4 id=&quot;3-_insertAdjacentHTML()方法&quot;&gt;3. insertAdjacentHTML()方法&lt;/h4&gt;&lt;p&gt;第一个元素：&lt;br&gt;beforebegin&lt;br&gt;afterbegin&lt;br&gt;beforeend&lt;br&gt;afterend&lt;/p&gt;
&lt;h4 id=&quot;4-内存与性能问题&quot;&gt;4.内存与性能问题&lt;/h4&gt;&lt;h3 id=&quot;8-scrollIntoView()方法&quot;&gt;8.scrollIntoView()方法&lt;/h3&gt;&lt;p&gt;在所有HTML元素上调用，通过滚动浏览器窗口或某个容器元素，调用元素就可以出现在视口中。&lt;/p&gt;
&lt;h1 id=&quot;专有扩展&quot;&gt;专有扩展&lt;/h1&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;DOM扩展&quot;&gt;DOM扩展&lt;/h1&gt;&lt;p&gt;两个方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Selectors API(选择器API)&lt;/li&gt;
&lt;li&gt;HTML5&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;选择符API&quot;&gt;选择符API&lt;/h2&gt;&lt;p&gt;Selectors API :
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS9--DOM</title>
    <link href="http://yoursite.com/2016/04/30/JS9-DOM/"/>
    <id>http://yoursite.com/2016/04/30/JS9-DOM/</id>
    <published>2016-04-30T13:13:50.000Z</published>
    <updated>2016-04-30T13:18:54.458Z</updated>
    
    <content type="html">&lt;h1 id=&quot;节点层次&quot;&gt;节点层次&lt;/h1&gt;&lt;h2 id=&quot;1-_Node类型&quot;&gt;1. Node类型&lt;/h2&gt;&lt;p&gt;所有节点类型都继承自Node&lt;/p&gt;
&lt;p&gt;节点类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素节点&lt;/li&gt;
&lt;li&gt;文本节点&lt;/li&gt;
&lt;li&gt;属性节点&lt;/li&gt;
&lt;li&gt;&lt;h3 id=&quot;节点类型&quot;&gt;节点类型&lt;/h3&gt; 属性            说明&lt;br&gt; nodeType    表明节点类型 Node类型中定义了12个数值常量表示节点类型&lt;br&gt; nodeName    保存元素的标签名&lt;br&gt; nodeValue    &lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;节点关系&quot;&gt;节点关系&lt;/h3&gt;&lt;p&gt;NodeList对象，一种类数组对象，用于保存一组有序的节点。&lt;br&gt;基于DOM结构动态执行查询的结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性            说明
childNodes    返回NodeList对象 访问的话，可以用方括号[num]和&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;&lt;/span&gt;
parentNode    指向文档树中的父节点
previousSibling    
nextSibling
firstChild
lastChild        
ownerDocument    指向整个文档的文档节点
方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;hasChildNodes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    在节点包含一或多个子节点的情况下返回true
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;节点操作&quot;&gt;节点操作&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;插入&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    用于向childNodes列表的末尾添加一个节点，返回新增节点
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  参数(要插入的节点，参照节点)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;任何DOM节点不能同时出现在文档的多个位置上。&lt;br&gt;如果传入的节点已经试文档的一部分，那结果就是该节点从原来的位置转移到新位置。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移除&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;replaceChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reomveChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述四个方法都是某个节点的子节点，必须取得其父节点。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;其它方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;cloneNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    用于创建调用这个方法的节点的一个完全相同的副本
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;normalize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    处理文档树中的文本节点 主要处理空文本节点，和连续出现的两个空文本节点。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-_Document类型&quot;&gt;2. Document类型&lt;/h2&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;document对象是HTMLDocument(继承自Document)的一个实例，表示整个HTML页面。&lt;/p&gt;
&lt;p&gt;document对象是window对象的一个属性&lt;/p&gt;
&lt;p&gt;document节点特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType=9&lt;/li&gt;
&lt;li&gt;nodeName=”#document”&lt;/li&gt;
&lt;li&gt;nodeValue = null&lt;/li&gt;
&lt;li&gt;parentNode = null&lt;/li&gt;
&lt;li&gt;ownerDocument = null&lt;/li&gt;
&lt;li&gt;其子节点可能是一个DocumentType(最多一个)、Element(最多一个)、ProcessingInstruction或Comment。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;文档的子节点&quot;&gt;文档的子节点&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;属性                    说明
documentElement        始终指向HTML页面中的&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;元素
body                直接指向&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;元素
doctype                取得对&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE&amp;gt;&lt;/span&gt;的引用，浏览器支持不一致
注释，不同浏览器的处理也不一致
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;文档信息&quot;&gt;文档信息&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;属性            说明
titile        包含着&lt;span class=&quot;variable&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;元素中的文本，显示在浏览器窗口的标题栏或标签页
/&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;网页请求有关&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;/    
URL            包含页面完整的URL            
domain        包含页面的域名
referrer    保存着链接到当前页面的那个URL，没有的话是空字符串
/&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;上述三个职业domain可以设置，如果这回为不包含的域，将出错。如果域名一开始是松散的，就不能将它设置为紧绷的。&lt;span class=&quot;keyword&quot;&gt;*&lt;/span&gt;/
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;查找元素&quot;&gt;查找元素&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  返回包含零个或多个元素的NodeList，在HTML文档中会返回HTMLCollection。可以通过方括号[num] 或者 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;&lt;/span&gt;访问，还有length属性，&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;namedItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;方法，听过元素的namedItem特征取得集合中的项。提过了按名称访问[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;].
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getElementsByName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;特殊集合&quot;&gt;特殊集合&lt;/h3&gt;&lt;p&gt;这些集合都是HTMLCollection对象&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; document&lt;span class=&quot;class&quot;&gt;.anchors&lt;/span&gt;    包含文档中所有带name特性的&amp;lt;a&amp;gt;元素
document&lt;span class=&quot;class&quot;&gt;.applets&lt;/span&gt;    包含文档中的所有de&amp;lt;applet&amp;gt;元素怒，不建议使用
document&lt;span class=&quot;class&quot;&gt;.forms&lt;/span&gt;        包含文档中所有的&amp;lt;form&amp;gt;元素
document&lt;span class=&quot;class&quot;&gt;.images&lt;/span&gt;        包含文档中所有的&amp;lt;img&amp;gt;元素
document&lt;span class=&quot;class&quot;&gt;.links&lt;/span&gt;        包含文档中所有的href特征的&amp;lt;a&amp;gt;元素
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;DOM一致性检测&quot;&gt;DOM一致性检测&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;属性
document&lt;span class=&quot;class&quot;&gt;.implementation&lt;/span&gt; DOM1级提供了一个方法&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;hasFeature&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;文档写入&quot;&gt;文档写入&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;writel&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-_Element类型&quot;&gt;3. Element类型&lt;/h2&gt;&lt;p&gt;用于表现XML或HTML元素，提供对元素标签名、子节点即特征的访问。&lt;/p&gt;
&lt;p&gt;Elment节点特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 1&lt;/li&gt;
&lt;li&gt;nodeName = “元素标签名”&lt;/li&gt;
&lt;li&gt;nodeValue = null&lt;/li&gt;
&lt;li&gt;parentNode = Document 或Element&lt;/li&gt;
&lt;li&gt;其子节点可能是 Element、Text、Comment、ProcessingInstruction、CDATASection或EntityReference.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;HTML元素&quot;&gt;HTML元素&lt;/h3&gt;&lt;p&gt;html元素存在的标准特征，可以获得或者设置这些标准特征&lt;br&gt;    属性&lt;br&gt;    id&lt;br&gt;    titile&lt;br&gt;    lang&lt;br&gt;    dir&lt;br&gt;    className&lt;/p&gt;
&lt;p&gt;所有的HTML元素都是由HTMLElement或者更具体的子类型来表示的。&lt;/p&gt;
&lt;p&gt;page263&lt;/p&gt;
&lt;h3 id=&quot;取得特征&quot;&gt;取得特征&lt;/h3&gt;&lt;p&gt;操作特征的3个方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getAtrribute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setAtrribute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  特征名和特征值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;removeAtrribute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;特征名不区分大小写。&lt;/li&gt;
&lt;li&gt;html5规范：自定义的特征应该加上data-前缀以便验证&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;两类特殊的属性，在用属性访问和通过getAtrribute()访问的值不相同&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;style&lt;ul&gt;
&lt;li&gt;通过getAttribut()访问，返回的是style包含的css文本&lt;/li&gt;
&lt;li&gt;通过属性访问，则会返回一个对象 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;像onclick这样的事件处理函数，&lt;ul&gt;
&lt;li&gt;通过getAttribute访问，会返回字符串&lt;/li&gt;
&lt;li&gt;通过属性访问，会返回javascript函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;设置特征&quot;&gt;设置特征&lt;/h3&gt;&lt;p&gt;在DOM元素添加一个自定义的属性，该属性不会自动成为元素的特征，IE除外&lt;/p&gt;
&lt;h3 id=&quot;attributes属性&quot;&gt;attributes属性&lt;/h3&gt;&lt;p&gt;Element类型是使用attributes属性的唯一一个DOM节点类型&lt;/p&gt;
&lt;p&gt;NamedNodeMap 是一个动态几何&lt;/p&gt;
&lt;p&gt;元素的每一个特性都是由一个Attr节点表示，每个节点都保存在NamedNodeMap对象中。&lt;/p&gt;
&lt;h4 id=&quot;NamedNodeMap方法&quot;&gt;NamedNodeMap方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getNamedItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;removeNamedItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setNameItem&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(node)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(pos)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;遍历元素的特征是，attributes属性很有用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outputAtrributes&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;element&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pairs = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(),
            attrName,
            attrValue,
            i,
            len;
        &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,len=element.attributes.length;i &amp;lt; len ;i ++){
            attrName = element.attributes[i].nodeName;
            attrValue = element.attributes[i].nodeValue;
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(element.attributes[i].specified){  &lt;span class=&quot;comment&quot;&gt;//兼容IE&lt;/span&gt;
                pairs.push(attrName +&lt;span class=&quot;string&quot;&gt;&quot;=\&quot;&quot;&lt;/span&gt;+ attrValue + &lt;span class=&quot;string&quot;&gt;&quot;\&quot;&quot;&lt;/span&gt;);
            }
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; pairs.join(&lt;span class=&quot;string&quot;&gt;&quot; &quot;&lt;/span&gt;);
    }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;创建元素&quot;&gt;创建元素&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt; 参数：要创建元素的标签名
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;元素的子节点&quot;&gt;元素的子节点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;存在childNodes中，&lt;/li&gt;
&lt;li&gt;IE和其它浏览器在处理空白的方式上面不同，要注意这点差别&lt;/li&gt;
&lt;li&gt;可以在getElementsByTagName()方法的前面加上元素，表示这个元素的子节点和后代节点&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;4-_Text类型&quot;&gt;4. Text类型&lt;/h2&gt;&lt;p&gt;文本节点由Text类型表示，包含可以照字面解释的纯文本内容。&lt;/p&gt;
&lt;p&gt;text节点具有的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 3&lt;/li&gt;
&lt;li&gt;nodeName = “#text”&lt;/li&gt;
&lt;li&gt;nodeValue = “节点所包含的文本”&lt;/li&gt;
&lt;li&gt;parentNode = Element&lt;/li&gt;
&lt;li&gt;不支持(没有)子节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Text属性和方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性
nodeValue 访问Text节点中包含的文本
data   访问Text节点中包含的文本
length    保存着节点中字符的数目

方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;appendData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(text)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;deleteData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(offset,count)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;insertData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(offset,text)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;replaceData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(offset,count,text)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;splitText&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(offset)&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;substringData&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(offset,count)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;创建文本节点&quot;&gt;创建文本节点&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;DOM规范化文本节点&quot;&gt;DOM规范化文本节点&lt;/h3&gt;&lt;p&gt;相邻文本节点合并的方法，由Node类型定义，normalize()&lt;/p&gt;
&lt;p&gt;浏览器在解析文档时永远不会创建相邻的文本节点。这种情况之后作为执行DOM操作的结果出现。&lt;/p&gt;
&lt;h3 id=&quot;分割文本节点&quot;&gt;分割文本节点&lt;/h3&gt;&lt;p&gt;Text类提供了一个相反的的方法：splitText()，将一个文本节点分割成两个文本节点，即按照指定的位置分割nodeValue的值。&lt;/p&gt;
&lt;p&gt;分割文本节点是从文本节点中提取数据的一种常用DOM解析技术&lt;/p&gt;
&lt;h2 id=&quot;5-_Comment类型&quot;&gt;5. Comment类型&lt;/h2&gt;&lt;p&gt;注释在DOM中通过Comment类型来表示。&lt;/p&gt;
&lt;p&gt;Comment节点的特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 8&lt;/li&gt;
&lt;li&gt;nodeName= “#comment”&lt;/li&gt;
&lt;li&gt;nodeValue = “注释内容”&lt;/li&gt;
&lt;li&gt;parentNode = Document 或 Element&lt;/li&gt;
&lt;li&gt;不支持（没有）子节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Comment类型和Text类型继承相同的基类，用于除了splictText()方法之外的所有方法。&lt;/p&gt;
&lt;p&gt;createComment()传递注释文本，创建注释节点&lt;/p&gt;
&lt;h2 id=&quot;6-_CDATASection类型&quot;&gt;6.  CDATASection类型&lt;/h2&gt;&lt;p&gt;只针对基于XML的文档，表示的是CDATA区域&lt;br&gt;特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 4&lt;/li&gt;
&lt;li&gt;nodeName = “#cdata-section”&lt;/li&gt;
&lt;li&gt;nodeValue = CDATA区域内容&lt;/li&gt;
&lt;li&gt;parentNode = Document或Element&lt;/li&gt;
&lt;li&gt;不支持(没有)子节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;多数浏览器会把CDATA区域错误地解析为Comment或Element。&lt;br&gt;真正的xml文档，可以通过document.createCDataSection()来创建CDATA区域。&lt;/p&gt;
&lt;h2 id=&quot;7-_DocumentType类型&quot;&gt;7. DocumentType类型&lt;/h2&gt;&lt;p&gt;仅有Firefox、Safari、Opera支持它。&lt;br&gt;包含着与文档的doctype有关的信息&lt;/p&gt;
&lt;p&gt;特征&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 10&lt;/li&gt;
&lt;li&gt;nodeName = doctype&lt;/li&gt;
&lt;li&gt;nodeValue= null&lt;/li&gt;
&lt;li&gt;parentNode= Document&lt;/li&gt;
&lt;li&gt;不支持(没有)子节点&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;DOM1级不支持动态创建&lt;/p&gt;
&lt;p&gt;DOM1级属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;entities&lt;/span&gt;
natations
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-_DocumentFragment类型&quot;&gt;8.  DocumentFragment类型&lt;/h2&gt;&lt;p&gt;DocumentFragment类型在文档中没有对应的标记。&lt;/p&gt;
&lt;p&gt;是一种轻量级的文档，可以包含和控制节点，但不会像完整的文档那样占用额外资源。&lt;br&gt;文档片段用于不会成为文档树的一部分&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 11&lt;/li&gt;
&lt;li&gt;nodeName = “#document-fragment”&lt;/li&gt;
&lt;li&gt;nodeValue = null&lt;/li&gt;
&lt;li&gt;parentNode = null&lt;/li&gt;
&lt;li&gt;子节点= Element、ProcessingInstruction、Comment、Text、CDATASection、EntityReference&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;9-Attr类型&quot;&gt;9.Attr类型&lt;/h2&gt;&lt;p&gt;元素的特征在DOM中以Attr类型来表示。&lt;/p&gt;
&lt;p&gt;特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;nodeType = 2&lt;/li&gt;
&lt;li&gt;nodeName = 特征名称&lt;/li&gt;
&lt;li&gt;nodeValue = 特征的值&lt;/li&gt;
&lt;li&gt;parentNode = null&lt;/li&gt;
&lt;li&gt;在HTML中不支持（没哟）子节点&lt;/li&gt;
&lt;li&gt;在XML中子节点可以是Text或EntityReference&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;不认为是DOM文档树的一部分&lt;/p&gt;
&lt;p&gt;属性：&lt;br&gt;    name&lt;br&gt;    value&lt;br&gt;    specified 用于区别特性是否在代码中指定的，还是默认的&lt;/p&gt;
&lt;p&gt;方法：&lt;br&gt;    createAtrribute()传入特征名称并创建新的节点。&lt;/p&gt;
&lt;h2 id=&quot;动态样式&quot;&gt;动态样式&lt;/h2&gt;&lt;p&gt;动态样式：在页面刚加载时不存在的样式。在页面加载完成之后添加到页面中&lt;/p&gt;
&lt;p&gt;将&lt;link&gt;元素添加到&lt;head&gt;而不是&lt;/head&gt;&lt;body&gt;元素中，才能保证浏览器中行为一致。&lt;/body&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;loadStyles&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;url&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; link = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;link&quot;&lt;/span&gt;);
    link.rel = &lt;span class=&quot;string&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt;;
    link.type = &lt;span class=&quot;string&quot;&gt;&quot;text/css&quot;&lt;/span&gt;;
    link.href = url;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; head = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;head&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
    head.appendChild(link);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：加载外部样式文件的过程是异步的，也就加载样式与执行javaScript代码的过程没有固定的次序。&lt;/p&gt;
&lt;p&gt;使用&lt;style&gt;来动态的加载样式。&lt;/p&gt;
&lt;h3 id=&quot;操作表格&quot;&gt;操作表格&lt;/h3&gt;&lt;p&gt;&lt;table&gt;元素的属性和方法：&lt;br&gt;caption&lt;br&gt;tBodies&lt;br&gt;tFoot&lt;br&gt;tHead&lt;br&gt;rows&lt;br&gt;createTHead()&lt;br&gt;createTFoot()&lt;br&gt;createCaption()&lt;br&gt;deleteTHead()&lt;br&gt;deleteTFoot()&lt;br&gt;deleteCaption()&lt;br&gt;deleteCaption()&lt;br&gt;insertRow(pos)&lt;/p&gt;
&lt;p&gt;&lt;tbody&gt;元素的属性和方法&lt;br&gt;rows&lt;br&gt;deleteRow(pos)&lt;br&gt;insertRow(pos)&lt;/p&gt;
&lt;p&gt;&lt;tr&gt;元素的属性和方法&lt;br&gt;cells&lt;br&gt;deleteCell(pos)&lt;br&gt;insertCell(pos)&lt;/p&gt;
&lt;h3 id=&quot;使用NodeList&quot;&gt;使用NodeList&lt;/h3&gt;&lt;p&gt;DOM是javascript开销最大的部分，NodeList对象是动态的，所以尽量减少DOM操作。&lt;/p&gt;
&lt;/style&gt;&lt;/p&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;节点层次&quot;&gt;节点层次&lt;/h1&gt;&lt;h2 id=&quot;1-_Node类型&quot;&gt;1. Node类型&lt;/h2&gt;&lt;p&gt;所有节点类型都继承自Node&lt;/p&gt;
&lt;p&gt;节点类型：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素节点&lt;/li&gt;
&lt;li&gt;文本节点&lt;/li&gt;
&lt;li&gt;属性节点&lt;/li&gt;
&lt;l
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS8--客户端能力检测</title>
    <link href="http://yoursite.com/2016/04/30/JS8-%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%83%BD%E5%8A%9B%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2016/04/30/JS8-客户端能力检测/</id>
    <published>2016-04-30T13:13:35.000Z</published>
    <updated>2016-04-30T13:19:05.218Z</updated>
    
    <content type="html">&lt;h1 id=&quot;客户端检测&quot;&gt;客户端检测&lt;/h1&gt;&lt;p&gt;只要能找到通用的方法，优先采取更通用的方法。&lt;/p&gt;
&lt;h1 id=&quot;能力检测&quot;&gt;能力检测&lt;/h1&gt;&lt;p&gt;识别浏览器的能力&lt;/p&gt;
&lt;p&gt;两个重要概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先检测达成目的的最常用的特这，可以保证代码最优化。&lt;/li&gt;
&lt;li&gt;必须测试实际要用到的特性。&lt;/li&gt;
&lt;li&gt;能力检测对于想要知道某个特性是否会按适当方式行事非常有用。&lt;/li&gt;
&lt;li&gt;尽量使用typeof操作符进行能力检测。&lt;/li&gt;
&lt;li&gt;isHostMethod()&lt;/li&gt;
&lt;li&gt;根据浏览器不同将能力组合起来更可取。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;怪癖检测&quot;&gt;怪癖检测&lt;/h1&gt;&lt;p&gt;目标是识别浏览器的特殊行为。&lt;/p&gt;
&lt;p&gt;想要知道浏览器存在什么缺陷。&lt;/p&gt;
&lt;p&gt;个别浏览器独有的，而且存在的bug&lt;/p&gt;
&lt;p&gt;怪癖会进行代码运行，所有，建议在脚本的一开始就执行此类检测。&lt;/p&gt;
&lt;h2 id=&quot;用户代理检测&quot;&gt;用户代理检测&lt;/h2&gt;&lt;p&gt;五大引擎：IE、Gecko、WebKit、KHTML、Opera.&lt;br&gt;JavaScript引擎&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;客户端检测&quot;&gt;客户端检测&lt;/h1&gt;&lt;p&gt;只要能找到通用的方法，优先采取更通用的方法。&lt;/p&gt;
&lt;h1 id=&quot;能力检测&quot;&gt;能力检测&lt;/h1&gt;&lt;p&gt;识别浏览器的能力&lt;/p&gt;
&lt;p&gt;两个重要概念：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先检测达成目的的最常用的特这，可以保证代码最
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS7-BOM</title>
    <link href="http://yoursite.com/2016/04/21/JS7-BOM/"/>
    <id>http://yoursite.com/2016/04/21/JS7-BOM/</id>
    <published>2016-04-21T14:51:12.000Z</published>
    <updated>2016-04-21T14:52:25.305Z</updated>
    
    <content type="html">&lt;h1 id=&quot;window对象&quot;&gt;window对象&lt;/h1&gt;&lt;p&gt;BOM的核心，表示浏览器的一个实例。&lt;/p&gt;
&lt;p&gt;所有在全局中声明的变量、函数都会变成window对象。&lt;/p&gt;
&lt;p&gt;全局变量不能delete操作符删除&lt;br&gt;直接在window对象上的定义的属性是可以用delete删除的。&lt;/p&gt;
&lt;p&gt;尝试访问为声明的变量会抛出错误，但是通过查询window对象，可以知道某个可能未声明的变量是否存在。&lt;/p&gt;
&lt;h2 id=&quot;窗口关系和框架&quot;&gt;窗口关系和框架&lt;/h2&gt;&lt;p&gt;如果页面中包含框架，则每个框架都拥有自己的window对象，并且保持在frames集合中。在frame集合中，可以通过数值索引或者框架名称来访问相应的window对象。&lt;/p&gt;
&lt;p&gt;每个window对象都有一个name属性，其中包含框架的名称。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;top表示顶层框架&lt;/li&gt;
&lt;li&gt;parent对象始终指向当前框架的直接上层。&lt;/li&gt;
&lt;li&gt;self，始终指向window对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;窗口位置&quot;&gt;窗口位置&lt;/h2&gt;&lt;p&gt;不同浏览器的支持不一样&lt;br&gt;screenLeft：窗口相当于屏幕左边的位置&lt;br&gt;screeTop : 窗口相对于屏幕上边的位置&lt;br&gt;screenX&lt;br&gt;screenY&lt;/p&gt;
&lt;p&gt;兼容解决方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; leftPos = (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.screenLeft == &lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;) ? &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.screenLeft : &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.screenX;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; topPos = (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.screenTop == &lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;) ? &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.screenTop : &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.screenY;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;moveTo()&lt;br&gt;moveBy()将出安康精确的移到一个新位置。&lt;br&gt;不适用框架，只能对最外层window对象使用&lt;/p&gt;
&lt;h2 id=&quot;窗口大小&quot;&gt;窗口大小&lt;/h2&gt;&lt;p&gt;不同浏览器的支持不一样，所有，无法确定浏览器串口本身的大小，可以取得页面视口的大小。&lt;/p&gt;
&lt;p&gt;兼容解决方案&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pageWidth = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerWidth,
    pageHeight = &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.innerHeight;

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; pageWidth != &lt;span class=&quot;string&quot;&gt;&quot;number&quot;&lt;/span&gt;){
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.compatMode == &lt;span class=&quot;string&quot;&gt;&quot;CSS1Compat&quot;&lt;/span&gt;){
        pageWidth = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.clientWidth;
        pageHeight = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.clientHeight;
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        pageWidth = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.clientWidth;
        pageHeight = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.clientHeight;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;resizeTo()&lt;br&gt;resizeBy() 可以调整浏览器窗口的大小。&lt;br&gt;不适用框架，只能对最外层window对象使用&lt;/p&gt;
&lt;h2 id=&quot;导航和打开新窗口&quot;&gt;导航和打开新窗口&lt;/h2&gt;&lt;p&gt;open() 可以导航到一个特定URL，也可以打开一个新的浏览器窗口。&lt;/p&gt;
&lt;p&gt;参数：要加载的URL、窗口目标、一个特性字符串以及一个表示新页面是否取代浏览器历史记录中当前加载页面的布尔值。&lt;br&gt;返回：一个指向新窗口的引用&lt;/p&gt;
&lt;p&gt;可以关闭使用open打开的窗口，但是原始窗口不行&lt;/p&gt;
&lt;p&gt;新创建的window对象都有一个opener属性，保存着打开它的原始窗口对象，原始窗口没有这样的指针。&lt;/p&gt;
&lt;p&gt;将opener设置为null告诉浏览器新创建的标签不需要与打开它的标签页通信。&lt;/p&gt;
&lt;h3 id=&quot;安全限制和弹出窗口屏蔽程序&quot;&gt;安全限制和弹出窗口屏蔽程序&lt;/h3&gt;&lt;p&gt;检测返回值是否为null确定新弹出的窗口是否被屏蔽，并将其封装到一个try-catch块中。&lt;/p&gt;
&lt;h2 id=&quot;间歇调用和超时调用&quot;&gt;间歇调用和超时调用&lt;/h2&gt;&lt;p&gt;javaScript单线程语言。&lt;/p&gt;
&lt;p&gt;超时调用—&amp;gt;在指定的时间过后执行代码–&amp;gt;setTimeout()—&amp;gt;clearTimeout()取消&lt;/p&gt;
&lt;p&gt;间歇调用—&amp;gt;每个指定的时间就执行一次代码–&amp;gt;setInterval()—&amp;gt;clearInterval()取消&lt;/p&gt;
&lt;p&gt;javascript任务队列，会把任务添加到队列中顺序执行.&lt;/p&gt;
&lt;p&gt;一般使用超时调用来模拟间歇调用是一种最佳的模式&lt;/p&gt;
&lt;p&gt;最好不要使用间歇调用：一个间歇调用可能会在前一个间歇调用结束之前启动。&lt;/p&gt;
&lt;h2 id=&quot;系统对话框&quot;&gt;系统对话框&lt;/h2&gt;&lt;p&gt;下面这三个是同步和模态的，显示这些对话框的时候代码会停止执行，而关掉这些对话框后代码又恢复执行。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;alert()&lt;/li&gt;
&lt;li&gt;confirm()&lt;/li&gt;
&lt;li&gt;prompt()&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;下面的是异步显示的，能够将控制权立即交换给脚本。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;window.print()&lt;/li&gt;
&lt;li&gt;window.find()&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;location对象&quot;&gt;location对象&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;提供了与当前窗口中加载的文档有关的信息，还提供了一些导航的功能。&lt;/li&gt;
&lt;li&gt;可以将URL解析为独立的片段&lt;/li&gt;
&lt;li&gt;&lt;p&gt;location对象及时window对象也是document对象。他们引用的是同一个对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性名        例子            说明
&lt;span class=&quot;title&quot;&gt;hash&lt;/span&gt;    
&lt;span class=&quot;title&quot;&gt;host&lt;/span&gt;    
&lt;span class=&quot;title&quot;&gt;hostname&lt;/span&gt;    
&lt;span class=&quot;title&quot;&gt;href&lt;/span&gt;
&lt;span class=&quot;foreign&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;port&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;protocol&lt;/span&gt;
&lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查询字符串参数 —page207&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;location.assign(“&lt;a href=&quot;http://www.baidu.com&amp;quot;);立即打开新URL并在浏览器的历史记录中生成一条记录。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.baidu.com&amp;quot;);立即打开新URL并在浏览器的历史记录中生成一条记录。&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;每次修改location的属性(hash除外),页面都会以新的URL重新加载。&lt;/li&gt;
&lt;li&gt;repalce()方法，会导航到URL，但是不会在历史记录中生成新记录。&lt;/li&gt;
&lt;li&gt;reload()时不传递然和参数，页面就好以最有效的方式重新加载。 reload(true)会强制从服务器重新加载。之后的代码可能会不执行，取决于网络延迟或系统资源等因素，最好将其放在最好一行。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;navigator对象&quot;&gt;navigator对象&lt;/h1&gt;&lt;p&gt;识别客户端浏览器的事实标准。&lt;br&gt;可以检测网页浏览器的类型。&lt;/p&gt;
&lt;h2 id=&quot;检测插件&quot;&gt;检测插件&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;非IE可以用plugins数组，其中包含属性：&lt;/p&gt;
&lt;p&gt; 属性名        描述&lt;br&gt; name        插件的名字&lt;br&gt; description 插件的文件名&lt;br&gt; filename    插件的文件名&lt;br&gt; length        插件所处理的MIME类型数量&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;检测插件程序—-page211&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;每个插件本身也是一个MimeType对象的数组。可以通过方括号访问。&lt;/li&gt;
&lt;li&gt;IE插件 专有的ActiveXObject类型，并且要知道其COM标示符。—-page212&lt;/li&gt;
&lt;li&gt;兼容插件检测方法—-page212&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;注册处理程序&quot;&gt;注册处理程序&lt;/h2&gt;&lt;p&gt;registerContentHandler()&lt;br&gt;registerProtocalHandler() 可以让一个站点指明它可以处理特定类型的信息。&lt;/p&gt;
&lt;p&gt;参数：&lt;br&gt;    要处理的MIME类型、可以处理该MIME类型的页面的URL、以及应用程序的名称。&lt;/p&gt;
&lt;p&gt;#screen对象 #&lt;/p&gt;
&lt;p&gt;在编程中用处不大的，表明客户端的能力。&lt;/p&gt;
&lt;h1 id=&quot;history对象&quot;&gt;history对象&lt;/h1&gt;&lt;p&gt;保存着用户上网的历史记录，从窗口被打开的那一刻算起。&lt;/p&gt;
&lt;p&gt;每个浏览器窗口、每个标签乃至每个框架，都有自己的history对象与特定的window对象关联。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;go&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;back&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
 属性
length
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;window对象&quot;&gt;window对象&lt;/h1&gt;&lt;p&gt;BOM的核心，表示浏览器的一个实例。&lt;/p&gt;
&lt;p&gt;所有在全局中声明的变量、函数都会变成window对象。&lt;/p&gt;
&lt;p&gt;全局变量不能delete操作符删除&lt;br&gt;直接在window对象上的定义的属性是可以用de
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS-6函数表达式</title>
    <link href="http://yoursite.com/2016/04/21/JS6-%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://yoursite.com/2016/04/21/JS6-函数表达式/</id>
    <published>2016-04-21T14:50:55.000Z</published>
    <updated>2016-04-21T14:51:56.409Z</updated>
    
    <content type="html">&lt;h3 id=&quot;创建函数&quot;&gt;创建函数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;p&gt;  function functionName(arg0,arg1,arg2)&lt;br&gt;  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//函数体&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  }&lt;br&gt;函数有一个name属性，可以访问函数名&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;函数声明提升&lt;/strong&gt;：在执行代码之前会先读取函数声明。可以吧函数声明放在调用它的语句后面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数表达式&lt;/p&gt;
&lt;p&gt;  var functionName = function(arg0,arg1,arg2)&lt;br&gt;  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//函数体&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;  };&lt;br&gt;匿名函数 拉姆达函数 其name属性为空&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;匿名函数的执行环境具有全局性&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-_递归&quot;&gt;1. 递归&lt;/h2&gt;&lt;h4 id=&quot;1-使用arguments-callee()来指向正在执行的函数指针&quot;&gt;1.使用arguments.callee()来指向正在执行的函数指针&lt;/h4&gt;&lt;p&gt;严格模式下不能用&lt;/p&gt;
&lt;h4 id=&quot;2-使用命名函数表达式来达成相同的结果&quot;&gt;2.使用命名函数表达式来达成相同的结果&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;var factorial = (&lt;span class=&quot;function&quot;&gt;function &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;num * &lt;span class=&quot;title&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
    }
});
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;2-闭包&quot;&gt;2.闭包&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;闭包是有权访问另一个函数作用域中的变量的函数。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;创建闭包&quot;&gt;创建闭包&lt;/h2&gt;&lt;p&gt;方法：在一个函数内部创建另一个函数。&lt;/p&gt;
&lt;h1 id=&quot;3-_模仿块级作用域&quot;&gt;3. 模仿块级作用域&lt;/h1&gt;&lt;p&gt;javascript中没有块级作用域&lt;/p&gt;
&lt;p&gt;可以用匿名函数来模仿块级作用域&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;collection&quot;&gt;{
    // 这里是块级作用域
}&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;list&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;4-_私有变量&quot;&gt;4. 私有变量&lt;/h1&gt;&lt;p&gt;包括：函数参数、局部变量和函数内部定义的其它函数。&lt;/p&gt;
&lt;h3 id=&quot;静态私有变量&quot;&gt;静态私有变量&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;;
     Person = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;{
         name = value;
     };
     Person.prototype.getName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; name;
     };
     Person.prototype.setName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;value&lt;/span&gt;)&lt;/span&gt;{
         name = value;
     };
 })();

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.getName()); &lt;span class=&quot;comment&quot;&gt;//&quot;Nichoalse&quot;&lt;/span&gt;
 person1.setName(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;); 
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.getName());&lt;span class=&quot;comment&quot;&gt;//Greg&lt;/span&gt;

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Micheal&quot;&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.getName()); &lt;span class=&quot;comment&quot;&gt;//Micheal&lt;/span&gt;
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person2.getName());&lt;span class=&quot;comment&quot;&gt;//Micheal&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;变量name是一个静态的、由所有实例共享的属性。&lt;/p&gt;
&lt;h3 id=&quot;模块模式&quot;&gt;模块模式&lt;/h3&gt;&lt;h3 id=&quot;增强的模块模式&quot;&gt;增强的模块模式&lt;/h3&gt;</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建函数&quot;&gt;创建函数&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;p&gt;  function functionName(arg0,arg1,arg2)&lt;br&gt;  {&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;//函数体&lt;/sp
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS-5面向对象的程序设计</title>
    <link href="http://yoursite.com/2016/04/21/JS5-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/"/>
    <id>http://yoursite.com/2016/04/21/JS5-面向对象的程序设计/</id>
    <published>2016-04-21T14:50:02.000Z</published>
    <updated>2016-04-21T14:51:37.481Z</updated>
    
    <content type="html">&lt;h1 id=&quot;理解对象&quot;&gt;理解对象&lt;/h1&gt;&lt;p&gt;ECMA-262中把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数”。&lt;br&gt;对象相当于一组没有特定顺序的值。&lt;/p&gt;
&lt;p&gt;对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。&lt;/p&gt;
&lt;p&gt;想象成散列表：无非是一组名值对，其中值可以是数据或函数。&lt;/p&gt;
&lt;h3 id=&quot;属性类型&quot;&gt;属性类型&lt;/h3&gt;&lt;h4 id=&quot;数据属性&quot;&gt;数据属性&lt;/h4&gt;&lt;p&gt;数据属性包含一个数据值的位置。在这个位置可以读取和写入值。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[[Configurable]]:表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。&lt;/li&gt;
&lt;li&gt;[[Enumerable]]:表示能否通过for-in循环返回属性。&lt;/li&gt;
&lt;li&gt;[[Writable]]:表示能否修改属性的值。&lt;/li&gt;
&lt;li&gt;[[Value]]:包含这个属性的数据值。默认undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用ECMAScript 5中的Object.defineProperty()方法修改属性的默认特征。&lt;br&gt;参数：     属性所在对象、属性的名称、一个描述符对象(configurable、enumerable、writable、value)。&lt;br&gt;一旦把属性定义为不可配置的，就不能再把它变回可配置了。&lt;/p&gt;
&lt;h4 id=&quot;访问器属性&quot;&gt;访问器属性&lt;/h4&gt;&lt;p&gt;访问器不包含数据值，是一对getter（负责返回有效值）和setter（负责决定如何处理数据）函数。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;[[Comfigurable]]:表示能否通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。&lt;/li&gt;
&lt;li&gt;[[Enumerable]]:表示能否通过for-in循环返回属性&lt;/li&gt;
&lt;li&gt;[[Get]]:在读取属性时调用的函数，默认undefined&lt;/li&gt;
&lt;li&gt;[[Set]]:在写入属性时调用的函数，默认undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;必须通过Object.defineProperty()来定义。&lt;br&gt;设置一个属性的值会导致其他的属性发生变化。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*访问器属性*/&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; book = {
    _year:&lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;,
    edition : &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
}
&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(book,&lt;span class=&quot;string&quot;&gt;&quot;year&quot;&lt;/span&gt;,{
    get:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year;
    },
    set:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(newValue &amp;gt; &lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;){
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year = newValue;
            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.edition += newValue - &lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;;
        }
    }
});
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; descriptor = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(book,&lt;span class=&quot;string&quot;&gt;&quot;_year&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.value);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.enumerable);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; descriptor.get); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; descriptor = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(book,&lt;span class=&quot;string&quot;&gt;&quot;year&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.value);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.enumerable);&lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; descriptor.get); &lt;span class=&quot;comment&quot;&gt;//function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;定义多个属性&quot;&gt;定义多个属性&lt;/h3&gt;&lt;p&gt;Object.defineProperties()&lt;/p&gt;
&lt;p&gt;可以通过描述符一次定义多个属性。&lt;/p&gt;
&lt;p&gt;参数：要添加或修改其属性的对象，与第一个对象中要添加或修改的属性一一对应&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; book = {};
&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperties(book,{
    _year:{
        writable:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
        value:&lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;
    },
    edition{
        writable:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
        value:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
    },
    year:{
        get:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year;
        },
        set:&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;newValue&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(newValue&amp;gt;&lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;){
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;._year = newValue;
                &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.edition += newValue - &lt;span class=&quot;number&quot;&gt;2004&lt;/span&gt;;
            }
        }
    }
});

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; descriptor = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(book,&lt;span class=&quot;string&quot;&gt;&quot;_year&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.value);    &lt;span class=&quot;comment&quot;&gt;//2004&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.configurable); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; descriptor.get); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; descriptor = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.getOwnPropertyDescriptor(book,&lt;span class=&quot;string&quot;&gt;&quot;year&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.value);&lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(descriptor.enumerable);&lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; descriptor.get); &lt;span class=&quot;comment&quot;&gt;//function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;读取属性的特征&quot;&gt;读取属性的特征&lt;/h3&gt;&lt;p&gt;Object.getOwnPropertyDesciptor()&lt;br&gt;参数： 属性所在的对象，要读取属性描述符的属性名称&lt;/p&gt;
&lt;h2 id=&quot;创建对象&quot;&gt;创建对象&lt;/h2&gt;&lt;p&gt;##1. Object构造函数 ##&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();
person.name = &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;
person.age = &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;;
person.job = &lt;span class=&quot;string&quot;&gt;&quot;software Enginner&quot;&lt;/span&gt;;

person.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;2-_对象字面值&quot;&gt;2. 对象字面值&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = {
    name :&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
    age:&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,
    job:&lt;span class=&quot;string&quot;&gt;&quot;software Engineer&quot;&lt;/span&gt;,

    sayNmae: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name):
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;3-_工厂模式&quot;&gt;3. 工厂模式&lt;/h2&gt;&lt;p&gt;用函数来封装以特定接口穿件对象的细节&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createPerson&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();
    o.name = name;
    o.age = age;
    o.job = job;
    o.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    };
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;
}

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = createPerson(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;software Engineer&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;优点：解决了创建多个相似对象的问题&lt;br&gt;缺点：没有解决对象识别的问题，即怎样知道一个对象的类型。&lt;/p&gt;
&lt;h2 id=&quot;4-_构造函数模式&quot;&gt;4. 构造函数模式&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job = job;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    };
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Doctor&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1 &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1 &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.sayName == person2.sayName);&lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造函数要以大写字母开头，而非构造函数以一个小写字母开头。&lt;/p&gt;
&lt;p&gt;所有的对象都集成自Object。&lt;/p&gt;
&lt;p&gt;这种方法定义的构造函数是定义在Global对象中的。&lt;/p&gt;
&lt;p&gt;优点：创建自定义的构造函数意味着将来可以将它的实例标示为一种特定的类型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;构造函数当作函数，构造函数和普通函数的区别是，调用它们的方式不同。&lt;/li&gt;
&lt;li&gt;任何函数 只要通过new操作符来调用，就可以作为构造函数。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;缺点：1.每个方法都要在每个实例上重新创建一遍。&lt;br&gt;2.不同是实例上的同名函数是不相等的。&lt;br&gt;3.创建两个完成同样任务的Function实例的确没有必要&lt;br&gt;4.通过把函数的定义转移到构造函数外部来解决这个问题：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job = job;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sayName = sayName;
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sayName&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    alert(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);

}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Doctor&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1 &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1 &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.sayName == person2.sayName);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.把sayName()对象定义到全局作用域中，虽然可以解决上述问题，但是问题：&lt;br&gt;    1）在全局作用域中定义的同一个对象实例上只能被某个对象调用，这样全局作用域有点名不副实;&lt;br&gt;    2）如果对象需要定义很多方法，那么就要定义很多全局函数，自定义的引用类型没有封装的意义了。&lt;/p&gt;
&lt;h2 id=&quot;5-_原型模式&quot;&gt;5. 原型模式&lt;/h2&gt;&lt;h1 id=&quot;只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数原型对象。&quot;&gt;只要创建了一个新函数，就会根据一组特定的规则为该函数创建一个prototype属性，这个属性指向函数原型对象。&lt;/h1&gt;&lt;h1 id=&quot;在默认情况下，所有的对象原型会自动创建一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针。&quot;&gt;在默认情况下，所有的对象原型会自动创建一个constructor(构造函数)属性，这个属性是一个指向prototype属性所在函数的指针。&lt;/h1&gt;&lt;h1 id=&quot;每个函数在调用时，都会取得两个特殊变量_:this_和arguments&quot;&gt;每个函数在调用时，都会取得两个特殊变量 :this 和arguments&lt;/h1&gt;&lt;p&gt;每个函数都有一个prototype(原型属性)，是一个指针，指向一个对象。&lt;/p&gt;
&lt;p&gt;用途：包含可以由特定类型的所有实例共享的属性和方法。&lt;/p&gt;
&lt;p&gt;prototype是通过调用构造函数而创建的那个对象实例的原型对象。&lt;/p&gt;
&lt;p&gt;优点：可以让所有对象实例化它包含的属性和方法。&lt;/p&gt;
&lt;p&gt;不必在构造函数中定义对象的实例信息，而是直接添加到原型对象中。&lt;/p&gt;
&lt;h4 id=&quot;constructor构造函数&quot;&gt;constructor构造函数&lt;/h4&gt;&lt;h4 id=&quot;isPrototypeOf()_确定对象之间是否存在原型的关系&quot;&gt;isPrototypeOf() 确定对象之间是否存在原型的关系&lt;/h4&gt;&lt;h4 id=&quot;Object-getPrototypeOf()_返回实际对象的原型&quot;&gt;Object.getPrototypeOf() 返回实际对象的原型&lt;/h4&gt;&lt;h4 id=&quot;hasOwnProperty()_检测一个属性是否属于实例中，还是存在与原型中。只在给定属性存在于对象实例中时，返回true&quot;&gt;hasOwnProperty() 检测一个属性是否属于实例中，还是存在与原型中。只在给定属性存在于对象实例中时，返回true&lt;/h4&gt;&lt;h4 id=&quot;getOwnPropertyDescriptor()_只能用于实例属性，要取得原型对象的描述符，必须直接在原型对象上调用getOwnPropertyDescriptor()方法&quot;&gt;getOwnPropertyDescriptor() 只能用于实例属性，要取得原型对象的描述符，必须直接在原型对象上调用getOwnPropertyDescriptor()方法&lt;/h4&gt;&lt;h3 id=&quot;原型与in操作符&quot;&gt;原型与in操作符&lt;/h3&gt;&lt;h4 id=&quot;in_操作符&quot;&gt;in 操作符&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;单独使用：&lt;br&gt; 会在通过对象能够访问属性时返回true，无论属性存于实例中还是原型中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;function hasPrototypeProperty(&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;,&lt;span class=&quot;title&quot;&gt;name&lt;/span&gt;){&lt;/span&gt;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; !&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;hasOwnProperty&lt;/span&gt;(&lt;/span&gt;name) &amp;amp;&amp;amp; (name in &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;);&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for-in循环中使用&lt;br&gt;返回的是所有能够通过对象访问的、可枚举的(enumerated)属性，其中既包括存在于实例中的属性，也包括存在与原型中属性。屏蔽了原型中的不可枚举属性的实例属性也会在for-in循环中返回。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;Object-keys()&quot;&gt;Object.keys()&lt;/h4&gt;&lt;p&gt;该方法接受一个对象作为参数，返回一个包含所有可枚举属性的字符串数组。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var &lt;span class=&quot;keyword&quot;&gt;keys&lt;/span&gt; = Object.&lt;span class=&quot;keyword&quot;&gt;keys&lt;/span&gt;(Person.&lt;span class=&quot;keyword&quot;&gt;prototype&lt;/span&gt;);
console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;keys&lt;/span&gt;); &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;age&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;job&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;sayName&quot;&lt;/span&gt;]
console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(Object.&lt;span class=&quot;keyword&quot;&gt;keys&lt;/span&gt;(person1)); &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;返回的是实例属性如果没有定义，是空[]
person1.name = &lt;span class=&quot;string&quot;&gt;&quot;hello&quot;&lt;/span&gt;;
person1.address = &lt;span class=&quot;string&quot;&gt;&quot;xian&quot;&lt;/span&gt;;
console.&lt;span class=&quot;keyword&quot;&gt;log&lt;/span&gt;(Object.&lt;span class=&quot;keyword&quot;&gt;keys&lt;/span&gt;(person1)); &lt;span class=&quot;regexp&quot;&gt;//&lt;/span&gt;[&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;address&quot;&lt;/span&gt;]
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;Object-getOwnPropertyNames()&quot;&gt;Object.getOwnPropertyNames()&lt;/h4&gt;&lt;p&gt;得到所有的实例属性，无论它是否是可枚举的。&lt;/p&gt;
&lt;h3 id=&quot;更简单的原型语法&quot;&gt;更简单的原型语法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

 }
 person.prototype = {
     name : &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
     age : &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,
     job : &lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;,
     sayName : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
         &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
     }
 };
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;问题：这个时候，constructor属性不在指向Person了，&lt;br&gt;此时constructor无法确定对象的类型了&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

}

Person.prototype = {
    name : &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
    age : &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,
    job : &lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;,
    sayName : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; friend = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend.constructor == Person); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend.constructor == &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;可以将constructor指向Person，从而确保属性能访问到适当的值。&lt;br&gt;这种方式会导致constructor的属性会导致它的[[Enumerable]]被设置为true。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

}
Person.prototype = {
    &lt;span class=&quot;constructor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt; : Person,
    name : &quot;Nicholas&quot;,
    age : 29,
    job : &quot;Software Engineer&quot;,
    sayName : function()&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; friend = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend.constructor == Person); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend.constructor == &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ECMAScript 5,Object.defineProperty()用来重设构造函数&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{

}

Person.prototype = {
    name : &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
    age : &lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,
    job : &lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;,
    sayName : &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
};
&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(Person.prototype,&lt;span class=&quot;string&quot;&gt;&quot;constructor&quot;&lt;/span&gt;,{
    enumerable : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,
    value:Person
});
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; friend = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person();

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Person); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend.constructor == Person); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(friend.constructor == &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;原型链式动态&quot;&gt;原型链式动态&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;实例和原型之间是松散连接关系&lt;/li&gt;
&lt;li&gt;可以随时为原型添加属性和方法，并且修改能立即反应在所有对象实例中&lt;/li&gt;
&lt;li&gt;但是如果重写整个原型的话，把原型修改为另外一个对象就等于切断了构造函数与最初原型之间的联系。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;元素对象的原型&quot;&gt;元素对象的原型&lt;/h4&gt;&lt;p&gt;原生对象是在其构造函数的原型上定义了方法。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.prototype.startWith = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;text&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.indexOf(text) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; msg = &lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(msg.startWith(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;));&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;原型对象的问题&quot;&gt;原型对象的问题&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;省略了为构造函数传递初始化参数这一环节，结果所有的实例在默认情况下都会取得相同的属性值。&lt;/li&gt;
&lt;li&gt;最大问题：共享本质导致的。&lt;/li&gt;
&lt;li&gt;共享对于函数适合，但是对于基本的属性值就不适合了。&lt;/li&gt;
&lt;li&gt;实例一般都是要用于属于自己的全部属性的。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;6-_组合使用构造函数模式和原型模式&quot;&gt;6. 组合使用构造函数模式和原型模式&lt;/h2&gt;&lt;p&gt;构造函数模式用于定义实例属性&lt;/p&gt;
&lt;p&gt;原型模式用于定义方法和共享的属性。&lt;/p&gt;
&lt;p&gt;使用这种模式还可以像构造函数中传入参数。&lt;/p&gt;
&lt;p&gt;可以定义引用类型的模式。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name,
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age,
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job = job,
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.friends = [&lt;span class=&quot;string&quot;&gt;&quot;shelby&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;court&quot;&lt;/span&gt;]
}
Person.prototype = {
    &lt;span class=&quot;constructor&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt; :Person,
    sayName: function()&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Person2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Doctor&quot;&lt;/span&gt;);
person1.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;Van&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.friends); &lt;span class=&quot;comment&quot;&gt;//[&quot;shelby&quot;, &quot;court&quot;, &quot;Van&quot;]&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person2.friends); &lt;span class=&quot;comment&quot;&gt;//[&quot;shelby&quot;, &quot;court&quot;]&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person1.friends == person2.friends); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-_动态原型模式&quot;&gt;7. 动态原型模式&lt;/h2&gt;&lt;p&gt;可以通过检查某个应该存在的方法是否有效，来决定是否需要初始化原型。&lt;br&gt;使用动态原型，不能使用对象字面值重写原型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.job = job;
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.friends = [&lt;span class=&quot;string&quot;&gt;&quot;shelby&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;court&quot;&lt;/span&gt;];
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.sayName != &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt;){
        Person.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
        };
    }
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; friend = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;);
friend.sayName();
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;8-寄生构造函数模式&quot;&gt;8.寄生构造函数模式&lt;/h2&gt;&lt;p&gt;创建一个函数，该函数的作用仅仅是封装创建对象的代码，然后在返回新创建的对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age,job&lt;/span&gt;)
&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;();
    o.name = name;
    o.age = age;
    o.job = job;
    o.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
    }
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; friend = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Person(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Software Engineer&quot;&lt;/span&gt;);
friend.sayName();
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;除了new操作符 和 把使用的包装函数叫构造函数之后 和 工厂模式没有区别&lt;/li&gt;
&lt;li&gt;适用情况：创建一个具有额外方法的特殊的对象。&lt;/li&gt;
&lt;li&gt;不能依赖instanceof操作符来确定对象类型&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;9-稳妥构造函数模式&quot;&gt;9.稳妥构造函数模式&lt;/h2&gt;&lt;p&gt;稳妥对象：没有公共属性，而且其方法也不引用this的对象&lt;br&gt;适合情况：在一些安全的环境中，或者在防止防护局被其它应用程序改动时使用。&lt;/p&gt;
&lt;p&gt;与寄生模式不同处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;新创建的实例方法不引用this&lt;/li&gt;
&lt;li&gt;不使用new操作符调用构造函数&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能依赖instanceof操作符来确定对象类型&lt;/p&gt;
&lt;p&gt; function Person(name,age,job){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(); 
&lt;span class=&quot;comment&quot;&gt;/*可以在这里定义私有变量和函数*/&lt;/span&gt;
o.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name);
}
&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; o;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }&lt;br&gt; var friend = Person(“Nicholas”,29,”Software Engineer”);&lt;br&gt; friend.sayName();&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;继承&quot;&gt;继承&lt;/h1&gt;&lt;p&gt;##1. 原型链 ##&lt;br&gt;利用原型链让一个引用类型继承另一个引用类型的属性和方法。&lt;/p&gt;
&lt;p&gt;每个构造函数都有一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都会包含一个指向原型对象的内部指针。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    &lt;span class=&quot;comment&quot;&gt;/*原型链 */&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.property = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
}
SuperType.prototype.getSuperValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.property;
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Subproperty = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
}
&lt;span class=&quot;comment&quot;&gt;//继承了SuperType&lt;/span&gt;
SubType.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();

SubType.prototype.getSubValue = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.Subproperty;
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance.getSuperValue()); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; SuperType);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; SubType);&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;

&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.prototype.isPrototypeOf(instance));&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(SubType.prototype.isPrototypeOf(instance));&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(SuperType.prototype.isPrototypeOf(instance));&lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;确定原型和实例的关系&quot;&gt;确定原型和实例的关系&lt;/h3&gt;&lt;h4 id=&quot;instanceof操作符&quot;&gt;instanceof操作符&lt;/h4&gt;&lt;h4 id=&quot;isPrototypeOf()方法&quot;&gt;isPrototypeOf()方法&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;给原型添加方法的代码一定要放在替换原型的语句之后。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用原型链实现继承时，不能使用对象字面值创建原型方法。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;包含引用类型值的原型。引用类型共享了值。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在创建子类型的实例时，不能向超类型的构造函数传递参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-借用构造函数&quot;&gt;2.借用构造函数&lt;/h2&gt;&lt;p&gt;在子类构造函数的内部调用超类构造函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*借用构造函数*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    SuperType.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;...&quot;&lt;/span&gt;);
}
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();
instance1.color.push(&lt;span class=&quot;string&quot;&gt;&quot;Black&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance1.color); &lt;span class=&quot;comment&quot;&gt;//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;, &quot;Black&quot;]&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance2.color);  &lt;span class=&quot;comment&quot;&gt;//[&quot;red&quot;, &quot;blue&quot;, &quot;green&quot;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;优势：在子类构造函数中向超累构造函数传递参数。&lt;/p&gt;
&lt;p&gt;缺点：函数复用无从谈起。&lt;/p&gt;
&lt;h2 id=&quot;3-_组合继承&quot;&gt;3. 组合继承&lt;/h2&gt;&lt;p&gt;伪经典继承，将原型链和借用构造函数的技术组合到一起。&lt;/p&gt;
&lt;p&gt;使用原型链实现对原型属性和方法的集成，而通过借用构造函数来实现对实例属性的集成。&lt;/p&gt;
&lt;p&gt;缺点：会两次调用超类型构造函数。一次在创建子对象原型的时候，另一次是在子类型构造函数内部。&lt;/p&gt;
&lt;p&gt;子类型会包含超类型对象的全部实例属性，但我们不得不在调用子类型构造函数时从写这些属性。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*组合继承*/&lt;/span&gt;
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];
 }
 SuperType.prototype.sayName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
 }

 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;{
     SuperType.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name); &lt;span class=&quot;comment&quot;&gt;//第二次调用SuperType(),覆盖父类的实例属性&lt;/span&gt;

     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
 }

 SubType.prototype = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType();&lt;span class=&quot;comment&quot;&gt;//第一次调用SuperType()&lt;/span&gt;
 SubType.prototype.constructor = SubType;
 SubType.prototype.sayAge = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age);
 }
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ins = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType(&lt;span class=&quot;string&quot;&gt;&quot;huang&quot;&lt;/span&gt;);
 ins.sayName();
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ins);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;);
 instance1.color.push(&lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance1);
 instance1.sayName();
 instance1.sayAge();

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance2);
 instance2.sayName();
 instance2.sayAge();
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;4-原型式继承&quot;&gt;4.原型式继承&lt;/h2&gt;&lt;p&gt; 借助原型可以基于已有的对象创建新对象，同时还不想必因此创建自定义类型。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(o)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{}
    F.prototype = o;
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;你必须有一个对象可以作为另一个对象的基础。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;object&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;o&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;F&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{}
     F.prototype = o;
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; F();
 }
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = {
     name:&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
     friends :[&lt;span class=&quot;string&quot;&gt;&quot;shelby&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Court&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Van&quot;&lt;/span&gt;]
 };

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anotherPerson = object(person);
 anotherPerson.name = &lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;;
 anotherPerson.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;rob&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yetAnotherPerson = object(person);
 yetAnotherPerson.name = &lt;span class=&quot;string&quot;&gt;&quot;Linda&quot;&lt;/span&gt;;
 yetAnotherPerson.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;Barbie&quot;&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(anotherPerson);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(yetAnotherPerson);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ECMAScript 5中，新增Object.create()方法规范了原型式继承&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = {
     name:&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
     friends :[&lt;span class=&quot;string&quot;&gt;&quot;shelby&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Court&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;Van&quot;&lt;/span&gt;]
 };

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; anotherPerson = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(person);
 anotherPerson.name = &lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;;
 anotherPerson.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;rob&quot;&lt;/span&gt;);

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; yetAnotherPerson = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.create(person);
 yetAnotherPerson.name = &lt;span class=&quot;string&quot;&gt;&quot;Linda&quot;&lt;/span&gt;;
 yetAnotherPerson.friends.push(&lt;span class=&quot;string&quot;&gt;&quot;Barbie&quot;&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(anotherPerson);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(yetAnotherPerson);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;缺点：包含引用类型的属性始终都会共享相应的值。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;5-寄生式继承&quot;&gt;5.寄生式继承&lt;/h2&gt;&lt;p&gt;创建一个仅用于封装继承过程的函数，该函数在内部以某种方式来增强对象，最后再像真地是它做了所有工作一样返回对象。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;createAnother&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(original)&lt;/span&gt;&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt;  = object(original);
     &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt;.syahi = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
         console.log(&lt;span class=&quot;string&quot;&gt;&quot;hi&quot;&lt;/span&gt;);
     }
     &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt;;
 }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;为对象添加函数，不能复用而降低效率。&lt;/p&gt;
&lt;h2 id=&quot;6-寄生组合式继承&quot;&gt;6.寄生组合式继承&lt;/h2&gt;&lt;p&gt;由于组合模式的缺点，两次调用超类的构造函数。&lt;/p&gt;
&lt;p&gt;寄生组合模式：借用构造函数来继承属性，通过原型链的混成形式来继承方法。&lt;/p&gt;
&lt;p&gt;基本思想：不必为指定子类型的原型而调用超类型的构造函数，我们所需要的就是超类型的一个副本而已。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*寄生组合式模式*/&lt;/span&gt;
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inheritPrototype&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;subType,superType&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; prototype = &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;(superType.prototype);&lt;span class=&quot;comment&quot;&gt;//创建对象&lt;/span&gt;
     prototype.constructor = subType;&lt;span class=&quot;comment&quot;&gt;//增强对象&lt;/span&gt;
     subType.prototype = prototype; &lt;span class=&quot;comment&quot;&gt;//指定对象&lt;/span&gt;
 }

 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SuperType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;
     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.color = [&lt;span class=&quot;string&quot;&gt;&quot;red&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;blue&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;green&quot;&lt;/span&gt;];
 }

 SuperType.prototype.syaName = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);
 }
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SubType&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name,age&lt;/span&gt;)&lt;/span&gt;{
     SuperType.call(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;,name);
     &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;
 }

 inheritPrototype(SubType,SuperType);

 SubType.prototype.sayAge = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
     &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age);
 }

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ins = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SuperType(&lt;span class=&quot;string&quot;&gt;&quot;huang&quot;&lt;/span&gt;);
 ins.sayName();
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(ins);
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType(&lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;29&lt;/span&gt;);
 instance1.color.push(&lt;span class=&quot;string&quot;&gt;&quot;black&quot;&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance1);
 instance1.sayName();
 instance1.sayAge();

 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; instance2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SubType(&lt;span class=&quot;string&quot;&gt;&quot;Greg&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;27&lt;/span&gt;);
 &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(instance2);
 instance2.sayName();
 instance2.sayAge();
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;理解对象&quot;&gt;理解对象&lt;/h1&gt;&lt;p&gt;ECMA-262中把对象定义为：“无序属性的集合，其属性可以包含基本值、对象或者函数”。&lt;br&gt;对象相当于一组没有特定顺序的值。&lt;/p&gt;
&lt;p&gt;对象的每个属性或方法都有一个名字，而每个名字都映射到一个值。&lt;/p&gt;
&lt;p&gt;想象成散
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS4-引用对象</title>
    <link href="http://yoursite.com/2016/04/19/JS4-%E5%BC%95%E7%94%A8%E5%AF%B9%E8%B1%A1/"/>
    <id>http://yoursite.com/2016/04/19/JS4-引用对象/</id>
    <published>2016-04-19T14:17:24.000Z</published>
    <updated>2016-04-19T14:18:11.549Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引用类型&quot;&gt;引用类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用于将数据和功能组织在一起。&lt;br&gt;描述的是一类对象所支持的属性和方法&lt;br&gt;对象时某种特定引用类型的实例&lt;br&gt;新对象是使用new操作符跟一个构造函数来创建的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.Object类型 &lt;/li&gt;
&lt;li&gt;2.Array类型 &lt;/li&gt;
&lt;li&gt;3.Date类型 &lt;/li&gt;
&lt;li&gt;4.RegExp类型 &lt;/li&gt;
&lt;li&gt;5.Function类型 &lt;/li&gt;
&lt;li&gt;6.基本的包装类型 &lt;ul&gt;
&lt;li&gt;6.1 Boolean&lt;/li&gt;
&lt;li&gt;6.2 Number&lt;/li&gt;
&lt;li&gt;6.3 String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.单体内置对象 &lt;ul&gt;
&lt;li&gt;7.1 Global对象&lt;/li&gt;
&lt;li&gt;7.2 Math 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-Object_类型&quot;&gt;1.Object 类型&lt;/h1&gt;&lt;h2 id=&quot;对象字面量&quot;&gt;对象字面量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person&lt;/span&gt; = {
    name ：  &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
    age : &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;对象访问&quot;&gt;对象访问&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用点表示法&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用方括号，方括号可以使用变量来访问属性，并且，可以访问的属性名中可以含有空格。&lt;/p&gt;
&lt;p&gt; person[“name”]&lt;br&gt; person.name&lt;br&gt; person[“first name”]&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;2-Array类型&quot;&gt;2.Array类型&lt;/h1&gt;&lt;p&gt;Array数组可以保存任何类型的数据。&lt;/p&gt;
&lt;h3 id=&quot;检测数组&quot;&gt;检测数组&lt;/h3&gt;&lt;p&gt;ECMAScript 5 中新增 &lt;strong&gt;Array.isArray()&lt;/strong&gt;方法：确定某个值到底是不是数组。&lt;/p&gt;
&lt;p&gt;数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组定义的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义了一个空数组:&lt;/p&gt;
&lt;p&gt; var  数组名= new Array();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义时指定有n个空元素的数组：&lt;/p&gt;
&lt;p&gt; var 数组名 =new Array(n);&lt;br&gt;3.定义数组的时候，直接初始化数据：&lt;/p&gt;
&lt;p&gt; var  数组名 = [&amp;lt;元素1&amp;gt;, &amp;lt;元素2&amp;gt;, &amp;lt;元素3&amp;gt;…];&lt;br&gt;我们定义myArray数组，并赋值，代码如下：&lt;/p&gt;
&lt;p&gt; var myArray = [2, 8, 6];&lt;br&gt;&lt;strong&gt;说明：&lt;/strong&gt;定义了一个数组 myArray，里边的元素是：myArray[0] = 2; myArray[1] = 8; myArray[2] = 6。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;数组元素使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数组名&lt;span class=&quot;string&quot;&gt;[下标]&lt;/span&gt; = 值;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意: 数组的下标用方括号括起来，从0开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组属性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;length 用法：&lt;strong&gt;&amp;lt;数组对象&amp;gt;.length&lt;/strong&gt;；返回：数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组方法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法                描述
&lt;span class=&quot;comment&quot;&gt;/*检测数组*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        确定某个值到底是不是数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回该对象的源代码
&lt;span class=&quot;comment&quot;&gt;/*转换方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        把数组转换为字符串，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;把数组转换为本地数组，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回数组对象的原始值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            把数组的所有元素放入一个字符串。元素通过制定的分隔符进行分隔
&lt;span class=&quot;comment&quot;&gt;/*栈方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            删除并返回数组的最后一个元素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            向数组的末尾添加一个或更多元素，并返回新的长度
&lt;span class=&quot;comment&quot;&gt;/*队列方法 结合shift()和push()可以向队列一样使用数组*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            删除并返回数组的第一个元素
&lt;span class=&quot;comment&quot;&gt;/*队列方法 同时使用unshift()和pop()可以从相反的方法模拟队列*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        向数组的开头添加一个或更多元素，并返回新的长度
&lt;span class=&quot;comment&quot;&gt;/*重排列方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组的元素进行排序
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        颠倒数组中元素的顺序
&lt;span class=&quot;comment&quot;&gt;/*操作方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        连接两个或更多的数组，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            从某个已有的数组返回特定的元素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        删除元素，并向数组添加新元素
&lt;span class=&quot;comment&quot;&gt;/*下面是ECMPScript 5 中的新方法*/&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*位置方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        从数组的开头开始向后查找
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;      从数组的末尾开始向前查找
&lt;span class=&quot;comment&quot;&gt;/*迭代方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true    
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        对数组中的每一项运行给定函数。这个方法没有返回值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true
&lt;span class=&quot;comment&quot;&gt;/*归并方法  迭代数组中的每一项，然后构建一个最终返回的值。*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        从数组的第一项开始，逐个遍历
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reduceRight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    从数组的最后一项开始，向前逐个遍历
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Array对象的部分实例程序：&lt;br&gt;var person1 = {&lt;br&gt;        toLocaleString : function(){&lt;br&gt;            return “Nikolaos”;&lt;br&gt;        },&lt;br&gt;        toString :function(){&lt;br&gt;            return “Nicholas”;&lt;br&gt;        }&lt;br&gt;    };&lt;br&gt;    var person2 = {&lt;br&gt;        toLocaleString:function(){&lt;br&gt;            return “Grigoraios”;&lt;br&gt;        },&lt;br&gt;        toString :function(){&lt;br&gt;            return “Greg”;&lt;br&gt;        }&lt;br&gt;    };&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = [person1,person2];
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.toString());
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.toLocaleString());
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.join(&lt;span class=&quot;string&quot;&gt;&quot;||&quot;&lt;/span&gt;));
person.push(&lt;span class=&quot;string&quot;&gt;&quot;huang&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.length);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp  = person.pop();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(temp);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.length);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp_first = person.shift();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(temp_first);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.length);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value.reverse());

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (item&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; everyResult = numbers.every(test); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(everyResult);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; someResult = numbers.some(test); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(someResult);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filterResult = numbers.filter(test); &lt;span class=&quot;comment&quot;&gt;//[3,4,5,4,3]&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(filterResult);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapResult = numbers.map(test);&lt;span class=&quot;comment&quot;&gt;//[false,false,true,true,true,true,true,false,false]&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(mapResult);
numbers.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item ++;
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(numbers);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = numbers.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prev,cur,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev  + cur;
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum2 = numbers.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prev,cur,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev  + cur;
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum2);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;3-Date类型&quot;&gt;3.Date类型&lt;/h1&gt;&lt;h3 id=&quot;Date日期对象&quot;&gt;Date日期对象&lt;/h3&gt;&lt;p&gt;日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。&lt;/p&gt;
&lt;p&gt;定义一个时间对象 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Udate=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:使用关键字new，Date()的首字母必须大写。 &lt;/p&gt;
&lt;p&gt;使 Udate 成为日期对象，并且已有初始值：&lt;strong&gt;当前时间(当前电脑系统时间)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果要自定义初始值，可以用以下方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2012&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//2012年10月1日&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Oct 1, 2012&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//2012年10月1日&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们最好使用下面介绍的“方法”来严格定义时间。&lt;br&gt;parse() UTC() 日期和时间都是基于本地时区而非GMT来创建的。&lt;/p&gt;
&lt;p&gt;访问方法语法：&lt;strong&gt;“&amp;lt;日期对象&amp;gt;.&amp;lt;方法&amp;gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Date对象中处理时间和日期的常用方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法名称                    功能描述
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    接受表示日期的字符串参数，然后尝试根据这个字符串返回相应的日期毫秒数。
                        不能表示返回NaN
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    返回表示日期的毫秒数
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    ECMAScript &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;出现,返回调用这个方法时的日期和时间毫秒数。
加号+                    获取Date对象的时间戳

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回与浏览器设置的地区适应的格式的日期和时间
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回带有时区信息的日期和时间
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回日期的毫秒数

&lt;span class=&quot;comment&quot;&gt;/*日期格式化方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            以特定于实现的格式显示星期几、月、日和年
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toTimeString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            以特定于时间的格式显示时、分、秒和时区
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleDateString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    以特定于地区的格式显示星期几、月、日和年
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleTimeString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    以特定于时间的格式显示时、分、秒和时区
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toUTCString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            以特定实现的格式显示时、分、秒

get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置日期
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setFullyear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置年份，用四位数表示
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置年份
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setMouth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置月份。&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;：一月
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setMinutes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置分钟数
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setSeconds&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置秒钟数
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置时间(毫秒为单位)
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回星期，&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示星期天
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;4-RegExp类型&quot;&gt;4.RegExp类型&lt;/h1&gt;&lt;p&gt;来支持正则表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression = &lt;span class=&quot;pi&quot;&gt;/pattern /&lt;/span&gt; flags;
pattern            任何简单或复杂的正则表达式
flags            标明正则表达式的行为
                g：全局模式
                i：不区分大小写模式
                m：多行模式

正则表达式中的所有元字符都必须转义,加&lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;

元字符包括：( [ { &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt; $ | ) ? * + . ] }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用字面值    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern1 = &lt;span class=&quot;regexp&quot;&gt;/at/g&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern2 = &lt;span class=&quot;regexp&quot;&gt;/[bc]at/i&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern3 = &lt;span class=&quot;regexp&quot;&gt;/.at/gi&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用RegExp构造函数，传递的参数是字符串，转义的时候，要用\&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ECMAScript 5规定使用正则表达式字面值必须像直接调用RegExp构造函数一样，每次都创建新的regExp实例。&lt;/p&gt;
&lt;h3 id=&quot;RegExp实例属性&quot;&gt;RegExp实例属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt;            布尔值，是否设置了&lt;span class=&quot;keyword&quot;&gt;g&lt;/span&gt;标志
ignoreCase        布尔值，是否设置了i标志
lastIndex        整数，表示开始搜索下一个匹配的字符位置，默认是0
multiline        布尔值，是否设置了&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;标志
source            正则表达式的字符串表示
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;RegExp实例方法&quot;&gt;RegExp实例方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            捕获组设计
                参数：要应用模式的字符串
                返回值：    第一个匹配信息的数组，没有匹配返回null。返回数组有两个额外属性：index、&lt;span class=&quot;tag&quot;&gt;input&lt;/span&gt;
                index：匹配项在字符串中的位置
                input：应用正则的字符串
                每次只返回一个匹配项
                在多个匹配的情况下，在不设置全局的情况下，多次调用返回的都是第一此匹配的位置
                在设置全局的情况下，多次调用返回的是下一个匹配的位置
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            在模式与该参数匹配的情况下，返回true；反正返回false。
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;         返回正则表达式的字面量
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回正则表达式本身
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;RegExp构造函数属性&quot;&gt;RegExp构造函数属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;长属性名            段属性名            说明
input            &lt;span class=&quot;variable&quot;&gt;$_&lt;/span&gt;                最近一次要匹配的字符串 &lt;span class=&quot;constant&quot;&gt;Opera&lt;/span&gt;未实现此属性
lastMath        &lt;span class=&quot;variable&quot;&gt;$&amp;amp;&lt;/span&gt;                最近一次匹配项
lastParen        &lt;span class=&quot;variable&quot;&gt;$+&lt;/span&gt;                最近一次匹配的捕获组
leftContext        &lt;span class=&quot;variable&quot;&gt;$`&lt;/span&gt;                input字符串中lastMatch之前的文本
multiline        &lt;span class=&quot;variable&quot;&gt;$*&lt;/span&gt;                布尔值，表示是否所有表达式都使用多行模式    
rightContext    &lt;span class=&quot;variable&quot;&gt;$&#39;&lt;/span&gt;                input字符串中lastMatch之后的文本
&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;...&lt;span class=&quot;variable&quot;&gt;$9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;5-Function类型&quot;&gt;5.Function类型&lt;/h1&gt;&lt;p&gt;声明方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;p&gt; function sum（num1，num2）{&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1 +num2;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num1,num2)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1 + num2;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function构造函数（不推荐）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;    sum = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;num2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;return num1 + num2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;函数是对象，函数名是指针&lt;/p&gt;
&lt;p&gt;使用不带圆括号的函数名是访问函数指针，而非调用函数&lt;/p&gt;
&lt;p&gt;没有重载&lt;/p&gt;
&lt;p&gt;函数名本身就是变量，所以可以作为值来使用&lt;/p&gt;
&lt;p&gt;不仅可以像传递参数一样传递把一个函数传递给另一个函数，可以将函数作为另一个函数的返回结果。&lt;/p&gt;
&lt;h3 id=&quot;5-1_作为值的函数&quot;&gt;5.1 作为值的函数&lt;/h3&gt;&lt;h3 id=&quot;5-2_函数内部属性&quot;&gt;5.2 函数内部属性&lt;/h3&gt;&lt;h4 id=&quot;arguments&quot;&gt;arguments&lt;/h4&gt;&lt;p&gt;主要保存函数参数，是一个类数组对象，包含着传入函数中的所有参数。&lt;/p&gt;
&lt;p&gt;有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;function &lt;span class=&quot;title&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num&amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num * arguments.callee(num-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;this&quot;&gt;this&lt;/h4&gt;&lt;p&gt;this引用的是函数据以执行的环境对象。&lt;br&gt;函数的名字仅仅是一个包含指针的变量而已。即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor指向的仍然是同一个函数。&lt;/p&gt;
&lt;h4 id=&quot;caller&quot;&gt;caller&lt;/h4&gt;&lt;p&gt;ECMAScript 5中加入&lt;br&gt;保存着调用当前函数的函数引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{    
    inner();
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.callee.caller);
}    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;严格模式下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arguments.callee会导致错误&lt;/li&gt;
&lt;li&gt;arguments。caller也会导致错误，非严格模式下，始终中undefined&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能为函数caller属性赋值。&lt;/p&gt;
&lt;h3 id=&quot;函数属性和方法&quot;&gt;函数属性和方法&lt;/h3&gt;&lt;p&gt;属性                说明&lt;br&gt;length            表示函数希望接受的命名参数的个数&lt;br&gt;prototype        保存它们所有实例方法的真正所在 ECMASCript 5中prototype属性不可枚举&lt;/p&gt;
&lt;p&gt;非继承方法        说明&lt;br&gt;apply(),call()    在特定的作用域中调用函数，等同于设置函数体内的this对象的值。扩充函数赖以运行的作用域，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;对象和方法不需要有任何耦合关系    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bind            创建一个函数的实例，其this值会被绑定到传递给bind()函数的值。&lt;br&gt;toLocaleString()&lt;br&gt;toString()        返回函数的代码&lt;br&gt;valueOf            返回函数代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-基本的包装类型&quot;&gt;6.基本的包装类型&lt;/h1&gt;&lt;p&gt;每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象。&lt;/p&gt;
&lt;p&gt;引用对象和基本包装类型的主要区别：&lt;strong&gt;对象的声明周期&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用new操作符穿件的引用类型的实例，在执行流离开当前作用域之前都一直保持在内存中。&lt;/li&gt;
&lt;li&gt;而自动创建的基本包装类的对象，则只存于一个代码的执行瞬间，然后立即被销毁。&lt;/li&gt;
&lt;li&gt;不能再运行时为基本类型值添加属性和方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Object构造函数也会像工厂方法一样，根据传入的值的类型返回相应的基本包装类型的实例&lt;/p&gt;
&lt;p&gt;注意：使用new调用基本包装类型的构造函数，与直接调用同名的转型函数是不一样的&lt;/p&gt;
&lt;h2 id=&quot;6-1_Boolean&quot;&gt;6.1 Boolean&lt;/h2&gt;&lt;p&gt;基本类型的布尔值和Boolean对象之间的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;typeof 对基本类型返回 “boolean”&lt;pre&gt;&lt;code&gt;对引用类型 返回 &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Boolean对象时Boolean类型的实例&lt;br&gt; instanceof 测试Boolean对象 返回 true；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议永远不要使用Boolean对象&lt;/p&gt;
&lt;h2 id=&quot;6-2_Number&quot;&gt;6.2 Number&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;         会按照指定的小数位返回数值的字符串表示
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toExponential&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    返回以指数表示法表示的数值的字符串形式
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toPrecision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    返回固定戴奥格式，也可能返回指数格式，具体规则看哪种更合适
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;6-3_String&quot;&gt;6.3 String&lt;/h2&gt;&lt;h3 id=&quot;方法&quot;&gt;方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*字符方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        用于访问字符串中特定位置的方法 得到的是字符本身
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;      用于访问字符串中特定位置的方法 得到的是字符编码
[index]            用于访问字符串中特定位置的方法
&lt;span class=&quot;comment&quot;&gt;/*字符串方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        用于将一或多个字符串拼接起来，返回拼接得到的新字符串。
&lt;span class=&quot;comment&quot;&gt;/*基于字符串创建新字符串的方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;subString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*字符串查找方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        从字符串开头向后搜索子字符串
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    从字符串结尾向前搜索子字符串
&lt;span class=&quot;comment&quot;&gt;/*ECMAScript 5*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            创建一个字符串副本，删除前置机后缀的所有空格，然后返回结果
&lt;span class=&quot;comment&quot;&gt;/*字符串大小转换方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;     针对特定地区实现
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleUpperCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    
&lt;span class=&quot;comment&quot;&gt;/*字符串的模式匹配方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回字符串中国第一次匹配的索引，如果没有返回-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.始终从开头向后查找
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*比较两个字符串*/&lt;/span&gt;    
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    
&lt;span class=&quot;comment&quot;&gt;/*构造函数*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;方法    接受一或多个字符编码，然后将它们转换成一个字符串。
&lt;span class=&quot;comment&quot;&gt;/*还有一些HTML方法，因为它们创建的标记通常无法表达语义，所以尽量不使用*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;7-单体内置对象&quot;&gt;7.单体内置对象&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;有ECMAScript实现提供的、不依赖与宿主环境的对象，这些对象在ECMAScript程序执行之前就已经存在了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开发人员不必显示的实例化内置对象，因为它们已经实例化了。&lt;/p&gt;
&lt;p&gt;例如：Object、Array、String，还有Global、Math。&lt;/p&gt;
&lt;h2 id=&quot;7-1_Global对象&quot;&gt;7.1 Global对象&lt;/h2&gt;&lt;h3 id=&quot;方法-1&quot;&gt;方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*可以对URI进行编码，以便发送给浏览器。用特殊的UTF-8替换所有无效的字符。*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    用于整个URI，不会对本身属于URI的特殊字符进行编码，如冒号，正斜杠、问号和井号
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        用于URI的某一段进行编码。会对它发现的任何非标准字符进行编码
有效的URI不能包含空格
可以对整个URI使用&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;,只能对附加URI后面的字符使用&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeURI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法eval()&quot;&gt;方法eval()&lt;/h3&gt;&lt;p&gt;就像一个完整的ECMAScript解析器&lt;/p&gt;
&lt;h3 id=&quot;属性&quot;&gt;属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;属性                说明
&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;        特殊值&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;                特殊值&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;    
&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;        特殊值&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;EvalError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;EvalError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;RangeError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;RangeError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;ReferenceError&lt;/span&gt;    构造函数&lt;span class=&quot;built_in&quot;&gt;ReferenceError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;SyntaxError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;SyntaxError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;URIError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;URIError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;window对象&quot;&gt;window对象&lt;/h3&gt;&lt;p&gt;ECMAScript虽然没有指出如何直接访问Global对象，但Web浏览器都是将这个全局对象作为window对象的一部分加以实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gloabl = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
}();
立即执行函数表达式，返回&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;的值。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-2_Math_对象&quot;&gt;7.2 Math 对象&lt;/h2&gt;&lt;h2 id=&quot;Math对象&quot;&gt;Math对象&lt;/h2&gt;&lt;p&gt;Math对象，提供对数据的数学计算。&lt;/p&gt;
&lt;p&gt;使用 Math 的属性和方法，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mypi=&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI; 
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myabs=&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(-&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(mypi);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myabs);
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。&lt;/p&gt;
&lt;p&gt;Math对象属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性                说明
E                返回算术常量e，即自然对数的底数（约等于&lt;span class=&quot;number&quot;&gt;2.718&lt;/span&gt;）
LN2                返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的自然对数（约等于&lt;span class=&quot;number&quot;&gt;0.693&lt;/span&gt;）
LN10            返回&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;的自然对数
LOG2E            返回以&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;为底E的对数（约等于&lt;span class=&quot;number&quot;&gt;1.442&lt;/span&gt;）
LOG2E            返回以&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;为底的e的对数（约登月&lt;span class=&quot;number&quot;&gt;0.434&lt;/span&gt;）
PI                返回圆周率（约等于&lt;span class=&quot;number&quot;&gt;3.1415926&lt;/span&gt;）
SQRT1_2            返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的平方根的倒数(约等于&lt;span class=&quot;number&quot;&gt;0.707&lt;/span&gt;)
SQRT2            返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的平方根(约等于&lt;span class=&quot;number&quot;&gt;1.414&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Math对象方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法                描述

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回余弦值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;acos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的反余弦值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的正炫值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;asin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的反正炫值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的正切值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数字的反正切值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y,x)&lt;/span&gt;&lt;/span&gt;        返回由x轴点(x,y)的角度(以弧度为单位)

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            对数进行上舍入
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;        对数进行下舍入
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;        把数四舍五入为最接近的整数

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回e的指数
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;          返回数的自然对数(底为e)

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;        返回x和y中的最高值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;        返回x和y中的最低值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的绝对值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的平方根
pow(x,y）        返回x的y次幂
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;~&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;之间的随机数

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回给对象的源代码
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回Math对象的原始值        
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引用类型&quot;&gt;引用类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用于将数据和功能组织在一起。&lt;br&gt;描述的是一类对象所支持的属性和方法&lt;br&gt;对象时某种特定引用类型的实例&lt;br&gt;新对象是使用new操作符跟一个构造函数来创建的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS3-引用类型</title>
    <link href="http://yoursite.com/2016/04/18/JS3-%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2016/04/18/JS3-笔记/</id>
    <published>2016-04-18T14:41:01.000Z</published>
    <updated>2016-04-19T14:14:58.470Z</updated>
    
    <content type="html">&lt;h1 id=&quot;引用类型&quot;&gt;引用类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用于将数据和功能组织在一起。&lt;br&gt;描述的是一类对象所支持的属性和方法&lt;br&gt;对象时某种特定引用类型的实例&lt;br&gt;新对象是使用new操作符跟一个构造函数来创建的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;1.Object类型 &lt;/li&gt;
&lt;li&gt;2.Array类型 &lt;/li&gt;
&lt;li&gt;3.Date类型 &lt;/li&gt;
&lt;li&gt;4.RegExp类型 &lt;/li&gt;
&lt;li&gt;5.Function类型 &lt;/li&gt;
&lt;li&gt;6.基本的包装类型 &lt;ul&gt;
&lt;li&gt;6.1 Boolean&lt;/li&gt;
&lt;li&gt;6.2 Number&lt;/li&gt;
&lt;li&gt;6.3 String&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;7.单体内置对象 &lt;ul&gt;
&lt;li&gt;7.1 Global对象&lt;/li&gt;
&lt;li&gt;7.2 Math 对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;1-Object_类型&quot;&gt;1.Object 类型&lt;/h1&gt;&lt;h2 id=&quot;对象字面量&quot;&gt;对象字面量&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person&lt;/span&gt; = {
    name ：  &lt;span class=&quot;string&quot;&gt;&quot;Nicholas&quot;&lt;/span&gt;,
    age : &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;对象访问&quot;&gt;对象访问&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用点表示法&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用方括号，方括号可以使用变量来访问属性，并且，可以访问的属性名中可以含有空格。&lt;/p&gt;
&lt;p&gt; person[“name”]&lt;br&gt; person.name&lt;br&gt; person[“first name”]&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;2-Array类型&quot;&gt;2.Array类型&lt;/h1&gt;&lt;p&gt;Array数组可以保存任何类型的数据。&lt;/p&gt;
&lt;h3 id=&quot;检测数组&quot;&gt;检测数组&lt;/h3&gt;&lt;p&gt;ECMAScript 5 中新增 &lt;strong&gt;Array.isArray()&lt;/strong&gt;方法：确定某个值到底是不是数组。&lt;/p&gt;
&lt;p&gt;数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组定义的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义了一个空数组:&lt;/p&gt;
&lt;p&gt; var  数组名= new Array();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义时指定有n个空元素的数组：&lt;/p&gt;
&lt;p&gt; var 数组名 =new Array(n);&lt;br&gt;3.定义数组的时候，直接初始化数据：&lt;/p&gt;
&lt;p&gt; var  数组名 = [&amp;lt;元素1&amp;gt;, &amp;lt;元素2&amp;gt;, &amp;lt;元素3&amp;gt;…];&lt;br&gt;我们定义myArray数组，并赋值，代码如下：&lt;/p&gt;
&lt;p&gt; var myArray = [2, 8, 6];&lt;br&gt;&lt;strong&gt;说明：&lt;/strong&gt;定义了一个数组 myArray，里边的元素是：myArray[0] = 2; myArray[1] = 8; myArray[2] = 6。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;数组元素使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数组名&lt;span class=&quot;string&quot;&gt;[下标]&lt;/span&gt; = 值;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意: 数组的下标用方括号括起来，从0开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组属性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;length 用法：&lt;strong&gt;&amp;lt;数组对象&amp;gt;.length&lt;/strong&gt;；返回：数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组方法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法                描述
&lt;span class=&quot;comment&quot;&gt;/*检测数组*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        确定某个值到底是不是数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回该对象的源代码
&lt;span class=&quot;comment&quot;&gt;/*转换方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        把数组转换为字符串，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;把数组转换为本地数组，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回数组对象的原始值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            把数组的所有元素放入一个字符串。元素通过制定的分隔符进行分隔
&lt;span class=&quot;comment&quot;&gt;/*栈方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            删除并返回数组的最后一个元素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            向数组的末尾添加一个或更多元素，并返回新的长度
&lt;span class=&quot;comment&quot;&gt;/*队列方法 结合shift()和push()可以向队列一样使用数组*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            删除并返回数组的第一个元素
&lt;span class=&quot;comment&quot;&gt;/*队列方法 同时使用unshift()和pop()可以从相反的方法模拟队列*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        向数组的开头添加一个或更多元素，并返回新的长度
&lt;span class=&quot;comment&quot;&gt;/*重排列方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组的元素进行排序
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        颠倒数组中元素的顺序
&lt;span class=&quot;comment&quot;&gt;/*操作方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        连接两个或更多的数组，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            从某个已有的数组返回特定的元素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        删除元素，并向数组添加新元素
&lt;span class=&quot;comment&quot;&gt;/*下面是ECMPScript 5 中的新方法*/&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*位置方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        从数组的开头开始向后查找
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;      从数组的末尾开始向前查找
&lt;span class=&quot;comment&quot;&gt;/*迭代方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组中的每一项运行给定函数，如果该函数对每一项都返回true，则返回true    
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        对数组中的每一项运行给定函数，返回该函数会返回true的项组成的数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        对数组中的每一项运行给定函数。这个方法没有返回值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组中的每一项运行给定函数，返回每次函数调用的结果组成的数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组中的每一项运行给定函数，如果该函数对任一项返回true，则返回true
&lt;span class=&quot;comment&quot;&gt;/*归并方法  迭代数组中的每一项，然后构建一个最终返回的值。*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        从数组的第一项开始，逐个遍历
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reduceRight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    从数组的最后一项开始，向前逐个遍历
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Array对象的部分实例程序：&lt;br&gt;var person1 = {&lt;br&gt;        toLocaleString : function(){&lt;br&gt;            return “Nikolaos”;&lt;br&gt;        },&lt;br&gt;        toString :function(){&lt;br&gt;            return “Nicholas”;&lt;br&gt;        }&lt;br&gt;    };&lt;br&gt;    var person2 = {&lt;br&gt;        toLocaleString:function(){&lt;br&gt;            return “Grigoraios”;&lt;br&gt;        },&lt;br&gt;        toString :function(){&lt;br&gt;            return “Greg”;&lt;br&gt;        }&lt;br&gt;    };&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; person = [person1,person2];
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.toString());
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.toLocaleString());
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.join(&lt;span class=&quot;string&quot;&gt;&quot;||&quot;&lt;/span&gt;));
person.push(&lt;span class=&quot;string&quot;&gt;&quot;huang&quot;&lt;/span&gt;);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.length);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp  = person.pop();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(temp);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.length);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; temp_first = person.shift();
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(temp_first);
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(person.length);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; value = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;];
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(value.reverse());

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; test = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; (item&amp;gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);
};
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; numbers = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;];
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; everyResult = numbers.every(test); &lt;span class=&quot;comment&quot;&gt;//false&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(everyResult);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; someResult = numbers.some(test); &lt;span class=&quot;comment&quot;&gt;//true&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(someResult);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; filterResult = numbers.filter(test); &lt;span class=&quot;comment&quot;&gt;//[3,4,5,4,3]&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(filterResult);
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mapResult = numbers.map(test);&lt;span class=&quot;comment&quot;&gt;//[false,false,true,true,true,true,true,false,false]&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(mapResult);
numbers.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;item,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; item ++;
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(numbers);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = numbers.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prev,cur,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev  + cur;
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum2 = numbers.reduce(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;prev,cur,index,array&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; prev  + cur;
});
&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(sum2);
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;3-Date类型&quot;&gt;3.Date类型&lt;/h1&gt;&lt;h3 id=&quot;Date日期对象&quot;&gt;Date日期对象&lt;/h3&gt;&lt;p&gt;日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。&lt;/p&gt;
&lt;p&gt;定义一个时间对象 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Udate=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:使用关键字new，Date()的首字母必须大写。 &lt;/p&gt;
&lt;p&gt;使 Udate 成为日期对象，并且已有初始值：&lt;strong&gt;当前时间(当前电脑系统时间)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果要自定义初始值，可以用以下方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2012&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//2012年10月1日&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Oct 1, 2012&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//2012年10月1日&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们最好使用下面介绍的“方法”来严格定义时间。&lt;br&gt;parse() UTC() 日期和时间都是基于本地时区而非GMT来创建的。&lt;/p&gt;
&lt;p&gt;访问方法语法：&lt;strong&gt;“&amp;lt;日期对象&amp;gt;.&amp;lt;方法&amp;gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Date对象中处理时间和日期的常用方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法名称                    功能描述
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    接受表示日期的字符串参数，然后尝试根据这个字符串返回相应的日期毫秒数。
                        不能表示返回NaN
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;UTC&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    返回表示日期的毫秒数
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    ECMAScript &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;出现,返回调用这个方法时的日期和时间毫秒数。
加号+                    获取Date对象的时间戳

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回与浏览器设置的地区适应的格式的日期和时间
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回带有时区信息的日期和时间
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回日期的毫秒数

&lt;span class=&quot;comment&quot;&gt;/*日期格式化方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toDateString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            以特定于实现的格式显示星期几、月、日和年
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toTimeString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            以特定于时间的格式显示时、分、秒和时区
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleDateString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    以特定于地区的格式显示星期几、月、日和年
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleTimeString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    以特定于时间的格式显示时、分、秒和时区
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toUTCString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            以特定实现的格式显示时、分、秒

get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置日期
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setFullyear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置年份，用四位数表示
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置年份
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setMouth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置月份。&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;：一月
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setMinutes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置分钟数
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setSeconds&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置秒钟数
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置时间(毫秒为单位)
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回星期，&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示星期天
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;4-RegExp类型&quot;&gt;4.RegExp类型&lt;/h1&gt;&lt;p&gt;来支持正则表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; expression = &lt;span class=&quot;pi&quot;&gt;/pattern /&lt;/span&gt; flags;
pattern            任何简单或复杂的正则表达式
flags            标明正则表达式的行为
                g：全局模式
                i：不区分大小写模式
                m：多行模式

正则表达式中的所有元字符都必须转义,加&lt;span class=&quot;string&quot;&gt;\&lt;/span&gt;

元字符包括：( [ { &lt;span class=&quot;string&quot;&gt;\&lt;/span&gt; $ | ) ? * + . ] }
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;构造方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用字面值    &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern1 = &lt;span class=&quot;regexp&quot;&gt;/at/g&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern2 = &lt;span class=&quot;regexp&quot;&gt;/[bc]at/i&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; pattern3 = &lt;span class=&quot;regexp&quot;&gt;/.at/gi&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用RegExp构造函数，传递的参数是字符串，转义的时候，要用\&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;ECMAScript 5规定使用正则表达式字面值必须像直接调用RegExp构造函数一样，每次都创建新的regExp实例。&lt;/p&gt;
&lt;h3 id=&quot;RegExp实例属性&quot;&gt;RegExp实例属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;global&lt;/span&gt;            布尔值，是否设置了&lt;span class=&quot;keyword&quot;&gt;g&lt;/span&gt;标志
ignoreCase        布尔值，是否设置了i标志
lastIndex        整数，表示开始搜索下一个匹配的字符位置，默认是0
multiline        布尔值，是否设置了&lt;span class=&quot;keyword&quot;&gt;m&lt;/span&gt;标志
source            正则表达式的字符串表示
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;RegExp实例方法&quot;&gt;RegExp实例方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            捕获组设计
                参数：要应用模式的字符串
                返回值：    第一个匹配信息的数组，没有匹配返回null。返回数组有两个额外属性：index、&lt;span class=&quot;tag&quot;&gt;input&lt;/span&gt;
                index：匹配项在字符串中的位置
                input：应用正则的字符串
                每次只返回一个匹配项
                在多个匹配的情况下，在不设置全局的情况下，多次调用返回的都是第一此匹配的位置
                在设置全局的情况下，多次调用返回的是下一个匹配的位置
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            在模式与该参数匹配的情况下，返回true；反正返回false。
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;         返回正则表达式的字面量
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回正则表达式本身
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;RegExp构造函数属性&quot;&gt;RegExp构造函数属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;长属性名            段属性名            说明
input            &lt;span class=&quot;variable&quot;&gt;$_&lt;/span&gt;                最近一次要匹配的字符串 &lt;span class=&quot;constant&quot;&gt;Opera&lt;/span&gt;未实现此属性
lastMath        &lt;span class=&quot;variable&quot;&gt;$&amp;amp;&lt;/span&gt;                最近一次匹配项
lastParen        &lt;span class=&quot;variable&quot;&gt;$+&lt;/span&gt;                最近一次匹配的捕获组
leftContext        &lt;span class=&quot;variable&quot;&gt;$`&lt;/span&gt;                input字符串中lastMatch之前的文本
multiline        &lt;span class=&quot;variable&quot;&gt;$*&lt;/span&gt;                布尔值，表示是否所有表达式都使用多行模式    
rightContext    &lt;span class=&quot;variable&quot;&gt;$&#39;&lt;/span&gt;                input字符串中lastMatch之后的文本
&lt;span class=&quot;variable&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;variable&quot;&gt;$2&lt;/span&gt;...&lt;span class=&quot;variable&quot;&gt;$9&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;5-Function类型&quot;&gt;5.Function类型&lt;/h1&gt;&lt;p&gt;声明方法：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数声明&lt;/p&gt;
&lt;p&gt; function sum（num1，num2）{&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1 +num2;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; }    &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数表达式&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; sum = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num1,num2)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num1 + num2;
};
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Function构造函数（不推荐）&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;    sum = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;num1&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;num2&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;return num1 + num2&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;函数是对象，函数名是指针&lt;/p&gt;
&lt;p&gt;使用不带圆括号的函数名是访问函数指针，而非调用函数&lt;/p&gt;
&lt;p&gt;没有重载&lt;/p&gt;
&lt;p&gt;函数名本身就是变量，所以可以作为值来使用&lt;/p&gt;
&lt;p&gt;不仅可以像传递参数一样传递把一个函数传递给另一个函数，可以将函数作为另一个函数的返回结果。&lt;/p&gt;
&lt;h3 id=&quot;5-1_作为值的函数&quot;&gt;5.1 作为值的函数&lt;/h3&gt;&lt;h3 id=&quot;5-2_函数内部属性&quot;&gt;5.2 函数内部属性&lt;/h3&gt;&lt;h4 id=&quot;arguments&quot;&gt;arguments&lt;/h4&gt;&lt;p&gt;主要保存函数参数，是一个类数组对象，包含着传入函数中的所有参数。&lt;/p&gt;
&lt;p&gt;有一个callee属性，该属性是一个指针，指向拥有这个arguments对象的函数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;function &lt;span class=&quot;title&quot;&gt;factorial&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(num)&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(num&amp;lt;=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; num * arguments.callee(num-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;this&quot;&gt;this&lt;/h4&gt;&lt;p&gt;this引用的是函数据以执行的环境对象。&lt;br&gt;函数的名字仅仅是一个包含指针的变量而已。即使是在不同的环境中执行，全局的sayColor()函数与o.sayColor指向的仍然是同一个函数。&lt;/p&gt;
&lt;h4 id=&quot;caller&quot;&gt;caller&lt;/h4&gt;&lt;p&gt;ECMAScript 5中加入&lt;br&gt;保存着调用当前函数的函数引用&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;outer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{    
    inner();
}
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;inner&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;.callee.caller);
}    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;严格模式下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;arguments.callee会导致错误&lt;/li&gt;
&lt;li&gt;arguments。caller也会导致错误，非严格模式下，始终中undefined&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能为函数caller属性赋值。&lt;/p&gt;
&lt;h3 id=&quot;函数属性和方法&quot;&gt;函数属性和方法&lt;/h3&gt;&lt;p&gt;属性                说明&lt;br&gt;length            表示函数希望接受的命名参数的个数&lt;br&gt;prototype        保存它们所有实例方法的真正所在 ECMASCript 5中prototype属性不可枚举&lt;/p&gt;
&lt;p&gt;非继承方法        说明&lt;br&gt;apply(),call()    在特定的作用域中调用函数，等同于设置函数体内的this对象的值。扩充函数赖以运行的作用域，&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;对象和方法不需要有任何耦合关系    
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;bind            创建一个函数的实例，其this值会被绑定到传递给bind()函数的值。&lt;br&gt;toLocaleString()&lt;br&gt;toString()        返回函数的代码&lt;br&gt;valueOf            返回函数代码&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;6-基本的包装类型&quot;&gt;6.基本的包装类型&lt;/h1&gt;&lt;p&gt;每当读取一个基本类型值的时候，后台就会创建一个对应的基本包装类型的对象。&lt;/p&gt;
&lt;p&gt;引用对象和基本包装类型的主要区别：&lt;strong&gt;对象的声明周期&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用new操作符穿件的引用类型的实例，在执行流离开当前作用域之前都一直保持在内存中。&lt;/li&gt;
&lt;li&gt;而自动创建的基本包装类的对象，则只存于一个代码的执行瞬间，然后立即被销毁。&lt;/li&gt;
&lt;li&gt;不能再运行时为基本类型值添加属性和方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Object构造函数也会像工厂方法一样，根据传入的值的类型返回相应的基本包装类型的实例&lt;/p&gt;
&lt;p&gt;注意：使用new调用基本包装类型的构造函数，与直接调用同名的转型函数是不一样的&lt;/p&gt;
&lt;h2 id=&quot;6-1_Boolean&quot;&gt;6.1 Boolean&lt;/h2&gt;&lt;p&gt;基本类型的布尔值和Boolean对象之间的区别：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;typeof 对基本类型返回 “boolean”&lt;pre&gt;&lt;code&gt;对引用类型 返回 &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;Boolean对象时Boolean类型的实例&lt;br&gt; instanceof 测试Boolean对象 返回 true；&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;建议永远不要使用Boolean对象&lt;/p&gt;
&lt;h2 id=&quot;6-2_Number&quot;&gt;6.2 Number&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toFixed&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;         会按照指定的小数位返回数值的字符串表示
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toExponential&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    返回以指数表示法表示的数值的字符串形式
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toPrecision&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    返回固定戴奥格式，也可能返回指数格式，具体规则看哪种更合适
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;6-3_String&quot;&gt;6.3 String&lt;/h2&gt;&lt;h3 id=&quot;方法&quot;&gt;方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*字符方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        用于访问字符串中特定位置的方法 得到的是字符本身
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;charCodeAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;      用于访问字符串中特定位置的方法 得到的是字符编码
[index]            用于访问字符串中特定位置的方法
&lt;span class=&quot;comment&quot;&gt;/*字符串方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        用于将一或多个字符串拼接起来，返回拼接得到的新字符串。
&lt;span class=&quot;comment&quot;&gt;/*基于字符串创建新字符串的方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;substr&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;subString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*字符串查找方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        从字符串开头向后搜索子字符串
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    从字符串结尾向前搜索子字符串
&lt;span class=&quot;comment&quot;&gt;/*ECMAScript 5*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            创建一个字符串副本，删除前置机后缀的所有空格，然后返回结果
&lt;span class=&quot;comment&quot;&gt;/*字符串大小转换方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleLowerCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;     针对特定地区实现
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toUpperCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleUpperCase&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    
&lt;span class=&quot;comment&quot;&gt;/*字符串的模式匹配方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回字符串中国第一次匹配的索引，如果没有返回-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;.始终从开头向后查找
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*比较两个字符串*/&lt;/span&gt;    
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;localeCompare&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    
&lt;span class=&quot;comment&quot;&gt;/*构造函数*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;fromCharCode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;方法    接受一或多个字符编码，然后将它们转换成一个字符串。
&lt;span class=&quot;comment&quot;&gt;/*还有一些HTML方法，因为它们创建的标记通常无法表达语义，所以尽量不使用*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;7-单体内置对象&quot;&gt;7.单体内置对象&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;有ECMAScript实现提供的、不依赖与宿主环境的对象，这些对象在ECMAScript程序执行之前就已经存在了。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;开发人员不必显示的实例化内置对象，因为它们已经实例化了。&lt;/p&gt;
&lt;p&gt;例如：Object、Array、String，还有Global、Math。&lt;/p&gt;
&lt;h2 id=&quot;7-1_Global对象&quot;&gt;7.1 Global对象&lt;/h2&gt;&lt;h3 id=&quot;方法-1&quot;&gt;方法&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*可以对URI进行编码，以便发送给浏览器。用特殊的UTF-8替换所有无效的字符。*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                    用于整个URI，不会对本身属于URI的特殊字符进行编码，如冒号，正斜杠、问号和井号
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        用于URI的某一段进行编码。会对它发现的任何非标准字符进行编码
有效的URI不能包含空格
可以对整个URI使用&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;,只能对附加URI后面的字符使用&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;encodeURIComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeURI&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;decodeURIComponent&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;方法eval()&quot;&gt;方法eval()&lt;/h3&gt;&lt;p&gt;就像一个完整的ECMAScript解析器&lt;/p&gt;
&lt;h3 id=&quot;属性&quot;&gt;属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;属性                说明
&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;        特殊值&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;                特殊值&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;    
&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;        特殊值&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;Function&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;Boolean&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;    
&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;RegExp&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;            构造函数&lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;EvalError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;EvalError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;RangeError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;RangeError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;ReferenceError&lt;/span&gt;    构造函数&lt;span class=&quot;built_in&quot;&gt;ReferenceError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;SyntaxError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;SyntaxError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;URIError&lt;/span&gt;        构造函数&lt;span class=&quot;built_in&quot;&gt;URIError&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;window对象&quot;&gt;window对象&lt;/h3&gt;&lt;p&gt;ECMAScript虽然没有指出如何直接访问Global对象，但Web浏览器都是将这个全局对象作为window对象的一部分加以实现。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gloabl = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;;
}();
立即执行函数表达式，返回&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;的值。
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;7-2_Math_对象&quot;&gt;7.2 Math 对象&lt;/h2&gt;&lt;h2 id=&quot;Math对象&quot;&gt;Math对象&lt;/h2&gt;&lt;p&gt;Math对象，提供对数据的数学计算。&lt;/p&gt;
&lt;p&gt;使用 Math 的属性和方法，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mypi=&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI; 
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myabs=&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(-&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(mypi);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myabs);
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。&lt;/p&gt;
&lt;p&gt;Math对象属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性                说明
E                返回算术常量e，即自然对数的底数（约等于&lt;span class=&quot;number&quot;&gt;2.718&lt;/span&gt;）
LN2                返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的自然对数（约等于&lt;span class=&quot;number&quot;&gt;0.693&lt;/span&gt;）
LN10            返回&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;的自然对数
LOG2E            返回以&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;为底E的对数（约等于&lt;span class=&quot;number&quot;&gt;1.442&lt;/span&gt;）
LOG2E            返回以&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;为底的e的对数（约登月&lt;span class=&quot;number&quot;&gt;0.434&lt;/span&gt;）
PI                返回圆周率（约等于&lt;span class=&quot;number&quot;&gt;3.1415926&lt;/span&gt;）
SQRT1_2            返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的平方根的倒数(约等于&lt;span class=&quot;number&quot;&gt;0.707&lt;/span&gt;)
SQRT2            返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的平方根(约等于&lt;span class=&quot;number&quot;&gt;1.414&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Math对象方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法                描述

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回余弦值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;acos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的反余弦值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的正炫值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;asin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的反正炫值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的正切值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数字的反正切值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y,x)&lt;/span&gt;&lt;/span&gt;        返回由x轴点(x,y)的角度(以弧度为单位)

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            对数进行上舍入
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;        对数进行下舍入
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;        把数四舍五入为最接近的整数

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回e的指数
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;          返回数的自然对数(底为e)

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;        返回x和y中的最高值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;        返回x和y中的最低值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的绝对值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的平方根
pow(x,y）        返回x的y次幂
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;~&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;之间的随机数

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回给对象的源代码
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回Math对象的原始值        
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引用类型&quot;&gt;引用类型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;用于将数据和功能组织在一起。&lt;br&gt;描述的是一类对象所支持的属性和方法&lt;br&gt;对象时某种特定引用类型的实例&lt;br&gt;新对象是使用new操作符跟一个构造函数来创建的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS2-变量、作用和内存问题</title>
    <link href="http://yoursite.com/2016/04/18/JS2-%E5%8F%98%E9%87%8F%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E5%92%8C%E5%86%85%E5%AD%98%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/04/18/JS2-变量、作用域和内存问题/</id>
    <published>2016-04-18T14:40:18.000Z</published>
    <updated>2016-04-18T14:41:16.437Z</updated>
    
    <content type="html">&lt;h1 id=&quot;基本类型和引用类型的值&quot;&gt;基本类型和引用类型的值&lt;/h1&gt;&lt;h3 id=&quot;引用类型可以为其添加动态的属性和方法。&quot;&gt;引用类型可以为其添加动态的属性和方法。&lt;/h3&gt;&lt;h2 id=&quot;检测类型_instanceof&quot;&gt;检测类型 instanceof&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在检测引用类型的值时，typeOf用处不大&lt;/li&gt;
&lt;li&gt;如果想知道它是什么类型的对象： instanceof&lt;/li&gt;
&lt;li&gt;基本类型不是对象&lt;/li&gt;
&lt;li&gt;所有引用类型的值都是Object的实例&lt;/li&gt;
&lt;li&gt;对正则表达式应用typeof的时候，不同的浏览器返回的不一样，chrome 7 返回function，IE和firefox返回object&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;执行环境和作用域&quot;&gt;执行环境和作用域&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;每个执行环境都有与之相关的—&amp;gt;变量对象（variable object）。环境中定义的所有变量和函数都保存在这个对象中。&lt;/li&gt;
&lt;li&gt;全局执行环境—-&amp;gt;web中window对象&lt;/li&gt;
&lt;li&gt;每个函数都有自己的&lt;strong&gt;执行环境&lt;/strong&gt;—&amp;gt;当执行流进入一个函数时，函数的环境就会被推入一个环境栈中。&lt;/li&gt;
&lt;li&gt;当代码在一个环境中执行时，会创建变量对象的一个作用链(scope chain)&lt;/li&gt;
&lt;li&gt;作用域链的作用：保证对执行环境有权访问的所有变量和函数的有序访问。&lt;/li&gt;
&lt;li&gt;作用域链的前端：当前执行环境的代码所在环境的变量对象。下一个变量对象：来自包含环境，而在下一个来自下一个包含环境…一直延续到全局环境。&lt;/li&gt;
&lt;li&gt;标示符解析是沿着作用域链一级一级搜索标示符的过程。&lt;/li&gt;
&lt;li&gt;内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。&lt;h3 id=&quot;延长作用域链&quot;&gt;延长作用域链&lt;/h3&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;1.try-catch语句的catch块&lt;br&gt;2.with语句&lt;/p&gt;
&lt;h3 id=&quot;没有块级作用域&quot;&gt;没有块级作用域&lt;/h3&gt;&lt;h2 id=&quot;垃圾收集&quot;&gt;垃圾收集&lt;/h2&gt;&lt;p&gt;找出那些不在继续使用的变量，然后释放其占用的内存。&lt;br&gt;垃圾回收器会按照固定的时间间隔周期地执行这一操作。&lt;/p&gt;
&lt;h3 id=&quot;标记无用变量的策略&quot;&gt;标记无用变量的策略&lt;/h3&gt;&lt;h4 id=&quot;标记清楚_（mark-and-sweep）&quot;&gt;标记清楚 （mark-and-sweep）&lt;/h4&gt;&lt;p&gt;当进入环境时，标记为“进入环境”&lt;br&gt;当离开环境时，标记为“离开环境”&lt;/p&gt;
&lt;h4 id=&quot;引用计数（refernce_counting）&quot;&gt;引用计数（refernce counting）&lt;/h4&gt;&lt;p&gt;跟踪记录每个值被引用的次数&lt;br&gt;问题：循环引用&lt;/p&gt;
&lt;h3 id=&quot;性能问题&quot;&gt;性能问题&lt;/h3&gt;&lt;p&gt;触发垃圾收集的变量分配、字面量和数组元素的临界值被调整为动态修改。&lt;/p&gt;
&lt;h3 id=&quot;内存管理&quot;&gt;内存管理&lt;/h3&gt;&lt;p&gt;确保占用最少的内存可以让页面获得更好的性能&lt;br&gt;优化内存的最佳方式：为执行中的代码只保存必要的数据。一旦数据不再有用，最好通过将其值设置为null来释放期引用，&lt;strong&gt;解除引用（dereferencing）&lt;/strong&gt;&lt;br&gt;解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。&lt;/p&gt;
&lt;h1 id=&quot;总结&quot;&gt;总结&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;基本数据类型在内存中占据固定大小的空间，因此被保存在栈内存中&lt;/li&gt;
&lt;li&gt;引用类型的值是对象，保存在堆内存中&lt;/li&gt;
&lt;li&gt;从一个变量想另一个变量复制引用类型的值，会创建这个值的一个副本&lt;/li&gt;
&lt;li&gt;从一个变量想另一个变量复制引用类型的值，复制的其实是指针，因此两个变量最终指向同一个对象。&lt;/li&gt;
&lt;li&gt;包含引用类型的值的变量实际上并不是对象本身，而是一个指向对象的指针。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;基本类型和引用类型的值&quot;&gt;基本类型和引用类型的值&lt;/h1&gt;&lt;h3 id=&quot;引用类型可以为其添加动态的属性和方法。&quot;&gt;引用类型可以为其添加动态的属性和方法。&lt;/h3&gt;&lt;h2 id=&quot;检测类型_instanceof&quot;&gt;检测类型 instanceof&lt;/h2&gt;&lt;ol&gt;

    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS1-基本概念</title>
    <link href="http://yoursite.com/2016/04/18/JS1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>http://yoursite.com/2016/04/18/JS1-基本概念/</id>
    <published>2016-04-18T08:02:12.000Z</published>
    <updated>2016-04-18T08:02:37.050Z</updated>
    
    <content type="html">&lt;h1 id=&quot;语法&quot;&gt;语法&lt;/h1&gt;&lt;h2 id=&quot;ECMAScript中的一切都区分大小写&quot;&gt;ECMAScript中的一切都区分大小写&lt;/h2&gt;&lt;h2 id=&quot;严格模式_“use_strict”&quot;&gt;严格模式 “use strict”&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;为JavaScript定义了一中不同的解析和执行模型&lt;/li&gt;
&lt;li&gt;ECMAScript3中语法的一些不确定的行为得到处理，而且对于某些不安全的操作也会抛出错误。&lt;/li&gt;
&lt;li&gt;相当于编译指示。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;关键字和保留字&quot;&gt;关键字和保留字&lt;/h2&gt;&lt;h3 id=&quot;关键字&quot;&gt;关键字&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt;        finnally    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;            &lt;span class=&quot;literal&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;    
&lt;span class=&quot;keyword&quot;&gt;debugger&lt;/span&gt;*    &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;with&lt;/span&gt;    
&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;delete&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;保留字_ECMA-262_第3版&quot;&gt;保留字 ECMA-262 第3版&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;abstract&lt;/span&gt;    enum        &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;                &lt;span class=&quot;keyword&quot;&gt;short&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt;        export        &lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;byte&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;native&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;synchronized&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;throws&lt;/span&gt;
const        goto        &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;            &lt;span class=&quot;keyword&quot;&gt;transient&lt;/span&gt;
debugger    &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;volatile&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;double&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;保留字_ECMA-262_第5版_非严格模式&quot;&gt;保留字 ECMA-262 第5版 非严格模式&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;        &lt;span class=&quot;title&quot;&gt;enum&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt;&lt;/span&gt;            &lt;span class=&quot;title&quot;&gt;super&lt;/span&gt;
&lt;/span&gt;const        export        &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;保留字_ECMA-262_第5版_严格模式&quot;&gt;保留字 ECMA-262 第5版 严格模式&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;package&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt;     &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt;        &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt;    
let            &lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt;    yield
eval         arguments
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;变量&quot;&gt;变量&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;松散类型：可以用来保存任何类型的数据。&lt;/li&gt;
&lt;li&gt;每个变量仅仅是一个用于保存值的占位符而已。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;未初始化的变量保存一个undefined&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;var标示符定义的变量是局部变量，如果省略var则定义的是全局变量，这种声明全局变量的做法并不推荐，在严格模式下会抛出ReferenceError错误。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;数据类型&quot;&gt;数据类型&lt;/h1&gt;&lt;h3 id=&quot;基本数据类型&quot;&gt;基本数据类型&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;number&lt;/li&gt;
&lt;li&gt;string&lt;/li&gt;
&lt;li&gt;boolean&lt;/li&gt;
&lt;li&gt;null&lt;/li&gt;
&lt;li&gt;&lt;p&gt;undefined&lt;/p&gt;
&lt;h3 id=&quot;对象&quot;&gt;对象&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;object    —- Data&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-&lt;span class=&quot;ruby&quot;&gt;--- &lt;span class=&quot;constant&quot;&gt;Array&lt;/span&gt;
&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;--- &lt;span class=&quot;constant&quot;&gt;String&lt;/span&gt;
&lt;/span&gt;-&lt;span class=&quot;ruby&quot;&gt;--- function&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;typeof_操作符_用来检测基本数据类型&quot;&gt;typeof 操作符 用来检测基本数据类型&lt;/h3&gt;&lt;p&gt;对一个值使用typeof操作符可能返回下列某个字符串：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“undefined” —这个值是为定义的&lt;/li&gt;
&lt;li&gt;“boolean” — 这个值是布尔值&lt;/li&gt;
&lt;li&gt;“string” — 这个值是字符串&lt;/li&gt;
&lt;li&gt;“number” —这个值是数值&lt;/li&gt;
&lt;li&gt;“object” —这是值是对象或者null&lt;/li&gt;
&lt;li&gt;“function” — 这个值是函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;注意：typeof 用来区分函数和其它的对象。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;undefined类型&quot;&gt;undefined类型&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;未经初始化的变量中保存一个undefined&lt;/li&gt;
&lt;li&gt;ECMAScript 第3版引入 为了正式区分空对象指针和未经初始化的变量。&lt;/li&gt;
&lt;li&gt;未定义的变量 会抛出一个错误。&lt;/li&gt;
&lt;li&gt;对未声明的变量调用delete不会导致错误，但是也没实际意思，在严格模式下，会发生错误。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;em&gt;对未声明的变量执行typeof操作符同样会返回undefined&lt;/em&gt;&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;最好显示地初始化所有变量&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;null类型&quot;&gt;null类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;null表示空指针&lt;/li&gt;
&lt;li&gt;&lt;p&gt;undefined的值派生自null的值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;)
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;定义变量准备在将来用于保存对象，那么最好将该变量初始化为null而不是其他值&lt;strong&gt;–&amp;gt;&lt;/strong&gt;直接检查null的值就知道相应的变量是否保存了一个对象的引用。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Boolean类型&quot;&gt;Boolean类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;两个字面值：&lt;strong&gt;true&lt;/strong&gt; 和 &lt;strong&gt;false&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;区分大小&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将&lt;strong&gt;任何数据类型&lt;/strong&gt;转换为布尔类型：&lt;strong&gt;转型函数Boolean()&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; 数据类型            转换为true的值            转换为false的值&lt;br&gt; Boolean            true                    false&lt;br&gt; String            任何非空字符串            “”（空字符串）&lt;br&gt; Number            任何非零数字值            0和NaN&lt;br&gt; Object            任何对象                    null&lt;br&gt; Undefined        n/a(not applicable不适用)undefined&lt;/p&gt;
&lt;h2 id=&quot;Number类型&quot;&gt;Number类型&lt;/h2&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用IEEE754格式来表示整数和浮点数值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;八进制     0开头&lt;/li&gt;
&lt;li&gt;十六进制    0x开头&lt;/li&gt;
&lt;li&gt;正零（+0）和负零（-0）被认为相等&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;浮点数值&quot;&gt;浮点数值&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;浮点数值需要的内存是保存整数值的两倍&lt;/li&gt;
&lt;li&gt;如果小数点后面没有数值或者浮点数本身就是一个整数，那么该值会被转换为整数。&lt;/li&gt;
&lt;li&gt;极大的值或极小的值—–e表示法：e前面的数值乘以整数次幂。&lt;/li&gt;
&lt;li&gt;将小数点后面带有6个零以上的浮点数值转换为e表示法。&lt;/li&gt;
&lt;li&gt;在浮点数精度为17位小数，在进行算术运算时，其精度远不如整数。例如，在计算0.1+0.2的结果不是0.3，而是0.30000000000000004。（这是舍入是通病）&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;永远不要测试某个特定的浮点数值。&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;onsole.&lt;span class=&quot;built_in&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt;+&lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt;)
&lt;span class=&quot;number&quot;&gt;0.30000000000000004&lt;/span&gt;

&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;( &lt;span class=&quot;number&quot;&gt;0.1&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0.2&lt;/span&gt; = &lt;span class=&quot;number&quot;&gt;0.3&lt;/span&gt;){&lt;span class=&quot;comment&quot;&gt;//永远不要这样做测试&lt;/span&gt;
    ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;数值范围&quot;&gt;数值范围&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;最小整数        &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MIN_VALUE        &lt;span class=&quot;number&quot;&gt;5e-324&lt;/span&gt;
最大整数        &lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.MAX_VALUE        &lt;span class=&quot;number&quot;&gt;1.79769311348623157e+308&lt;/span&gt;
如果超过最大值，则自动转换为特殊的&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;值
如果超过最小值，则自动转换为特殊的-&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;值
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.NAGTIVE_INFINITY 得到 负&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt; 
&lt;span class=&quot;built_in&quot;&gt;Number&lt;/span&gt;.POSTIVE_INFINITY 得到 正&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;
这个两个属性分别保存着-&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;和&lt;span class=&quot;literal&quot;&gt;Infinity&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;isFinite()函数，用于检测一个数值是不是有穷的&quot;&gt;isFinite()函数，用于检测一个数值是不是有穷的&lt;/h4&gt;&lt;h3 id=&quot;NaN&quot;&gt;NaN&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;Not a Number 非数值。&lt;/li&gt;
&lt;li&gt;表示一个未来要返回数值的操作数为返回数值的情况（这样就不会抛出错误了）。&lt;/li&gt;
&lt;li&gt;任何涉及NaN的操作都会返回NaN&lt;/li&gt;
&lt;li&gt;NaN与任何值都不相等，包括NaN本身。&lt;/li&gt;
&lt;li&gt;isNaN()函数，判断这是参数是否”不是数值”。任何不能被转换为数值的值，都会返回—true&lt;/li&gt;
&lt;li&gt;isNaN()适用于对象，在基于对象调用isNaN()函数时，先调用对象的valueOf()方法，确定返回值是否可以转换为数值，如果不能，再调用对象的toString()方法，在测试返回值。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;数值转换&quot;&gt;数值转换&lt;/h3&gt;&lt;h4 id=&quot;Number()&quot;&gt;Number()&lt;/h4&gt;&lt;p&gt;转换规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Boolean值：　true–&amp;gt;1,false–&amp;gt;0;&lt;/li&gt;
&lt;li&gt;数字值–&amp;gt;简单传入和返回&lt;/li&gt;
&lt;li&gt;null–&amp;gt;0&lt;/li&gt;
&lt;li&gt;undefined–&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;只包含数字，则转换为十进制数值，前导零被忽略&lt;/li&gt;
&lt;li&gt;包含有效的浮点，则转换为浮点数字，前导零被忽略&lt;/li&gt;
&lt;li&gt;包含有效的十六进制，则转换为相同大小的十进制&lt;/li&gt;
&lt;li&gt;为空-&amp;gt;0&lt;/li&gt;
&lt;li&gt;&lt;p&gt;包含其它的格式-&amp;gt;NaN&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0xf&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//15&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;hell&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;000011&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//11&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(true)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//1&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;Number&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;一元字符的操作与Number()函数相同&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;parseInt()&quot;&gt;parseInt()&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;如果第一个字符不是数字字符或者负号，则返回—&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;如果是空字符串—&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;如果第一个是数字，那么会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ECMAScript 3和5在处理八进制字面值存在歧义&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;070&quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//ECMAScript 3认为是56 ECMAScript 5 认为是70&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;)  &lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;1234blue&quot;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//1234&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;// NaN&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;22.5&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//22&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;OxA&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//NaN&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0xA&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//10&lt;/span&gt;
&lt;span class=&quot;built_in&quot;&gt;parseInt&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0xf&quot;&lt;/span&gt;) &lt;span class=&quot;comment&quot;&gt;//15&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;li&gt;建议：无论在什么情况下，都要指明基数。&lt;/li&gt;
&lt;li&gt;  parseInt(“10”,2)//2&lt;br&gt;  parseInt(“10”,8)&lt;br&gt;  8&lt;br&gt;  parseInt(“10”,10)&lt;br&gt;  10&lt;br&gt;  parseInt(“10”,16)&lt;br&gt;  16&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;parseFloat()&quot;&gt;parseFloat()&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;如果第一个是数字，那么会继续解析第二个字符，直到解析完所有后续字符或者遇到了一个非数字字符。&lt;/li&gt;
&lt;li&gt;字符串中第一个小数点是有效的，而第二个小数点是无效的，后面的字符将被忽略&lt;/li&gt;
&lt;li&gt;始终会忽略前导0，十六进制的数始终转换为0，所以只解析十进制值。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果包含可解析的整数，那么就返回整数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;1234blue&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//1234&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;0xA&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//0&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;22.5&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//22.5&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;22.34.4&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//22.34&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;098.4&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//98.4&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;parseFloat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;3.125e7&quot;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//31250000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;String类型&quot;&gt;String类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;表示零或多个16为Unicode字符组成的字符序列，即字符串。&lt;/li&gt;
&lt;li&gt;双引号和单引号在ECMAScript中没有区别&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;字符串字面量&quot;&gt;字符串字面量&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;字面值        含义
&lt;span class=&quot;string&quot;&gt;\n&lt;/span&gt;            换行
&lt;span class=&quot;string&quot;&gt;\t&lt;/span&gt;            制表
&lt;span class=&quot;string&quot;&gt;\b&lt;/span&gt;            退格
&lt;span class=&quot;string&quot;&gt;\r&lt;/span&gt;            回车
&lt;span class=&quot;string&quot;&gt;\f&lt;/span&gt;            进纸
&lt;span class=&quot;string&quot;&gt;\\&lt;/span&gt;            斜杠
&lt;span class=&quot;string&quot;&gt;\&#39;&lt;/span&gt;            单引号
&lt;span class=&quot;string&quot;&gt;\&quot;&lt;/span&gt;            双引号
&lt;span class=&quot;string&quot;&gt;\xnn&lt;/span&gt;        以十六进制代码nn表示一个字符
&lt;span class=&quot;string&quot;&gt;\unnnn&lt;/span&gt;        以十六进制nnnn表示一个Unicode字符
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 字符串字面值可以出现在字符串中的任意位置，而且被作为一个字符来解析：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;This is the letter sigma: \u03a3.&quot;&lt;/span&gt;
text&lt;span class=&quot;class&quot;&gt;.length&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//28&lt;/span&gt;

&lt;span class=&quot;tag&quot;&gt;var&lt;/span&gt; text = &lt;span class=&quot;string&quot;&gt;&quot;This is the letter sigma: .&quot;&lt;/span&gt;
text&lt;span class=&quot;class&quot;&gt;.length&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;//27&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;length 返回 字符数包括16位字符的数目。&lt;/p&gt;
&lt;p&gt;如果包含双字节字符，length属性可能不会精确的返回字符串中的字符数目。&lt;/p&gt;
&lt;h3 id=&quot;字符串特点&quot;&gt;字符串特点&lt;/h3&gt;&lt;p&gt;字符串是不可变的。&lt;/p&gt;
&lt;h3 id=&quot;转换为字符串&quot;&gt;转换为字符串&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;toString()方法&lt;/li&gt;
&lt;li&gt;null 和 undefined 没有toString()方法 &lt;ul&gt;
&lt;li&gt;null-&amp;gt;null&lt;/li&gt;
&lt;li&gt;undefined-&amp;gt;undefined;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;参数：输出数值的基数。默认是10进制返回&lt;/p&gt;
&lt;p&gt;  var num = 10&lt;br&gt;  num.toString() //“10”&lt;br&gt;  num.toString(2) //“1010”&lt;br&gt;  num.toString(8) //“12”&lt;br&gt;  num.toString(16) //“a”&lt;br&gt;  num.toString(10) //“10”&lt;/p&gt;
&lt;p&gt;  String(10) //“10”&lt;br&gt;  String(true) //“true”&lt;br&gt;  String(null) //“null”&lt;br&gt;  var value;&lt;br&gt;  String(value) //“undefined”&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Object类型&quot;&gt;Object类型&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;对象：数据和功能的集合&lt;/li&gt;
&lt;li&gt;在ECMAScript中，Object类型是所有它的实例基础。即，Object类型所具有的任何属性和方法也同样适用于更具体的对象。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;Object对象的属性和方法&quot;&gt;Object对象的属性和方法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;constructor：保存着用于创建当前对象的函数。&lt;/li&gt;
&lt;li&gt;hasOwnProperty(propertyName)：用于检查给定的属性在当前对象中是否存在。&lt;/li&gt;
&lt;li&gt;isPrototypeOf(object)：用于检查传入的对象是否是当前对象的原型。&lt;/li&gt;
&lt;li&gt;propertyIsEnumerable(propertyName)：用于检差给定的属性是否能够使用for-in语句来枚举。&lt;/li&gt;
&lt;li&gt;toLacaleString():返回对象的字符串表示&lt;/li&gt;
&lt;li&gt;toString()：返回对象的字符表示&lt;/li&gt;
&lt;li&gt;valueOf():返回对象的字符串、数值或布尔值表示。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;操作符&quot;&gt;操作符&lt;/h1&gt;&lt;h2 id=&quot;一元操作符&quot;&gt;一元操作符&lt;/h2&gt;&lt;h3 id=&quot;++，–&quot;&gt;++，–&lt;/h3&gt;&lt;p&gt;前置：变量在求值之前改变。&lt;/p&gt;
&lt;p&gt;后置：包含它们的语句被求值之后才执行。&lt;/p&gt;
&lt;h3 id=&quot;一元加减操作符&quot;&gt;一元加减操作符&lt;/h3&gt;&lt;h4 id=&quot;+&quot;&gt;+&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;对于数值不会产生任何影响&lt;/li&gt;
&lt;li&gt;非数值，会像Number()函数一样执行转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;-&quot;&gt;-&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;用于表示负数&lt;/li&gt;
&lt;li&gt;非数值，会像Number()函数一样执行转换。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;位操作符&quot;&gt;位操作符&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;按内存中表示的数值的位来操作数值。&lt;/li&gt;
&lt;li&gt;ECMAScript中所有的数值都是以IEEE-754 64位格式存储，但是位操作并不直接操作64位值。&lt;/li&gt;
&lt;li&gt;先将64位值—&amp;gt;32为整数—&amp;gt;执行操作—&amp;gt;64位值。&lt;/li&gt;
&lt;li&gt;有符号数：前31位表示数值，第32位表示符号位。(0 正数 ； 1 负数)&lt;/li&gt;
&lt;li&gt;对特殊的NaN和infinity值应用位操作，会被当成0来处理。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;按位非(NOT)_~&quot;&gt;按位非(NOT) ~&lt;/h4&gt;&lt;p&gt;本质: 操作数的负值减-1&lt;/p&gt;
&lt;h4 id=&quot;按位与(AND)_&amp;amp;&quot;&gt;按位与(AND) &amp;amp;&lt;/h4&gt;&lt;h4 id=&quot;按位或(OR)_|&quot;&gt;按位或(OR) |&lt;/h4&gt;&lt;h4 id=&quot;按位异或_^&quot;&gt;按位异或 ^&lt;/h4&gt;&lt;h4 id=&quot;左移_&amp;lt;&amp;lt;_相当于乘2_不会影响符号位&quot;&gt;左移 &amp;lt;&amp;lt; 相当于乘2  不会影响符号位&lt;/h4&gt;&lt;h4 id=&quot;有符号右移_&amp;gt;&amp;gt;_相当于除2_保留符号位&quot;&gt;有符号右移 &amp;gt;&amp;gt; 相当于除2  保留符号位&lt;/h4&gt;&lt;h4 id=&quot;无符号右移_&amp;gt;&amp;gt;&amp;gt;&quot;&gt;无符号右移 &amp;gt;&amp;gt;&amp;gt;&lt;/h4&gt;&lt;p&gt;无符号右移，以0填充空位&lt;/p&gt;
&lt;p&gt;无符号右移，会把负数的二进制当成正数的二进制。会导致无符号右移的结果非常大&lt;/p&gt;
&lt;h3 id=&quot;布尔操作符&quot;&gt;布尔操作符&lt;/h3&gt;&lt;h4 id=&quot;逻辑非_!&quot;&gt;逻辑非  !&lt;/h4&gt;&lt;p&gt;规则：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;    对象--&amp;gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;    空字符串--&amp;gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;    非空字符串---&amp;gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt;    &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;---&amp;gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;5.&lt;/span&gt;    非零数值---&amp;gt;&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;6.&lt;/span&gt;    null--&amp;gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;7.&lt;/span&gt;    NaN--&amp;gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;8.&lt;/span&gt;    undefined --&amp;gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;
&lt;span class=&quot;number&quot;&gt;9.&lt;/span&gt;    
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;逻辑与_&amp;amp;&amp;amp;&quot;&gt;逻辑与 &amp;amp;&amp;amp;&lt;/h4&gt;&lt;p&gt;规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;第一个操作数是对象—&amp;gt;第二个操作数&lt;/li&gt;
&lt;li&gt;第二次操作数是对象—&amp;gt;在第一个操作数求值结果为true的情况下，才会返回该对象&lt;/li&gt;
&lt;li&gt;如果两个操作数都是对象–&amp;gt;返回第二个操作数&lt;/li&gt;
&lt;li&gt;一个是null–&amp;gt;null&lt;/li&gt;
&lt;li&gt;一个是NaN—&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;一个是undefined—&amp;gt;undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;**牢记：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;短路操作&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不能在逻辑与操作中使用未定义的值。**&lt;/p&gt;
&lt;h4 id=&quot;逻辑或&quot;&gt;逻辑或&lt;/h4&gt;&lt;p&gt;规则：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;第一个操作数是对象—&amp;gt;第一个操作数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;第一个操作数的求值结果为false—&amp;gt;第二个操作数&lt;/li&gt;
&lt;li&gt;如果两个都是对象—–&amp;gt;返回第一个对象&lt;/li&gt;
&lt;li&gt;两个都是null—-&amp;gt;null&lt;/li&gt;
&lt;li&gt;两个都是NaN—-&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;两个都是undefined—-&amp;gt;undefined&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;牢记：&lt;br&gt;1.短路操作&lt;br&gt;2.利用逻辑或可以避免为变量赋予null或undefined值。&lt;br&gt;3.不能在逻辑或中出现使用未定义的值。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;乘性操作符&quot;&gt;乘性操作符&lt;/h3&gt;&lt;p&gt;非数值的情况下回执行自动的类型转换&lt;/p&gt;
&lt;h4 id=&quot;乘法_*&quot;&gt;乘法 *&lt;/h4&gt;&lt;p&gt;规则&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;操作数都是数值的情况下，执行常规乘法。超过范围的话Infinity和-Infinity&lt;/li&gt;
&lt;li&gt;NaN–&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;Infinity * 0 -&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;Infinity * 非0 —&amp;gt;Infinity 或 -Infinity&lt;/li&gt;
&lt;li&gt;Infinity * Infinity –&amp;gt;Infinity&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不是数值，转换为数值 Number()。&lt;/p&gt;
&lt;h4 id=&quot;除法_/&quot;&gt;除法 /&lt;/h4&gt;&lt;p&gt;规则&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作数都是数值的情况下，执行常规除法。超过范围的话Infinity和-Infinity&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;NaN–&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;Infinity / 0 -&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;Infinity / Infinity –&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;Infinity / 非0 —&amp;gt;Infinity 或 -Infinity&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不是数值，转换为数值 Number()。&lt;/p&gt;
&lt;h4 id=&quot;求模_%&quot;&gt;求模 %&lt;/h4&gt;&lt;p&gt;规则：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;操作数都是数值的情况下，执行常规求模。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;有限大  % 无穷大 –&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;0 % 有限大 —&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;Infinity % Infinity –&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;无穷大 % 有限大—-&amp;gt;被除数&lt;/li&gt;
&lt;li&gt;Infinity % 非0 —&amp;gt;Infinity 或 -Infinity&lt;/li&gt;
&lt;li&gt;被除数为0—-&amp;gt;0&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不是数值，转换为数值 Number()。&lt;/p&gt;
&lt;h3 id=&quot;加性操作符&quot;&gt;加性操作符&lt;/h3&gt;&lt;h4 id=&quot;加法&quot;&gt;加法&lt;/h4&gt;&lt;p&gt;规则：&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个操作数是NaN–&amp;gt;NaN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Infinity + Infinity –&amp;gt; Infinity&lt;/li&gt;
&lt;li&gt;-Infinity + -Infinity –&amp;gt; -Infinity&lt;/li&gt;
&lt;li&gt;Infinity + -Infinity –&amp;gt;NaN&lt;/li&gt;
&lt;li&gt;+0 + +0 –&amp;gt;+0&lt;/li&gt;
&lt;li&gt;-0 + -0 –&amp;gt; -0&lt;/li&gt;
&lt;li&gt;+0 + -0 –&amp;gt;+0&lt;/li&gt;
&lt;li&gt;如果两个都是是字符串—-&amp;gt;  两个操作符拼接&lt;/li&gt;
&lt;li&gt;如果只有一个字符串，将另一个转换为字符串，然后将两个字符拼接起来。&lt;/li&gt;
&lt;li&gt;如果有一个操作符是对象、数值或布尔值，则调用他们的toString()方法，然后应用上述规则&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于undefined和null调用字符串取得字符串的”undefinied”和”null”&lt;/p&gt;
&lt;h4 id=&quot;减法&quot;&gt;减法&lt;/h4&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果一个操作数是NaN–&amp;gt;NaN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Infinity - Infinity –&amp;gt; NaN&lt;/li&gt;
&lt;li&gt;-Infinity - -Infinity –&amp;gt; NaN&lt;/li&gt;
&lt;li&gt;Infinity - -Infinity –&amp;gt;Infinity&lt;/li&gt;
&lt;li&gt;-Infinity - -Infinity —&amp;gt;-Infinity&lt;/li&gt;
&lt;li&gt;+0 - +0 –&amp;gt;+0&lt;/li&gt;
&lt;li&gt;-0 - -0 –&amp;gt; +0&lt;/li&gt;
&lt;li&gt;+0 - -0 –&amp;gt;-0&lt;/li&gt;
&lt;li&gt;如果只有一个字符串、布尔值、null或undefined，则先在后台执行Number()函数转换为数值，在应用上述规则&lt;/li&gt;
&lt;li&gt;如果有一个操作符是对象，则调用他们的valueOf()方法取得该对象的数值，然后应用上述规则。如果没有valueOf()方法，则调用toString()方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;关系操作符&quot;&gt;关系操作符&lt;/h3&gt;&lt;h4 id=&quot;&amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;=&quot;&gt;&amp;lt;、&amp;gt;、&amp;lt;=、&amp;gt;=&lt;/h4&gt;&lt;p&gt;规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果两个操作数都是数值–&amp;gt;执行比较&lt;/li&gt;
&lt;li&gt;如果两个操作符都是字符串–&amp;gt;比较字符编码&lt;/li&gt;
&lt;li&gt;一个是数值–&amp;gt;将另一个转换为数值，比较&lt;/li&gt;
&lt;li&gt;一个是对象–&amp;gt;调用对象的valueOf()方法，如果没有valueOf()方法，则调用toString()方法。&lt;/li&gt;
&lt;li&gt;如果是布尔值–&amp;gt;转换为数值，比较&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大写字母的字母编码全部辖域小写字符的字符编码&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;toLowerCase()全部转换为小写，再比较&lt;/strong&gt;&lt;br&gt;两个数字字符串比较&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt; &amp;lt; &lt;span class=&quot;string&quot;&gt;&quot;3&quot;&lt;/span&gt; //&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; //&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;a&quot;&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; //&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;NaN&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; //&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;result&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;NaN&lt;/span&gt; &amp;gt;= &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt; //&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如何数与NaN比较，都是false&lt;/p&gt;
&lt;h3 id=&quot;相等_==_和_不相等_!=&quot;&gt;相等 ==  和 不相等 !=&lt;/h3&gt;&lt;p&gt;比较之前转换操作数规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个是boolean值–&amp;gt;转换为数值比较&lt;/li&gt;
&lt;li&gt;一个是字符串，另一个数数值–&amp;gt;字符串转换为数值&lt;/li&gt;
&lt;li&gt;一个是对象，另一个不是–&amp;gt;调用对象的valueOf()方法&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;比较规则：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;null 和 undefined是相等的&lt;/li&gt;
&lt;li&gt;不能将null和undefined转换其它任何值&lt;/li&gt;
&lt;li&gt;有一个是NaN—&amp;gt;相等返回false&lt;/li&gt;
&lt;li&gt;两个都是NaN—&amp;gt;向德国返回false&lt;/li&gt;
&lt;li&gt;都是对象–&amp;gt;比较是不是同一对象&lt;/li&gt;
&lt;/ol&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;string&quot;&gt;&quot;5&quot;&lt;/span&gt;==&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt; != &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt; == &lt;span class=&quot;literal&quot;&gt;NaN&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;全等和不全等&quot;&gt;全等和不全等&lt;/h3&gt;&lt;p&gt;比较之前不转换操作数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt; === &lt;span class=&quot;literal&quot;&gt;undefined&lt;/span&gt;
&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;条件操作符_?_:&quot;&gt;条件操作符 ? :&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;boolean_expression ? &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;_value : &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;_value;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;赋值操作符_=&quot;&gt;赋值操作符 =&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;*=
&lt;span class=&quot;comment&quot;&gt;/=&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;%&lt;/span&gt;=
+=
-&lt;span class=&quot;ruby&quot;&gt;=
&lt;/span&gt;&amp;lt;&amp;lt;=
&amp;gt;&amp;gt;=
&amp;gt;&amp;gt;&amp;gt;=
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;逗号操作符&quot;&gt;逗号操作符&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;在一条语句中执行多个操作数&lt;/li&gt;
&lt;li&gt;用于赋值&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回表达式中的最后一项&lt;/p&gt;
&lt;p&gt; var num  = (4,1,2,3,0) //0&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;语句&quot;&gt;语句&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;if语句&lt;/li&gt;
&lt;li&gt;do-while语句&lt;/li&gt;
&lt;li&gt;while语句&lt;/li&gt;
&lt;li&gt;for语句&lt;br&gt;&lt;strong&gt;ECAMScript不存在块级作用域，因此在循环内部定义的变量也可以在外部访问到。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for-in语句：精准迭代语句&lt;br&gt; for (property in expression)&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    statement

&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; propName &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;){
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(propName)
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; for-in循环输出的属性名的顺序是不可预测的。&lt;br&gt; 迭代的对象的变量值为null和undefined，for-in语句会抛出错误。&lt;br&gt; ECAMScript 5中对这种情况，不抛出错误，只是不执行循环体。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;label语句：在代码中添加标签&lt;br&gt; label：statement&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;break和continue语句&lt;/li&gt;
&lt;li&gt;&lt;p&gt;with语句：将代码的作用域设置到一个特定的对象中。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;with &lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;expression&lt;/span&gt;)&lt;/span&gt; statement&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 严格模式下不允许使用with语句。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;switch语句&lt;br&gt; switch语句可以使用任何数据类型&lt;br&gt; case的值不一定是常量，可以是变量，甚至是表达式&lt;br&gt; 比较的时候，使用的是全等操作符。&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;函数&quot;&gt;函数&lt;/h1&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;functionName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(arg0,arg1,&lt;span class=&quot;rest_arg&quot;&gt;...argN&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;{
    statements
}
&lt;/code&gt;&lt;/pre&gt;&lt;ol&gt;
&lt;li&gt;不必指定返回值&lt;/li&gt;
&lt;li&gt;任何函数在任何时候都可以通过return语句后要返回的值来实现返回值。&lt;/li&gt;
&lt;li&gt;位于return语句后的代码不会执行&lt;/li&gt;
&lt;li&gt;&lt;p&gt;严格模式下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能吧函数命名为eval和arguments&lt;/li&gt;
&lt;li&gt;不能把参数命名为eval和arguments&lt;/li&gt;
&lt;li&gt;不能出现两个函数命名参数同名的情况。&lt;h2 id=&quot;理解参数&quot;&gt;理解参数&lt;/h2&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ECMAScript中参数在内部是用一个数组来表示的。函数接受到始终是这个数组，而不关心数组中包含哪些参数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;在函数体内通过arguments对象来访问这个参数数组，从而获取传递给函数的每一个参数。&lt;/li&gt;
&lt;li&gt;arguments[0]…arguments.length&lt;/li&gt;
&lt;li&gt;arguments的值永远与对应的命名参数值保持同步。但是不是说两个值会访问相同的内存空间，他们的内存空间是互相独立的，值保持同步。&lt;/li&gt;
&lt;li&gt;没有传递值的命名参数将自动赋予undefined值。&lt;/li&gt;
&lt;li&gt;严格模式下：重写arguments的值会导致语法错误。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;没有重载&quot;&gt;没有重载&lt;/h3&gt;&lt;p&gt;通过检查传入函数中参数的类型和数量并作出不同的反应，可以模仿方法的重载。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;语法&quot;&gt;语法&lt;/h1&gt;&lt;h2 id=&quot;ECMAScript中的一切都区分大小写&quot;&gt;ECMAScript中的一切都区分大小写&lt;/h2&gt;&lt;h2 id=&quot;严格模式_“use_strict”&quot;&gt;严格模式 “use strict”&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;为JavaScr
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JS0-简单介绍</title>
    <link href="http://yoursite.com/2016/04/18/JS0-%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://yoursite.com/2016/04/18/JS0-简单介绍/</id>
    <published>2016-04-18T01:43:59.000Z</published>
    <updated>2016-04-19T14:45:58.766Z</updated>
    
    <content type="html">&lt;h1 id=&quot;脚本语言&quot;&gt;脚本语言&lt;/h1&gt;&lt;p&gt;常见的&lt;strong&gt;客户端脚本语言&lt;/strong&gt;有：javascript，VBScript；&lt;/p&gt;
&lt;p&gt;常见的&lt;strong&gt;服务器端脚本语言&lt;/strong&gt;有：PHP，jsp，asp。&lt;/p&gt;
&lt;h1 id=&quot;历史&quot;&gt;历史&lt;/h1&gt;&lt;p&gt;1995 —- JavaScript&lt;/p&gt;
&lt;p&gt;1997 —- ECMAScript ： Euripean Computer Manufacturers Association（欧洲计算机制造商协会）&lt;/p&gt;
&lt;h1 id=&quot;本质&quot;&gt;本质&lt;/h1&gt;&lt;p&gt; 一种专为与网页交互而设计的脚本语言&lt;/p&gt;
&lt;h1 id=&quot;局限性&quot;&gt;局限性&lt;/h1&gt;&lt;h1 id=&quot;JavaScript组成部分&quot;&gt;JavaScript组成部分&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;核心（ECMAScrip）&lt;/li&gt;
&lt;li&gt;文档对象模型（DOM）&lt;/li&gt;
&lt;li&gt;浏览器对象模型（BOM）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-_ECMAScript&quot;&gt;1. ECMAScript&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;ECMA-262只是定义这门语言的基础，而在此基础上可以构建更完善的脚本语言。&lt;/li&gt;
&lt;li&gt;常见的web浏览器只是ECMAAcript可能实现的宿主环境之一。&lt;/li&gt;
&lt;li&gt;其它的宿主环境包括Node(一种服务器端JavaScript平台)和Adobe Flash。&lt;/li&gt;
&lt;li&gt;ECMA-262组成部分：&lt;ol&gt;
&lt;li&gt;语法&lt;/li&gt;
&lt;li&gt;类型&lt;/li&gt;
&lt;li&gt;语句&lt;/li&gt;
&lt;li&gt;关键字&lt;/li&gt;
&lt;li&gt;保留字&lt;/li&gt;
&lt;li&gt;操作符&lt;/li&gt;
&lt;li&gt;对象&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;ECMAScript的版本&quot;&gt;ECMAScript的版本&lt;/h3&gt;&lt;p&gt;ECMA-262的最近一般第5版，发布于2009年&lt;/p&gt;
&lt;h3 id=&quot;ECMAScript兼容&quot;&gt;ECMAScript兼容&lt;/h3&gt;&lt;p&gt;要想兼容ECMA-262：&lt;br&gt;    1.支持ECMA-262描述的所有“类型、值、对象、属性和函数以及程序句法和语义”&lt;br&gt;    2.支持Unicode字符标准&lt;br&gt;兼容扩展：&lt;br&gt;    1.添加更多的类型、值、对象、属性和函数&lt;br&gt;    2.添加”程序和正则表达式语法”&lt;/p&gt;
&lt;h3 id=&quot;web浏览器对ECMAScript的支持&quot;&gt;web浏览器对ECMAScript的支持&lt;/h3&gt;&lt;p&gt;2008年，IE、Firefox、Safari、Chrome、Opera全部做到了与ECMA-262兼容。&lt;/p&gt;
&lt;h2 id=&quot;文档对象模型(DOM)&quot;&gt;文档对象模型(DOM)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;文档对象模型：是针对&lt;span class=&quot;built_in&quot;&gt;XML&lt;/span&gt;但经过扩展用于HTML的应用程序编程接口（API）
DOM把整个页面映射为一个多层节点结构。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;DOM1级&quot;&gt;DOM1级&lt;/h3&gt;&lt;p&gt;主要目标：映射文档结构&lt;br&gt;组成：    &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM核心(DOM Core)–如何映射基于XML的文档结果，一遍简化对文档中                            任意部分的访问和操作。&lt;/li&gt;
&lt;li&gt;DOM HTML–DOM核心的基础上加以扩展，添加了针对HTML的对象和方法。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DOM2级&quot;&gt;DOM2级&lt;/h3&gt;&lt;p&gt;扩展：&lt;br&gt;    对鼠标和用户界面事件、范围、遍历（迭代DOM文档的方法）等细分模块&lt;br&gt;    通过对象接口增加了对CSS(Cascading Style Sheets)的支持。&lt;br&gt;新模块：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;DOM视图(DOM Views):定义了跟踪不同文档的接口&lt;/li&gt;
&lt;li&gt;DOM事件(DOM Events):定义了事件和事件的处理接口&lt;/li&gt;
&lt;li&gt;DOM样式(DOM Style):定义了基于CSS为元素应用样式的接口&lt;/li&gt;
&lt;li&gt;DOM遍历和范围(DOM Traversal and Range):定义了变量和操作文档树的接口。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;DOM3级&quot;&gt;DOM3级&lt;/h3&gt;&lt;p&gt;扩展：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;引入了统一的方式加载和保存文档的方法–DOM Load and Save&lt;/li&gt;
&lt;li&gt;新增了验证文档的方法 DOM Validation&lt;/li&gt;
&lt;li&gt;DOM核心扩展，支持XML1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;浏览器对象模型(BOM)_Browser_Object_Model&quot;&gt;浏览器对象模型(BOM) Browser Object Model&lt;/h2&gt;&lt;p&gt;支持可&lt;strong&gt;访问和操作浏览器窗口&lt;/strong&gt;的浏览器对象(BOM)&lt;/p&gt;
&lt;p&gt;只处理浏览器窗口和框架&lt;/p&gt;
&lt;p&gt;html5增加了BOM规范&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;弹出新浏览器的功能&lt;/li&gt;
&lt;li&gt;移动、缩放和关闭浏览器窗口的功能&lt;/li&gt;
&lt;li&gt;提过浏览器信息信息的navigator对象&lt;/li&gt;
&lt;li&gt;提过浏览器加载页面的详细信息的location对象&lt;/li&gt;
&lt;li&gt;提供用户显示器分辨率详细信息的screen对象&lt;/li&gt;
&lt;li&gt;对cookies的支持&lt;/li&gt;
&lt;li&gt;想XMLHtpRequest和IE的ActiveXObject这样的自定义对象&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;在HTML中使用JavaScript&quot;&gt;在HTML中使用JavaScript&lt;/h1&gt;&lt;h2 id=&quot;&amp;lt;script&amp;gt;属性&quot;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;属性&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;async&lt;/strong&gt;可选:表示立即下载脚本，但不应妨碍页面中的其它操作。h5中增加，只支持外部脚本，不保证按照指定它们的先后顺序执行。为了异步的加载页面其它内容。异步脚本不要在加载期间修改DOM。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;charset&lt;/strong&gt;可选：表示通过src属性指定的代码的字符集。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;defer&lt;/strong&gt;可选：表示脚本可以延迟到文档完全被解析和显示之后再执行。保证它们按照顺序执行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;language&lt;/strong&gt; 已废弃。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;src&lt;/strong&gt;可选：表示要执行代码的外部文件。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt;可选：表示编写代码使用的脚本语言的内容类型。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;使用方式：&lt;br&gt;1.直接在页面中嵌入JavaScript代码&lt;br&gt;2.包含外部JavaScript代码&lt;/p&gt;
&lt;p&gt;##标签的位置##&lt;/p&gt;
&lt;h3 id=&quot;放在&amp;lt;head&amp;gt;元素中&quot;&gt;放在&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;元素中&lt;/h3&gt;&lt;p&gt;优点：把所有外部文件（包括CSS文件和JavaScript文件）的引用都放在相同的地方。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;1.在文档的&lt;head&gt;元素中包含所有JavaScript文件，必须等到全部的JavaScript代码都被下载，解析和执行完成以后，才能开始呈现页面的内容。&lt;/head&gt;&lt;/p&gt;
&lt;p&gt;2.导致浏览器在呈现页面时出现明显的延迟，延迟期间浏览器将是一片空白。&lt;/p&gt;
&lt;h3 id=&quot;放在&amp;lt;body&amp;gt;元素中页面的内容后面&quot;&gt;放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;元素中页面的内容后面&lt;/h3&gt;&lt;p&gt;优点：在解析包含的JavaScript代码之前，页面的内容将完全呈现在浏览器中，浏览器显示空白页的时间缩短而感到页面打开的速度加快。&lt;/p&gt;
&lt;h2 id=&quot;延迟脚本_defer属性&quot;&gt;延迟脚本 defer属性&lt;/h2&gt;&lt;h2 id=&quot;异步脚本_async&quot;&gt;异步脚本 async&lt;/h2&gt;&lt;h1 id=&quot;文档模式&quot;&gt;文档模式&lt;/h1&gt;&lt;h2 id=&quot;混杂模式(quirks_mode)&quot;&gt;混杂模式(quirks mode)&lt;/h2&gt;&lt;h2 id=&quot;标准模式(standards_mode)&quot;&gt;标准模式(standards mode)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- HTML 5--&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;!DOCTYLE&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;准标准模式&quot;&gt;准标准模式&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;元素可以指定在不支持脚本的浏览器中代替显示的内容，但是在启用了脚本的情况下，浏览器不会显示&lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt;元素中任何内容。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;脚本语言&quot;&gt;脚本语言&lt;/h1&gt;&lt;p&gt;常见的&lt;strong&gt;客户端脚本语言&lt;/strong&gt;有：javascript，VBScript；&lt;/p&gt;
&lt;p&gt;常见的&lt;strong&gt;服务器端脚本语言&lt;/strong&gt;有：PHP，jsp，asp。&lt;/p&gt;
&lt;h1 id=&quot;历史
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js进阶篇2</title>
    <link href="http://yoursite.com/2016/04/17/js%E8%BF%9B%E9%98%B6%E7%AF%872/"/>
    <id>http://yoursite.com/2016/04/17/js进阶篇2/</id>
    <published>2016-04-17T04:14:44.000Z</published>
    <updated>2016-04-18T13:51:04.466Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Math对象&quot;&gt;Math对象&lt;/h2&gt;&lt;p&gt;Math对象，提供对数据的数学计算。&lt;/p&gt;
&lt;p&gt;使用 Math 的属性和方法，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mypi=&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.PI; 
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myabs=&lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.abs(-&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(mypi);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myabs);
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：Math 对象是一个固有的对象，无需创建它，直接把 Math 作为对象使用就可以调用其所有属性和方法。这是它与Date,String对象的区别。&lt;/p&gt;
&lt;p&gt;Math对象属性&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性                说明
E                返回算术常量e，即自然对数的底数（约等于&lt;span class=&quot;number&quot;&gt;2.718&lt;/span&gt;）
LN2                返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的自然对数（约等于&lt;span class=&quot;number&quot;&gt;0.693&lt;/span&gt;）
LN10            返回&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;的自然对数
LOG2E            返回以&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;为底E的对数（约等于&lt;span class=&quot;number&quot;&gt;1.442&lt;/span&gt;）
LOG2E            返回以&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;为底的e的对数（约登月&lt;span class=&quot;number&quot;&gt;0.434&lt;/span&gt;）
PI                返回圆周率（约等于&lt;span class=&quot;number&quot;&gt;3.1415926&lt;/span&gt;）
SQRT1_2            返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的平方根的倒数(约等于&lt;span class=&quot;number&quot;&gt;0.707&lt;/span&gt;)
SQRT2            返回&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;的平方根(约等于&lt;span class=&quot;number&quot;&gt;1.414&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Math对象方法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法                描述

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;cos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回余弦值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;acos&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的反余弦值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的正炫值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;asin&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的反正炫值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;tan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的正切值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;atan&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数字的反正切值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;atan2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(y,x)&lt;/span&gt;&lt;/span&gt;        返回由x轴点(x,y)的角度(以弧度为单位)

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;ceil&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            对数进行上舍入
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;floor&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;        对数进行下舍入
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;        把数四舍五入为最接近的整数

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;exp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回e的指数
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;          返回数的自然对数(底为e)

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;max&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;        返回x和y中的最高值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x,y)&lt;/span&gt;&lt;/span&gt;        返回x和y中的最低值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的绝对值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;            返回数的平方根
pow(x,y）        返回x的y次幂
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;~&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;之间的随机数

&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回给对象的源代码
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回Math对象的原始值        
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;四舍五入round()&quot;&gt;四舍五入round()&lt;/h4&gt;&lt;p&gt;round() 方法可把一个数字四舍五入为最接近的整数。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Math.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;round&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(x)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;返回与 x 最接近的整数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于 0.5，该方法将进行上舍入。(5.5 将舍入为 6)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果 x 与两侧整数同等接近，则结果接近 +∞方向的数字值 。(如 -5.5 将舍入为 -5; -5.52 将舍入为 -6)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;Array数组对象&quot;&gt;Array数组对象&lt;/h2&gt;&lt;p&gt;数组对象是一个对象的集合，里边的对象可以是不同类型的。数组的每一个成员对象都有一个“下标”，用来表示它在数组中的位置，是从零开始的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组定义的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义了一个空数组:&lt;/p&gt;
&lt;p&gt; var  数组名= new Array();&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义时指定有n个空元素的数组：&lt;/p&gt;
&lt;p&gt; var 数组名 =new Array(n);&lt;br&gt;3.定义数组的时候，直接初始化数据：&lt;/p&gt;
&lt;p&gt; var  数组名 = [&amp;lt;元素1&amp;gt;, &amp;lt;元素2&amp;gt;, &amp;lt;元素3&amp;gt;…];&lt;br&gt;我们定义myArray数组，并赋值，代码如下：&lt;/p&gt;
&lt;p&gt; var myArray = [2, 8, 6];&lt;br&gt;&lt;strong&gt;说明：&lt;/strong&gt;定义了一个数组 myArray，里边的元素是：myArray[0] = 2; myArray[1] = 8; myArray[2] = 6。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;数组元素使用：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;数组名&lt;span class=&quot;string&quot;&gt;[下标]&lt;/span&gt; = 值;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意: 数组的下标用方括号括起来，从0开始。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组属性：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;length 用法：&lt;strong&gt;&amp;lt;数组对象&amp;gt;.length&lt;/strong&gt;；返回：数组的长度，即数组里有多少个元素。它等于数组里最后一个元素的下标加一。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;数组方法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法                描述
&lt;span class=&quot;comment&quot;&gt;/*检测数组*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;isArray&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        确定某个值到底是不是数组
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toSource&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回该对象的源代码
&lt;span class=&quot;comment&quot;&gt;/*转换方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        把数组转换为字符串，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;toLocaleString&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;把数组转换为本地数组，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回数组对象的原始值
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            把数组的所有元素放入一个字符串。元素通过制定的分隔符进行分隔
&lt;span class=&quot;comment&quot;&gt;/*栈方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            删除并返回数组的最后一个元素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            向数组的末尾添加一个或更多元素，并返回新的长度
&lt;span class=&quot;comment&quot;&gt;/*队列方法 结合shift()和push()可以向队列一样使用数组*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;shift&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            删除并返回数组的第一个元素
&lt;span class=&quot;comment&quot;&gt;/*队列方法 同时使用unshift()和pop()可以从相反的方法模拟队列*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;unshift&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        向数组的开头添加一个或更多元素，并返回新的长度
&lt;span class=&quot;comment&quot;&gt;/*重排列方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            对数组的元素进行排序
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        颠倒数组中元素的顺序
&lt;span class=&quot;comment&quot;&gt;/*操作方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;concat&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        连接两个或更多的数组，并返回结果
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;slice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            从某个已有的数组返回特定的元素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        删除元素，并向数组添加新元素
&lt;span class=&quot;comment&quot;&gt;/*下面是ECMPScript 5 中的新方法*/&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*位置方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;lastIndexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;  
&lt;span class=&quot;comment&quot;&gt;/*迭代方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;every&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;filter&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;forEach&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;some&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;comment&quot;&gt;/*归并方法*/&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reduce&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reduceRight&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;数组连接concat()&quot;&gt;数组连接concat()&lt;/h3&gt;&lt;p&gt;concat() 方法用于连接两个或多个数组。此方法返回一个新数组，不改变原来的数组。&lt;/p&gt;
&lt;p&gt;语法&lt;br&gt;    arrayObject.concat(array1,array2,…,arrayN)&lt;br&gt;参数说明：&lt;br&gt;    array1        要连接的第一个数组&lt;br&gt;    …            …&lt;br&gt;    arrayN        第N个数组&lt;/p&gt;
&lt;h3 id=&quot;指定分隔符连接数组元素join()&quot;&gt;指定分隔符连接数组元素join()&lt;/h3&gt;&lt;p&gt;join()方法用于把数组中的所有元素放入一个字符串。元素是通过指定的分隔符进行分隔的。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(分隔符)&lt;/span&gt;&lt;/span&gt;

参数                描述
separator        可选，指定要使用的分隔符
                默认该参数使用逗号作为分隔符
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：返回一个字符串，该字符串把数组中的各个元素串起来，用&amp;lt;分隔符&amp;gt;置于元素与元素之间。这个方法不影响数组原本的内容。&lt;/p&gt;
&lt;h3 id=&quot;颠倒数组元素顺序reverse()&quot;&gt;颠倒数组元素顺序reverse()&lt;/h3&gt;&lt;p&gt;reverse() 方法用于颠倒数组中元素的顺序。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意：该方法会改变原来的数组，而不会创建新的数组。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;选定元素slice()&quot;&gt;选定元素slice()&lt;/h3&gt;&lt;p&gt;slice() 方法可从已有的数组中返回选定的元素。&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayObject.slice(&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;,&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;)

参数                描述
&lt;span class=&quot;built_in&quot;&gt;start&lt;/span&gt;            必需。规定从何处开始选取。如果是负数，那么它规定从数组尾部                开始算起的位置。 -&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;指最后一个元素。
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;                可选。规定从何处结束。该参数是数组片段处的下标。如果没有指定                该参数，那么切分位置一直到数组的最后的所有元素。如果是负数                从数组尾部算起&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;1.返回一个新的数组，包含从 start 到 end （不包括该元素）的 arrayObject 中的元素。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;该方法并不会修改数组，而是返回一个子数组。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可使用负值从数组的尾部选取元素。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;2.如果 end 未被规定，那么 slice() 方法会选取从 start 到数组结尾的所有元素。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;li&gt;.slice() 与 Array.slice() 相似。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;数组排序sort()&quot;&gt;数组排序sort()&lt;/h3&gt;&lt;p&gt;sort()方法使数组中的元素按照一定的顺序排列。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;arrayObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(方法函数)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;br&gt;    参数            描述&lt;br&gt;    方法函数        可选。规定排序循环。必须是函数。&lt;/p&gt;
&lt;p&gt;1.如果不指定&amp;lt;方法函数&amp;gt;，则按&lt;strong&gt;unicode码顺序排列&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;2.如果指定&amp;lt;方法函数&amp;gt;，则按&amp;lt;方法函数&amp;gt;所指定的排序方法排序。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;myArray&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.sort&lt;/span&gt;(&lt;span class=&quot;tag&quot;&gt;sortMethod&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意: 该函数要比较两个值，然后返回一个用于说明这两个值的相对顺序的数字。比较函数应该具有两个参数 a 和 b，其返回值如下： &lt;/p&gt;
&lt;p&gt;  若返回值&amp;lt;=-1，则表示 A 在排序后的序列中出现在 B 之前。&lt;br&gt;  若返回值&amp;gt;-1 &amp;amp;&amp;amp; &lt;1，则表示 a=&quot;&quot; 和=&quot;&quot; b=&quot;&quot; 具有相同的排序顺序。=&quot;&quot; 若返回值=&quot;&quot;&gt;=1，则表示 A 在排序后的序列中出现在 B 之后。&lt;/1，则表示&gt;&lt;/p&gt;
&lt;p&gt;1.使用sort()将数组进行排序，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myarr1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Hello&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;John&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;love&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;JavaScript&quot;&lt;/span&gt;); 
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myarr2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;80&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;16&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;6&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;100&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myarr1.sort()+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myarr2.sort());
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Hello,JavaScript,John,love
&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意:上面的代码没有按照数值的大小对数字进行排序。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2.如要实现这一点，就必须使用一个排序函数，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;sortNum&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;a,b&lt;/span&gt;) &lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a - b;
 &lt;span class=&quot;comment&quot;&gt;//升序，如降序，把“a - b”该成“b - a”&lt;/span&gt;
}
 &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myarr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;80&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;16&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;50&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;6&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;100&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myarr + &lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(myarr.sort(sortNum));
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;运行结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;6&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;浏览器对象&quot;&gt;浏览器对象&lt;/h1&gt;&lt;h2 id=&quot;window对象&quot;&gt;window对象&lt;/h2&gt;&lt;p&gt;window对象是BOM的核心，window对象指当前的浏览器窗口&lt;/p&gt;
&lt;h3 id=&quot;window对象方法:&quot;&gt;window对象方法:&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方法                描述
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            显示带有一段消息和一个确认的按钮的警告框
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;prompt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        显示可提示用户输入的对话框
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;confirm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        显示带有一段消息以及确认按钮和取消按钮的对话框
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            打开一个新的浏览器窗口或查找一个已命名的窗口。
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            关闭浏览器窗口
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            打印当前窗口的内容
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;focus&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            把键盘焦点给予一个窗口
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;blur&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            把键盘焦点从顶层窗口移开
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;moveBy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        可相对窗口的当前坐标把它移动指定的像素
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;moveTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        把窗口的左上角移动到一个制定的坐标
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;resizeTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        把窗口的大小调整到制定的宽度和高度
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;scrollBy&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        按照指定的像素来滚动内容
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;scrollTo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        把内容滚动到指定的坐标
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    隔指定的时间执行代码
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    在指定的延迟时间之后来执行代码
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    取消&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;的设置
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    取消&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;的设置
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;JavaScript_计时器&quot;&gt;JavaScript 计时器&lt;/h3&gt;&lt;p&gt;在JavaScript中，我们可以在设定的时间间隔之后来执行代码，而不是在函数被调用后立即执行。&lt;br&gt;&lt;strong&gt;计时器类型：&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;一次性计时器&lt;/strong&gt;：仅在指定的延迟时间之后触发一次。&lt;br&gt;&lt;strong&gt;间隔性触发计时器&lt;/strong&gt;：每隔一定的时间间隔就触发一次。&lt;br&gt;&lt;strong&gt;计时器方法：&lt;/strong&gt;&lt;br&gt;    方法                说明&lt;br&gt;    setInterval()    隔指定的时间执行代码&lt;br&gt;    setTimeout()    在指定的延迟时间之后来执行代码&lt;br&gt;    clearInterval()    取消setInterval()的设置&lt;br&gt;    clearTimeout()    取消setTimeout()的设置&lt;/p&gt;
&lt;h3 id=&quot;计时器setInterval()&quot;&gt;计时器setInterval()&lt;/h3&gt;&lt;p&gt;在执行时,从载入页面后每隔指定的时间执行代码。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Interval(代码,交互时间);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;代码：要调用的函数或要执行的代码串。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;交互时间：周期性执行或调用表达式之间的时间间隔，以毫秒计（1s=1000ms）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;返回值:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个可以传递给 clearInterval() 从而取消对”代码”的周期性执行的值。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;调用函数格式(假设有一个clock()函数):&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;string&quot;&gt;&quot;clock()&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
或
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setInterval&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(clock,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;取消计时器clearInterval()&quot;&gt;取消计时器clearInterval()&lt;/h3&gt;&lt;p&gt;clearInterval() 方法可取消由 setInterval() 设置的交互时间。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;clearInterval&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(id_of_setInterval)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明:&lt;br&gt;    id_of_setInterval：由 setInterval() 返回的 ID 值。&lt;/p&gt;
&lt;p&gt;每隔 100 毫秒调用 clock() 函数,并显示时间。当点击按钮时，停止时间,代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;计时器&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
   &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;clock&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
      &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; time=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();                     
      &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&quot;clock&quot;&lt;/span&gt;).value = time;
   }
&lt;span class=&quot;comment&quot;&gt;// 每隔100毫秒调用clock函数，并将返回值赋值给i&lt;/span&gt;
     &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i=setInterval(&lt;span class=&quot;string&quot;&gt;&quot;clock()&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;clock&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;size&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;50&quot;&lt;/span&gt;  /&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Stop&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;clearInterval(i)&quot;&lt;/span&gt;  /&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;计时器setTimeout()&quot;&gt;计时器setTimeout()&lt;/h3&gt;&lt;p&gt;setTimeout()计时器，在载入后延迟指定时间后,去执行一次表达式,仅执行一次。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt;Timeout(代码,延迟时间);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要调用的函数或要执行的代码串。&lt;/li&gt;
&lt;li&gt;延时时间：在执行代码前需等待的时间，以毫秒为单位（1s=1000ms)。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当我们打开网页3秒后，在弹出一个提示框，代码如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;
  setTimeout(&lt;span class=&quot;string&quot;&gt;&quot;alert(&#39;Hello!&#39;)&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3000&lt;/span&gt; );
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当按钮start被点击时，setTimeout()调用函数，在5秒后弹出一个提示框。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;actionscript&quot;&gt;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;tinfo&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;{
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; t=setTimeout(&lt;span class=&quot;string&quot;&gt;&quot;alert(&#39;Hello!&#39;)&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;);
 }
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;start&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;tinfo()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;要创建一个运行于无穷循环中的计数器，我们需要编写一个函数来调用其自身。在下面的代码，当按钮被点击后，输入域便从0开始计数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;numCount&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
 &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;txt&#39;&lt;/span&gt;).value=num;
 num=num+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
 setTimeout(&lt;span class=&quot;string&quot;&gt;&quot;numCount()&quot;&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);
 }
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;txt&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Start&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;numCount()&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;取消计时器clearTimeout()&quot;&gt;取消计时器clearTimeout()&lt;/h3&gt;&lt;p&gt;setTimeout()和clearTimeout()一起使用，停止计时器。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;clearTimeout&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(id_of_setTimeout)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明:&lt;br&gt;    id_of_setTimeout：由 setTimeout() 返回的 ID 值。该值标识要取消的延迟执行代码块。&lt;/p&gt;
&lt;p&gt;下面的例子和上节的无穷循环的例子相似。唯一不同是，现在我们添加了一个 “Stop” 按钮来停止这个计数器：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; num=&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,i;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;timedCount&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementById(&lt;span class=&quot;string&quot;&gt;&#39;txt&#39;&lt;/span&gt;).value=num;
    num=num+&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;
    i=setTimeout(timedCount,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);
  }
    setTimeout(timedCount,&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;stopCount&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    clearTimeout(i);
  }
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;txt&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Stop&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onClick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;stopCount()&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;History_对象&quot;&gt;History 对象&lt;/h2&gt;&lt;p&gt;history对象记录了用户曾经浏览过的页面(URL)，并可以实现浏览器前进与后退相似导航的功能。&lt;/p&gt;
&lt;p&gt;注意:&lt;strong&gt;从窗口被打开的那一刻开始记录，每个浏览器窗口、每个标签页乃至每个框架，都有自己的history对象与特定的window对象关联。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.history&lt;/span&gt;.&lt;span class=&quot;attr_selector&quot;&gt;[属性|方法]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意：window可以省略。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;History对象属性&lt;br&gt;    方法                描述&lt;br&gt;    length            返回浏览器历史列表的URL数量&lt;/p&gt;
&lt;p&gt;History对象方法&lt;br&gt;    方法                描述&lt;br&gt;    back()            加载histroy列表中的前一个URL&lt;br&gt;    forward()        加载histroy列表中的下一个URL&lt;br&gt;    go()            加载histroy列表中的某个具体的页面&lt;/p&gt;
&lt;h4 id=&quot;返回浏览历史中的其他页面&quot;&gt;返回浏览历史中的其他页面&lt;/h4&gt;&lt;p&gt;go()方法，根据当前所处的页面，加载 history 列表中的某个具体的页面。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window.&lt;span class=&quot;keyword&quot;&gt;history&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;go&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;number            参数说明
&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                前一个，go（&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;）等价于forward()
&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;                 当前页面
-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;                后一个，go（-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;）等价于back（）
其他值            要访问的URL在History的URL列表中的相对位置
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Location对象&quot;&gt;Location对象&lt;/h3&gt;&lt;p&gt;location用于获取或设置窗体的URL，并且可以用于解析URL。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;location.[属性&lt;span class=&quot;string&quot;&gt;|方法]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;location对象属性图示:&lt;/p&gt;
&lt;h4 id=&quot;对象属性：&quot;&gt;对象属性：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;属性            描述
hash        设置或返回从&lt;span class=&quot;comment&quot;&gt;#开始的URL&lt;/span&gt;
host        设置或返回主机名和当前&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;的端口号
hostname    设置或返回当前url的主机名
href        设置或返回完整的&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;
pathname    设置或返回当前的&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;路径部分
port        设置或返回当前的&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;的端口号
protocol    设置或返回当前的&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;的协议
search        设置或返回当前问号?开始的&lt;span class=&quot;built_in&quot;&gt;URL&lt;/span&gt;（查询部分）
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;对象方法&quot;&gt;对象方法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;属性            描述
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;assign&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    加载新的文档
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;reload&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    重新加载当前文档
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;    用新的文档替换当前文档
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;Navigator对象&quot;&gt;Navigator对象&lt;/h3&gt;&lt;p&gt;Navigator 对象包含有关浏览器的信息，通常用于检测浏览器与操作系统的版本。&lt;/p&gt;
&lt;h4 id=&quot;对象属性&quot;&gt;对象属性&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;属性            描述
appCodeName    浏览器代码名的字符串表示
appName        返回浏览器的名称
appVersion    返回浏览器的平台和版本信息
platform    返回运行浏览器的操作系统平台
userAgent    返回由客户机发送服务器的&lt;span class=&quot;built_ins&quot;&gt;user&lt;/span&gt;-agent头部的值。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;userAgent&quot;&gt;userAgent&lt;/h3&gt;&lt;p&gt;查看浏览器的userAgent，并判断是什么浏览器&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;navigator&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;validB&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{ 
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; u_agent =  navigator.userAgent     ; 
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; B_name=&lt;span class=&quot;string&quot;&gt;&quot;不是想用的主流浏览器!&quot;&lt;/span&gt;; 
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(u_agent.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;Firefox&quot;&lt;/span&gt;)&amp;gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){ 
        B_name=&lt;span class=&quot;string&quot;&gt;&quot;Firefox&quot;&lt;/span&gt;; 
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(u_agent.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;Chrome&quot;&lt;/span&gt;)&amp;gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){ 
        B_name=&lt;span class=&quot;string&quot;&gt;&quot;Chrome&quot;&lt;/span&gt;; 
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(u_agent.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;MSIE&quot;&lt;/span&gt;)&amp;gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&amp;amp;&amp;amp;u_agent.indexOf(&lt;span class=&quot;string&quot;&gt;&quot;Trident&quot;&lt;/span&gt;)&amp;gt;-&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){ 
        B_name=&lt;span class=&quot;string&quot;&gt;&quot;IE(8-10)&quot;&lt;/span&gt;;  
    }
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;浏览器:&quot;&lt;/span&gt;+B_name+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;);
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;u_agent:&quot;&lt;/span&gt;+u_agent+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;&quot;&lt;/span&gt;); 
  } 
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
     &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;查看浏览器&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;onclick&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;validB()&quot;&lt;/span&gt;  &amp;gt;&lt;/span&gt;
  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;screen对象&quot;&gt;screen对象&lt;/h3&gt;&lt;p&gt;screen对象用于获取用户的屏幕信息。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;window&lt;span class=&quot;class&quot;&gt;.screen&lt;/span&gt;.属性
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;对象属性：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性            描述
availHeight    窗口可以使用的屏幕高度，单位像素
availWidth    窗口可以使用的屏幕宽度，单位像素
colorDepth    用户浏览器表示的颜色位数，通常为&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;为(每像素的位数)
pixelDepth    用户浏览器表示的颜色位数，通常为&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt;为(每像素的位数)（IE不支持此属性）
height        屏幕的高度，单位像素
width        屏幕的宽度，单位像素
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;屏幕分辨率的高和宽&quot;&gt;屏幕分辨率的高和宽&lt;/h4&gt;&lt;p&gt;window.screen 对象包含有关用户屏幕的信息。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;screen.height 返回屏幕分辨率的高&lt;/li&gt;
&lt;li&gt;screen.width 返回屏幕分辨率的宽&lt;br&gt;注意:&lt;br&gt;1.单位以像素计。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;window.screen 对象在编写时可以不使用 window 这个前缀。&lt;/strong&gt;&lt;br&gt;我们来获取屏幕的高和宽，代码如下:&lt;/p&gt;
 &lt;script type=&quot;text/javascript&quot;&gt;
   document.write( &quot;屏幕宽度：&quot;+screen.width+&quot;px&lt;br /&gt;&quot; );
   document.write( &quot;屏幕高度：&quot;+screen.height+&quot;px&lt;br /&gt;&quot; );
 &lt;/script&gt;

&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;屏幕可用高和宽度&quot;&gt;屏幕可用高和宽度&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;screen.availWidth 属性返回访问者屏幕的宽度，以像素计，减去界面特性，比如任务栏。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;screen.availHeight 属性返回访问者屏幕的高度，以像素计，减去界面特性，比如任务栏。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;不同系统的任务栏默认高度不一样，及任务栏的位置可在屏幕上下左右任何位置，所以有可能可用宽度和高度不一样。&lt;/p&gt;
&lt;h1 id=&quot;DOM对象_控制HTML元素&quot;&gt;DOM对象 控制HTML元素&lt;/h1&gt;&lt;h2 id=&quot;认识DOM&quot;&gt;认识DOM&lt;/h2&gt;&lt;p&gt;文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。DOM 将HTML文档呈现为带有&lt;strong&gt;元素&lt;/strong&gt;、&lt;strong&gt;属性&lt;/strong&gt;和&lt;strong&gt;文本&lt;/strong&gt;的&lt;strong&gt;树结构（节点树）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;HTML文档可以说由节点构成的集合，DOM节点有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;元素节点&lt;/strong&gt;：上图中&lt;code&gt;&amp;lt;html&amp;gt;、&amp;lt;body&amp;gt;、&amp;lt;p&amp;gt;&lt;/code&gt;等都是元素节点，即标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;文本节点&lt;/strong&gt;:向用户展示的内容，如&lt;code&gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&lt;/code&gt;中的JavaScript、DOM、CSS等文本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;属性节点&lt;/strong&gt;:元素属性，如&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签的链接属性href=”&lt;a href=&quot;http://www.imooc.com&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.imooc.com&lt;/a&gt;“&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;节点属性&quot;&gt;节点属性&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方法                    说明
nodeName            返回一个字符串，其内容是给定节点的名字。
&lt;span class=&quot;keyword&quot;&gt;nodeType&lt;/span&gt;            返回一个整数，这个数值代表给定节点的类型。
nodeValue            返回给定节点的当前值
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;遍历节点树&quot;&gt;遍历节点树&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方法                    说明
childNodes            返回一个数组，这个数组由给定元素的子节点构成
firstChild            返回第一个子节点
lastChild            返回一个给定的父节点
parentNode            返回一个给定节点的父节点
nextSibling            返回给定节点的下一个子节点
previousSibling        返回给定节点的上一个子节点
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;DOM操作&quot;&gt;DOM操作&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;方法                        说明
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(element)&lt;/span&gt;&lt;/span&gt;    创建一个新的元素节点
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;createTextNode&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        创建一个包含着给定文本的新文本节点
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            指定节点的最后一个子节点列表之后添加一个新的子节点
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;insertBefore&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            将一个给定节点插入到一个给定元素节点的给定子节点前面
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;removeChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            从一个给定元素中删除一个子节点
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;replaceChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            把一个给定父元素里的一个子节点替换为另一个节点。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意:前两个是document方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;getElementsByName()方法&quot;&gt;getElementsByName()方法&lt;/h3&gt;&lt;p&gt;返回带有指定名称的节点对象的集合。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getElementsByName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;与getElementById() 方法不同的是，通过元素的 name 属性查询元素，而不是通过 id 属性。&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;因为文档中的 name 属性可能不唯一，所有 getElementsByName() 方法返回的是元素的数组，而不是一个元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和数组类似也有length属性，可以和访问数组一样的方法来访问，从0开始。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;getElementsByTagName()方法&quot;&gt;getElementsByTagName()方法&lt;/h3&gt;&lt;p&gt;返回带有指定标签名的节点对象的集合。返回元素的顺序是它们在文档中的顺序。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Tagname)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Tagname是标签的名称，如p、a、img等标签名。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;和数组类似也有length属性，可以和访问数组一样的方法来访问，所以从0开始。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;区别getElementByID,getElementsByName,getElementsByTagName&quot;&gt;区别getElementByID,getElementsByName,getElementsByTagName&lt;/h3&gt;&lt;p&gt;以人来举例说明，人有能标识身份的身份证，有姓名，有类别(大人、小孩、老人)等。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;ID 是一个人的身份证号码，是唯一的。所以通过getElementById获取的是指定的一个人。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name 是他的名字，可以重复。所以通过getElementsByName获取名字相同的人集合。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;TagName可看似某类，getElementsByTagName获取相同类的人集合。如获取小孩这类人，getElementsByTagName(“小孩”)。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;把上面的例子转换到HTML中，如下:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&lt;span class=&quot;string&quot;&gt;&quot;checkbox&quot;&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hobby&quot;&lt;/span&gt; &lt;span class=&quot;property&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;hobby1&quot;&lt;/span&gt;&amp;gt;  音乐
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;input标签就像人的类别。&lt;/p&gt;
&lt;p&gt;name属性就像人的姓名。&lt;/p&gt;
&lt;p&gt;id属性就像人的身份证&lt;/p&gt;
&lt;h3 id=&quot;getAttribute()方法&quot;&gt;getAttribute()方法&lt;/h3&gt;&lt;p&gt;通过元素节点的属性名称获取属性的值。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elementNode.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;elementNode：使用getElementById()、getElementsByTagName()等方法，获取到的元素节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;name：要想查询的元素节点的属性名字&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;setAttribute()方法&quot;&gt;setAttribute()方法&lt;/h3&gt;&lt;p&gt;setAttribute() 方法增加一个指定名称和值的新属性，或者把一个现有的属性设定为指定的值。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elementNode.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name,value)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1.name: 要设置的属性名。&lt;/p&gt;
&lt;p&gt;2.value: 要设置的属性值。&lt;/p&gt;
&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;1.把指定的属性设置为指定的值。如果不存在具有指定名称的属性，该方法将创建一个新属性。&lt;/p&gt;
&lt;p&gt;2.类似于getAttribute()方法，setAttribute()方法只能通过元素节点对象调用的函数。&lt;/p&gt;
&lt;h3 id=&quot;节点属性-1&quot;&gt;节点属性&lt;/h3&gt;&lt;p&gt;在文档对象模型 (DOM) 中，每个节点都是一个对象。DOM 节点有三个重要的属性 ：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;nodeName : 节点的名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nodeValue ：节点的值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;nodeType ：节点的类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;一、nodeName 属性:&lt;/strong&gt; 节点的名称，是只读的。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素节点的 nodeName 与标签名相同&lt;/li&gt;
&lt;li&gt;属性节点的 nodeName 是属性的名称&lt;/li&gt;
&lt;li&gt;文本节点的 nodeName 永远是 #text&lt;/li&gt;
&lt;li&gt;文档节点的 nodeName 永远是 #document&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;二、nodeValue 属性&lt;/strong&gt;：节点的值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素节点的 nodeValue 是 undefined 或 null&lt;/li&gt;
&lt;li&gt;文本节点的 nodeValue 是文本自身&lt;/li&gt;
&lt;li&gt;属性节点的 nodeValue 是属性的值&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;三、nodeType 属性:&lt;/strong&gt; 节点的类型，是只读的。以下常用的几种结点类型:&lt;/p&gt;
&lt;p&gt;元素类型    节点类型&lt;br&gt;  元素          1&lt;br&gt;  属性          2&lt;br&gt;  文本          3&lt;br&gt;  注释          8&lt;br&gt;  文档          9&lt;/p&gt;
&lt;h3 id=&quot;访问子结点childNodes&quot;&gt;访问子结点childNodes&lt;/h3&gt;&lt;p&gt;访问选定元素节点下的所有子节点的列表，返回的值可以看作是一个数组，他具有length属性。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;elementNode&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.childNodes&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;p&gt;如果选定的节点没有子节点，则该属性返回不包含节点的 NodeList。&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;IE全系列、firefox、chrome、opera、safari兼容问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;节点之间的空白符，在firefox、chrome、opera、safari浏览器是文本节点，所以IE是3，其它浏览器是7，如下图所示:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;访问子结点的第一和最后项&quot;&gt;访问子结点的第一和最后项&lt;/h3&gt;&lt;p&gt;一、firstChild 属性返回‘childNodes’数组的第一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;identifier&quot;&gt;&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;firstChild&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：与elementNode.childNodes[0]是同样的效果。 &lt;/p&gt;
&lt;p&gt;二、 lastChild 属性返回‘childNodes’数组的最后一个子节点。如果选定的节点没有子节点，则该属性返回 NULL。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;identifier&quot;&gt;&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;lastChild&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：与elementNode.childNodes[elementNode.childNodes.length-1]是同样的效果。 &lt;/p&gt;
&lt;p&gt;注意: 上一节中，我们知道Internet Explorer 会忽略节点之间生成的空白文本节点，而其它浏览器不会。我们可以通过检测节点类型，过滤子节点。 (以后章节讲解)&lt;/p&gt;
&lt;h3 id=&quot;访问父节点parentNode&quot;&gt;访问父节点parentNode&lt;/h3&gt;&lt;p&gt;获取指定节点的父节点&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;elementNode&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.parentNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:父节点只能有一个。&lt;br&gt;访问祖节点:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;elementNode&lt;span class=&quot;class&quot;&gt;.parentNode&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.parentNode&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意: 浏览器兼容问题，chrome、firefox等浏览器标签之间的空白也算是一个文本节点。&lt;/p&gt;
&lt;h3 id=&quot;访问兄弟节点&quot;&gt;访问兄弟节点&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;nextSibling 属性可返回某个节点之后紧跟的节点（处于同一树层级中）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;nodeObject&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.nextSibling&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：如果无此节点，则该属性返回 null。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;previousSibling 属性可返回某个节点之前紧跟的节点（处于同一树层级中）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nodeObject&lt;span class=&quot;class&quot;&gt;.previousSibling&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：如果无此节点，则该属性返回 null。&lt;/p&gt;
&lt;p&gt;注意: 两个属性获取的是节点。Internet Explorer 会忽略节点间生成的空白文本节点（例如，换行符号），而其它浏览器不会忽略。&lt;/p&gt;
&lt;p&gt;解决问题方法:&lt;/p&gt;
&lt;p&gt;判断节点nodeType是否为1, 如是为元素节点，跳过。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;nextSibling&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;u1&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;a&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;javascript&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;b&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;jquery&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;c&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;html&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;   
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;   
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;u2&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;d&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;css3&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;e&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;php&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;   
            &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;f&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;java&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;   
        &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;   
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_nextSibling&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x=n.nextSibling;
        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt; (x &amp;amp;&amp;amp; x.nodeType!=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
            x=x.nextSibling;
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;
    }

    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_previousSibling&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;n&lt;/span&gt;)&lt;/span&gt;{
        &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x = n.previousSibling;
        &lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;(x &amp;amp;&amp;amp; x.nodeType!=&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;){
            x=x.previousSibling;
        }
        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; x;
    }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; x=&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.getElementsByTagName(&lt;span class=&quot;string&quot;&gt;&quot;li&quot;&lt;/span&gt;)[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;];
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(x.nodeName);
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot; = &quot;&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(x.innerHTML);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; y=get_nextSibling(x);

    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(y!=&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;){
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br /&amp;gt;nextsibling: &quot;&lt;/span&gt;);
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(y.nodeName);
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot; = &quot;&lt;/span&gt;);
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(y.innerHTML);
    }&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;{
      &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br&amp;gt;已经是最后一个节点&quot;&lt;/span&gt;);      
    }

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; z = get_previousSibling(y);
    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(z!=&lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;){
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;br /&amp;gt;previous: &quot;&lt;/span&gt;);
        &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(z.nodeName + &lt;span class=&quot;string&quot;&gt;&quot; = &quot;&lt;/span&gt; + z.innerHTML);
    }

&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;插入节点appendChild()&quot;&gt;插入节点appendChild()&lt;/h3&gt;&lt;p&gt;在指定节点的最后一个子节点列表之后添加一个新的子节点。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(newnode)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数:&lt;/p&gt;
&lt;p&gt;newnode：指定追加的节点。&lt;/p&gt;
&lt;h3 id=&quot;插入节点insertBefore()&quot;&gt;插入节点insertBefore()&lt;/h3&gt;&lt;p&gt;insertBefore() 方法可在已有的子节点前插入一个新的子节点。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;insertBefore(newnode,&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数:&lt;/p&gt;
&lt;p&gt;newnode: 要插入的新节点。&lt;/p&gt;
&lt;p&gt;node: 指定此节点前插入节点。&lt;/p&gt;
&lt;h3 id=&quot;删除节点removeChild()&quot;&gt;删除节点removeChild()&lt;/h3&gt;&lt;p&gt;removeChild() 方法从子节点列表中删除某个节点。如删除成功，此方法可返回被删除的节点，如失败，则返回 NULL。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;nodeObject.removeChild(&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;identifier&quot;&gt;&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数:&lt;/p&gt;
&lt;p&gt;node ：必需，指定需要删除的节点。&lt;/p&gt;
&lt;p&gt;注意: 把删除的子节点赋值给 x，这个子节点不在DOM树中，但是还存在内存中，可通过 x 操作。&lt;br&gt;如果要完全删除对象，给 x 赋 null 值&lt;/p&gt;
&lt;h3 id=&quot;替换元素节点replaceChild()&quot;&gt;替换元素节点replaceChild()&lt;/h3&gt;&lt;p&gt;replaceChild 实现子节点(对象)的替换。返回被替换对象的引用。 &lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;node&lt;/span&gt;.&lt;span class=&quot;identifier&quot;&gt;&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;replaceChild&lt;/span&gt; (newnode,oldnew ) 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数：&lt;/p&gt;
&lt;p&gt;newnode : 必需，用于替换 oldnew 的对象。&lt;br&gt;oldnew : 必需，被 newnode 替换的对象。&lt;/p&gt;
&lt;h3 id=&quot;创建元素节点createElement&quot;&gt;创建元素节点createElement&lt;/h3&gt;&lt;p&gt;createElement()方法可创建元素节点。此方法可返回一个 Element 对象。&lt;br&gt;语法：&lt;br&gt;    document.createElement(tagName)&lt;br&gt;参数:&lt;br&gt;tagName：字符串值，这个字符串用来指明创建元素的类型。&lt;br&gt;注意：要与appendChild() 或 insertBefore()方法联合使用，将元素显示在页面中。&lt;/p&gt;
&lt;p&gt;我们来创建一个按钮，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body; 
   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;);  
   input.type = &lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt;;  
   input.value = &lt;span class=&quot;string&quot;&gt;&quot;创建一个按钮&quot;&lt;/span&gt;;  
   body.appendChild(input);  
 &lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果：在HTML文档中，创建一个按钮。&lt;br&gt;我们也可以使用setAttribute来设置属性，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;  
   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; body= &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body;             
   &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; btn = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;input&quot;&lt;/span&gt;);  
   btn.setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;type&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt;);  
   btn.setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;name&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;q&quot;&lt;/span&gt;);  
   btn.setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;使用setAttribute&quot;&lt;/span&gt;);  
   btn.setAttribute(&lt;span class=&quot;string&quot;&gt;&quot;onclick&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;javascript:alert(&#39;This is a text!&#39;);&quot;&lt;/span&gt;);       
   body.appendChild(btn);  
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;效果：在HTML文档中，创建一个文本框，使用setAttribute设置属性值。 当点击这个文本框时，会弹出对话框“This is a text!”。&lt;/p&gt;
&lt;h3 id=&quot;创建文本节点createTextNode&quot;&gt;创建文本节点createTextNode&lt;/h3&gt;&lt;p&gt;createTextNode() 方法创建新的文本节点，返回新创建的 Text 节点。&lt;br&gt;语法：&lt;br&gt;    document.createTextNode(data)&lt;br&gt;参数：&lt;br&gt;data : 字符串值，可规定此节点的文本。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;doctype&quot;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;meta&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;http-equiv&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;Content-Type&quot;&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;content&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/html; charset=utf-8&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;无标题文档&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;title&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/css&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;css&quot;&gt;

&lt;span class=&quot;class&quot;&gt;.message&lt;/span&gt;&lt;span class=&quot;rules&quot;&gt;{    
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;200px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;number&quot;&gt;100px&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;
    &lt;span class=&quot;rule&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;background-color&lt;/span&gt;:&lt;span class=&quot;value&quot;&gt;&lt;span class=&quot;hexcolor&quot;&gt;#CCC&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;;}&lt;/span&gt;

&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;style&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;head&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; element = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createElement(&lt;span class=&quot;string&quot;&gt;&quot;div&quot;&lt;/span&gt;);
    element.className = &lt;span class=&quot;string&quot;&gt;&quot;message&quot;&lt;/span&gt;;
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; textNode = &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.createTextNode(&lt;span class=&quot;string&quot;&gt;&quot;Hello world&quot;&lt;/span&gt;);
    element.appendChild(textNode);
    &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.appendChild(element);

&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt; 

&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;body&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;html&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;浏览器窗口可视区域大小&quot;&gt;浏览器窗口可视区域大小&lt;/h3&gt;&lt;p&gt;获得浏览器窗口的尺寸（浏览器的视口，不包括工具栏和滚动条）的方法:&lt;/p&gt;
&lt;h4 id=&quot;一、对于IE9+、Chrome、Firefox、Opera_以及_Safari：&quot;&gt;一、对于IE9+、Chrome、Firefox、Opera 以及 Safari：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;•  window&lt;span class=&quot;class&quot;&gt;.innerHeight&lt;/span&gt; - 浏览器窗口的内部高度
•  window&lt;span class=&quot;class&quot;&gt;.innerWidth&lt;/span&gt; - 浏览器窗口的内部宽度
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;二、对于_Internet_Explorer_8、7、6、5：&quot;&gt;二、对于 Internet Explorer 8、7、6、5：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;•  document&lt;span class=&quot;class&quot;&gt;.documentElement&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.clientHeight&lt;/span&gt;表示HTML文档所在窗口的当前高度。
•  document&lt;span class=&quot;class&quot;&gt;.documentElement&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.clientWidth&lt;/span&gt;表示HTML文档所在窗口的当前宽度。
或者
Document对象的body属性对应HTML文档的&amp;lt;body&amp;gt;标签
•  document&lt;span class=&quot;class&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.clientHeight&lt;/span&gt;
•  document&lt;span class=&quot;class&quot;&gt;.body&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.clientWidth&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;在不同浏览器都实用的_JavaScript_方案：&quot;&gt;在不同浏览器都实用的 JavaScript 方案：&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; w= &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.clientWidth
      || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.clientWidth;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h= &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.clientHeight
      || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.clientHeight;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;网页尺寸scrollHeight&quot;&gt;网页尺寸scrollHeight&lt;/h3&gt;&lt;p&gt;scrollHeight和scrollWidth，获取网页内容高度和宽度。&lt;/p&gt;
&lt;h4 id=&quot;一、针对IE、Opera:&quot;&gt;一、针对IE、Opera:&lt;/h4&gt;&lt;p&gt;scrollHeight 是网页内容实际高度，可以小于 clientHeight。&lt;/p&gt;
&lt;h4 id=&quot;二、针对NS、FF:&quot;&gt;二、针对NS、FF:&lt;/h4&gt;&lt;p&gt;scrollHeight 是网页内容高度，不过最小值是 clientHeight。也就是说网页内容实际高度小于 clientHeight 时，scrollHeight 返回 clientHeight 。&lt;/p&gt;
&lt;h4 id=&quot;三、浏览器兼容性&quot;&gt;三、浏览器兼容性&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; w=&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.scrollWidth
   || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.scrollWidth;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h=&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.scrollHeight
   || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.scrollHeight;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:区分大小写&lt;/p&gt;
&lt;p&gt;scrollHeight和scrollWidth还可获取Dom元素中内容实际占用的高度和宽度。&lt;/p&gt;
&lt;h3 id=&quot;网页尺寸offsetHeight&quot;&gt;网页尺寸offsetHeight&lt;/h3&gt;&lt;p&gt;offsetHeight和offsetWidth，获取网页内容高度和宽度(包括滚动条等边线，会随窗口的显示大小改变)。&lt;/p&gt;
&lt;h4 id=&quot;一、值&quot;&gt;一、值&lt;/h4&gt;&lt;p&gt;offsetHeight = clientHeight + 滚动条 + 边框。&lt;/p&gt;
&lt;h4 id=&quot;二、浏览器兼容性&quot;&gt;二、浏览器兼容性&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; w= &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.offsetWidth
    || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.offsetWidth;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; h= &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.documentElement.offsetHeight
    || &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.body.offsetHeight;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;网页卷去的距离与偏移量&lt;br&gt;    scrollLeft:设置或获取位于给定对象左边界与窗口中目前可见内容的最左端之间的距离 ，即左边灰色的内容。&lt;br&gt;    scrollTop:设置或获取位于对象最顶端与窗口中可见内容的最顶端之间的距离 ，即上边灰色的内容。&lt;br&gt;    offsetLeft:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算左侧位置 。&lt;br&gt;    offsetTop:获取指定对象相对于版面或由 offsetParent 属性指定的父坐标的计算顶端位置 。&lt;br&gt;注意:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;区分大小写&lt;/li&gt;
&lt;li&gt;offsetParent：布局中设置postion属性(Relative、Absolute、fixed)的父容器，从最近的父节点开始，一层层向上找，直到HTML的body。&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Math对象&quot;&gt;Math对象&lt;/h2&gt;&lt;p&gt;Math对象，提供对数据的数学计算。&lt;/p&gt;
&lt;p&gt;使用 Math 的属性和方法，代码如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js进阶篇1</title>
    <link href="http://yoursite.com/2016/04/14/js%E8%BF%9B%E9%98%B6%E7%AF%871/"/>
    <id>http://yoursite.com/2016/04/14/js进阶篇1/</id>
    <published>2016-04-14T15:08:14.000Z</published>
    <updated>2016-04-17T04:12:53.961Z</updated>
    
    <content type="html">&lt;h3 id=&quot;操作符优先级&quot;&gt;操作符优先级&lt;/h3&gt;&lt;p&gt;操作符之间的优先级（高到低）:&lt;/p&gt;
&lt;p&gt;算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号&lt;/p&gt;
&lt;h3 id=&quot;数组&quot;&gt;数组&lt;/h3&gt;&lt;p&gt;创建数组语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myarray=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;br&gt;1.创建的新数组是空数组，没有值，如输出，则显示undefined。&lt;/p&gt;
&lt;p&gt;2.虽然创建数组时，指定了长度，但实际上数组都是变长的，也就是说即使指定了长度为8，仍然可以将元素存储在规定长度以外。&lt;/p&gt;
&lt;p&gt;我们还可以用简单的方法创建上面的数组和赋值：&lt;/p&gt;
&lt;p&gt;第一种方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myarray = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Array(&lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;77&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//创建数组同时赋值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二种方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;var myarray = [&lt;span class=&quot;number&quot;&gt;66&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;80&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;90&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;77&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;59&lt;/span&gt;];&lt;span class=&quot;comment&quot;&gt;//直接输入一个数组（称 “字面量数组”）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：数组存储的数据可以是任何类型（数字、字符、布尔值等）&lt;/p&gt;
&lt;p&gt;了解成员数量(数组属性length)&lt;/p&gt;
&lt;p&gt;如果我们想知道数组的大小，只需引用数组的一个属性length。Length属性表示数组的长度，即数组中元素的个数。&lt;/p&gt;
&lt;p&gt;同时，JavaScript&lt;br&gt;数组的length属性是可变的，这一点需要特别注意。&lt;/p&gt;
&lt;h3 id=&quot;做判断(if语句)&quot;&gt;做判断(if语句)&lt;/h3&gt;&lt;p&gt;if语句是基于条件成立才执行相应代码时使用的语句。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(条件)&lt;/span&gt;
{ 条件成立时执行代码}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;二选一_（if…else语句）&quot;&gt;二选一 （if…else语句）&lt;/h3&gt;&lt;p&gt;if…else语句是在指定的条件成立时执行代码，在条件不成立时执行else后的代码。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(条件)
{ 条件成立时执行的代码}
&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
{条件不成立时执行的代码}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;多种选择（Switch语句)&quot;&gt;多种选择（Switch语句)&lt;/h3&gt;&lt;p&gt;当有很多种选项的时候，switch比if else使用更方便。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;switch&lt;/span&gt;(表达式)
{
&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;:
  执行代码块 &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;:
  执行代码块 &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
...
&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值n:
  执行代码块 n
  &lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;
&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;:
  与 &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; 、 &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;..&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值n 不同时执行的代码
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;语法说明:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;Switch&lt;/span&gt;必须赋初始值，值与每个&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值匹配。满足执行该 &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; 后的所有语句，并用&lt;span class=&quot;built_in&quot;&gt;break&lt;/span&gt;语句来阻止运行下一个&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;。如所有&lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt;值都不匹配，执行&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;后的语句。
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;重复重复（for循环）&quot;&gt;重复重复（for循环）&lt;/h3&gt;&lt;p&gt;很多事情不只是做一次，要重复做。如打印10份试卷，每次打印一份，重复这个动作，直到打印完成。这些事情，我们使用循环语句来完成，循环语句，就是重复执行一段代码。&lt;/p&gt;
&lt;p&gt;for语句结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(初始化变量;循环条件;循环迭代)
{     
    循环语句 
 }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;反反复复(while循环)&quot;&gt;反反复复(while循环)&lt;/h3&gt;&lt;p&gt;和for循环有相同功能的还有while循环, while循环重复执行一段代码，直到某个条件不再满足。&lt;/p&gt;
&lt;p&gt;while语句结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(判断条件)&lt;/span&gt;
{
    循环语句
 }
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;来来回回(Do…while循环)&quot;&gt;来来回回(Do…while循环)&lt;/h3&gt;&lt;p&gt;do while结构的基本原理和while结构是基本相同的，但是它保证循环体至少被执行一次。因为它是先执行代码，后判断条件，如果条件为真，继续循环。&lt;/p&gt;
&lt;p&gt;do…while语句结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;do&lt;/span&gt;
{
    循环语句
 }
&lt;span class=&quot;keyword&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;(判断条件)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;退出循环break&quot;&gt;退出循环break&lt;/h3&gt;&lt;p&gt;在while、for、do…while、while循环中使用break语句退出当前循环，直接执行后面的代码。&lt;/p&gt;
&lt;p&gt;格式如下：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(初始条件;判断条件;循环后条件值更新)
{
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(特殊情况)
  {&lt;span class=&quot;keyword&quot;&gt;break&lt;/span&gt;;}
  循环代码
}
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;继续循环continue&quot;&gt;继续循环continue&lt;/h3&gt;&lt;p&gt;continue的作用是仅仅跳过本次循环，而整个循环体继续执行。&lt;/p&gt;
&lt;p&gt;语句结构：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt;(初始条件;判断条件;循环后条件值更新)
{
  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(特殊情况)
  { &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt;; }
 循环代码
}
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;事件&quot;&gt;事件&lt;/h1&gt;&lt;h2 id=&quot;什么是事件&quot;&gt;什么是事件&lt;/h2&gt;&lt;p&gt;JavaScript 创建动态页面。事件是可以被 JavaScript 侦测到的行为。 网页中的每个元素都可以产生某些可以触发 JavaScript 函数或程序的事件。&lt;/p&gt;
&lt;p&gt;比如说，当用户单击按钮或者提交表单数据时，就发生一个鼠标单击（onclick）事件，需要浏览器做出处理，返回给用户一个结果。&lt;/p&gt;
&lt;p&gt;主要事件：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;事件                    说明
onclick                鼠标单击事件
onmouseover            鼠标经过事件
onmouseout            鼠标移开事件
onchange            文本内容改变事件
onselect            文本框内容被选中事件
onfocus                光标聚集
onblur                光标离开
onload                网页导入
onunload            关闭网页
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;鼠标单击事件(_onclick_）&quot;&gt;鼠标单击事件( onclick ）&lt;/h3&gt;&lt;p&gt;onclick是鼠标单击事件，当在网页上单击鼠标时，就会发生该事件。同时onclick事件调用的程序块就会被执行，通常与按钮一起使用。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt;&amp;gt;
   &amp;lt;&lt;span class=&quot;keyword&quot;&gt;input&lt;/span&gt; name=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button&quot;&lt;/span&gt; value=&lt;span class=&quot;string&quot;&gt;&quot;点击提交&quot;&lt;/span&gt; onclick=&lt;span class=&quot;string&quot;&gt;&quot;add2()&quot;&lt;/span&gt; /&amp;gt;
&amp;lt;/&lt;span class=&quot;keyword&quot;&gt;form&lt;/span&gt;&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;鼠标经过事件（onmouseover）&quot;&gt;鼠标经过事件（onmouseover）&lt;/h3&gt;&lt;p&gt;鼠标经过事件，当鼠标移到一个对象上时，该对象就触发onmouseover事件，并执行onmouseover事件调用的程序。&lt;/p&gt;
&lt;h3 id=&quot;鼠标移开事件（onmouseout）&quot;&gt;鼠标移开事件（onmouseout）&lt;/h3&gt;&lt;p&gt;鼠标移开事件，当鼠标移开当前对象时，执行onmouseout调用的程序。&lt;/p&gt;
&lt;h3 id=&quot;光标聚焦事件（onfocus）&quot;&gt;光标聚焦事件（onfocus）&lt;/h3&gt;&lt;p&gt;当网页中的对象获得聚点时，执行onfocus调用的程序就会被执行。&lt;/p&gt;
&lt;h3 id=&quot;失焦事件（onblur）&quot;&gt;失焦事件（onblur）&lt;/h3&gt;&lt;p&gt;onblur事件与onfocus是相对事件，当光标离开当前获得聚焦对象的时候，触发onblur事件，同时执行被调用的程序。&lt;/p&gt;
&lt;h3 id=&quot;内容选中事件（onselect）&quot;&gt;内容选中事件（onselect）&lt;/h3&gt;&lt;p&gt;选中事件，当文本框或者文本域中的文字被选中时，触发onselect事件，同时调用的程序就会被执行。&lt;/p&gt;
&lt;h3 id=&quot;文本框内容改变事件（onchange）&quot;&gt;文本框内容改变事件（onchange）&lt;/h3&gt;&lt;p&gt;通过改变文本框的内容来触发onchange事件，同时执行被调用的程序。&lt;/p&gt;
&lt;h3 id=&quot;加载事件（onload）&quot;&gt;加载事件（onload）&lt;/h3&gt;&lt;p&gt;事件会在页面加载完成后，立即发生，同时执行被调用的程序。&lt;br&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;加载页面时，触发onload事件，事件写在&lt;body&gt;标签内。 &lt;/body&gt;&lt;/li&gt;
&lt;li&gt;此节的加载页面，可理解为打开一个新页面时&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;卸载事件（onunload）&quot;&gt;卸载事件（onunload）&lt;/h3&gt;&lt;p&gt;当用户退出页面时（页面关闭、页面刷新等），触发onUnload事件，同时执行被调用的程序。&lt;/p&gt;
&lt;p&gt;注意：不同浏览器对onunload事件支持不同。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;   
 &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.onunload = onunload_message;   
 &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onunload_message&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{   
    alert(&lt;span class=&quot;string&quot;&gt;&quot;您确定离开该网页吗？&quot;&lt;/span&gt;);   
}   
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;  
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;JavaScript内置对象&quot;&gt;JavaScript内置对象&lt;/h1&gt;&lt;h2 id=&quot;什么是对象&quot;&gt;什么是对象&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;JavaScript 中的所有事物都是对象&lt;/strong&gt;，如:字符串、数值、数组、函数等，每个对象带有属性和方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象的属性&lt;/strong&gt;：反映该对象某些特定的性质的，如：字符串的长度、图像的长宽等；&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对象的方法&lt;/strong&gt;：能够在对象上执行的动作。例如，表单的“提交”(Submit)，时间的“获取”(getYear)等；&lt;/p&gt;
&lt;p&gt;JavaScript 提供多个内建对象，比如&lt;code&gt;String、Date、Array&lt;/code&gt;等等，使用对象前先定义，如下使用数组对象：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; objectName =&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;();&lt;span class=&quot;comment&quot;&gt;//使用new关键字定义对象&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; objectName&lt;/span&gt; =[];
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;访问对象属性的语法:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;objectName&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.propertyName&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如使用 Array 对象的 length 属性来获得数组的长度：&lt;/p&gt;
&lt;p&gt;var myarray=new Array(6);//定义数组对象&lt;br&gt;var myl=myarray.length;//访问数组长度length属性&lt;br&gt;以上代码执行后，myl的值将是：6&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;访问对象的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;objectName.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;methodName&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;如使用string 对象的 toUpperCase() 方法来将文本转换为大写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mystr&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;;&lt;span class=&quot;comment&quot;&gt;//创建一个字符串&lt;/span&gt;
&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; request&lt;/span&gt;=mystr.toUpperCase(); &lt;span class=&quot;comment&quot;&gt;//使用字符串对象方法&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上代码执行后，request的值是：HELLO WORLD!&lt;/p&gt;
&lt;h3 id=&quot;Date日期对象&quot;&gt;Date日期对象&lt;/h3&gt;&lt;p&gt;日期对象可以储存任意一个日期，并且可以精确到毫秒数（1/1000 秒）。&lt;/p&gt;
&lt;p&gt;定义一个时间对象 :&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Udate=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(); 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:使用关键字new，Date()的首字母必须大写。 &lt;/p&gt;
&lt;p&gt;使 Udate 成为日期对象，并且已有初始值：&lt;strong&gt;当前时间(当前电脑系统时间)&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果要自定义初始值，可以用以下方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;2012&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//2012年10月1日&lt;/span&gt;
&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; d = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;Oct 1, 2012&#39;&lt;/span&gt;); &lt;span class=&quot;comment&quot;&gt;//2012年10月1日&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们最好使用下面介绍的“方法”来严格定义时间。&lt;/p&gt;
&lt;p&gt;访问方法语法：&lt;strong&gt;“&amp;lt;日期对象&amp;gt;.&amp;lt;方法&amp;gt;”&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Date对象中处理时间和日期的常用方法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;方法名称                    功能描述
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setDate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置日期
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setFullyear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置年份，用四位数表示
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setYear&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置年份
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setMouth&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置月份。&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;：一月
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setMinutes&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置分钟数
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setSeconds&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;        返回/设置秒钟数
get/&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;setTime&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;            返回/设置时间(毫秒为单位)
&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getDay&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;                返回星期，&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;表示星期天
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;返回星期方法&quot;&gt;返回星期方法&lt;/h3&gt;&lt;p&gt;getDay() 返回星期，返回的是0-6的数字，0 表示星期天。如果要返回相对应“星期”。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attribute&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;value&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mydate=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;();
  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; weekday=[&lt;span class=&quot;string&quot;&gt;&quot;星期日&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;星期一&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;星期二&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;星期三&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;星期四&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;星期五&quot;&lt;/span&gt;,&lt;span class=&quot;string&quot;&gt;&quot;星期六&quot;&lt;/span&gt;];
  &lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;今天是：&quot;&lt;/span&gt; + weekday[mydate.getDay()]);
&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;title&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;返回/设置时间方法&quot;&gt;返回/设置时间方法&lt;/h3&gt;&lt;p&gt;get/setTime() 返回/设置时间，单位毫秒数，计算从 1970 年 1 月 1 日零时到日期对象所指的日期的毫秒数。&lt;/p&gt;
&lt;p&gt;如果将目前日期对象的时间推迟2小时，代码如下:&lt;br&gt;    &lt;script type=&quot;text/javascript&quot;&gt;&lt;br&gt;     var mydate=new Date();&lt;br&gt;      document.write(“当前时间：”+mydate+”&lt;br&gt;“);&lt;br&gt;      mydate.setTime( mydate.getTime()  + 2&lt;em&gt; 60 &lt;/em&gt; 60 * 1000);&lt;br&gt;      document.write(“推迟二小时时间：” + mydate);&lt;br&gt;    &lt;/script&gt;&lt;/p&gt;
&lt;h3 id=&quot;String_字符串对象&quot;&gt;String 字符串对象&lt;/h3&gt;&lt;p&gt;在之前的学习中已经使用字符串对象了，定义字符串的方法就是直接赋值。比如：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mystr&lt;/span&gt; = &lt;span class=&quot;string&quot;&gt;&quot;I love JavaScript!&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;定义mystr字符串后，我们就可以访问它的属性和方法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;访问字符串对象的属性length:&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.length; 返回该字符串的长度。

&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mystr&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Hello World!&quot;&lt;/span&gt;;
&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; myl&lt;/span&gt;=mystr.length;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;以上代码执行后，myl 的值将是：12&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;访问字符串对象的方法：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 String 对象的 toUpperCase() 方法来将字符串小写字母转换为大写：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mystr&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Hello world!&quot;&lt;/span&gt;;
&lt;span class=&quot;variable&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mynum&lt;/span&gt;=mystr.toUpperCase();
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;返回指定位置的字符**&quot;&gt;返回指定位置的字符**&lt;/h4&gt;&lt;p&gt;&lt;strong&gt;charAt() &lt;/strong&gt;方法可返回指定位置的字符。返回的字符是长度为 1 的字符串。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(index)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;index：必需、表示字符串中某个位置的数字，即字符在字符串中的下标。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;注意：1.字符串中第一个字符的下标是 0。最后一个字符的下标为字符串长度减一（string.length-1）。&lt;/p&gt;
&lt;p&gt;2.如果参数 index 不在 0 与 string.length-1 之间，该方法将返回一个空字符串。&lt;/p&gt;
&lt;h4 id=&quot;返回指定的字符串首次出现的位置&quot;&gt;返回指定的字符串首次出现的位置&lt;/h4&gt;&lt;p&gt;indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。&lt;/p&gt;
&lt;p&gt;语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(substring, startpos)&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&quot;返回指定位置的字符&quot;&gt;返回指定位置的字符&lt;/h4&gt;&lt;p&gt;charAt() 方法可返回指定位置的字符。返回的字符是长度为 1 的字符串。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(index)&lt;/span&gt;&lt;/span&gt;

参数                        描述
substring            必需。规定需检索的字符串值。
startpos            可选的整数参数。规定在字符串中开始索引的位置。
                    如果忽略，则将从字符串的首字符开始检索
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1.该方法将从头到尾地检索字符串 stringObject，看它是否含有子串 substring。&lt;/p&gt;
&lt;p&gt;2.可选参数，从stringObject的startpos位置开始查找substring，如果没有此参数将从stringObject的开始位置查找。&lt;/p&gt;
&lt;p&gt;3.如果找到一个 substring，则返回 substring 的第一次出现的位置。stringObject 中的字符位置是从 0 开始的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1.indexOf() 方法区分大小写。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2.如果要检索的字符串值没有出现，则该方法返回 -1。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;字符串分割split()&quot;&gt;字符串分割split()&lt;/h4&gt;&lt;p&gt;split() 方法将字符串分割为字符串数组，并返回此数组。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(separator,limit)&lt;/span&gt;&lt;/span&gt;

参数                    描述
separator            必需，从该参数指定的地方分割stringObject
limit                可选参数，分割的次数，如设置该参数，返回的子串不会多                    于这个参数指定的数组，如果无此参数为不限次数。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注意：如果把空字符串 (“”) 用作 separator，那么 stringObject 中的每个字符之间都会被分割。&lt;/strong&gt;&lt;/p&gt;
&lt;h4 id=&quot;提取字符串substring()&quot;&gt;提取字符串substring()&lt;/h4&gt;&lt;p&gt;substring() 方法用于提取字符串中介于两个指定下标之间的字符。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.substring(starP&lt;span class=&quot;keyword&quot;&gt;os&lt;/span&gt;,stopP&lt;span class=&quot;keyword&quot;&gt;os&lt;/span&gt;) 

参数                    描述
startP&lt;span class=&quot;keyword&quot;&gt;os&lt;/span&gt;            必需，一个非负的整数，开始位置
stopP&lt;span class=&quot;keyword&quot;&gt;os&lt;/span&gt;                可选，一个非负的整数，结束位置，
                    如果省略则会返回子串一直到字符串对象的结尾
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;返回的内容是从 start开始(包含start位置的字符)到 stop-1 处的所有字符，其长度为 stop 减start。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果参数 start 与 stop 相等，那么该方法返回的就是一个空串（即长度为 0 的字符串）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果 start 比 stop 大，那么该方法在提取子串之前会先交换这两个参数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;提取指定数目的字符substr()&quot;&gt;提取指定数目的字符substr()&lt;/h4&gt;&lt;p&gt;substr() 方法从字符串中提取从 startPos位置开始的&lt;strong&gt;指定数目&lt;/strong&gt;的字符串。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.&lt;span class=&quot;keyword&quot;&gt;substr&lt;/span&gt;(startPos,&lt;span class=&quot;keyword&quot;&gt;length&lt;/span&gt;)

参数                    描述
startPos            必需，要提取的子串的起始位置，必须是数值
&lt;span class=&quot;keyword&quot;&gt;length&lt;/span&gt;                可选。提取字符串的长度。如果省略一直提取到结束。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。&lt;/p&gt;
&lt;p&gt;如果startPos为负数且绝对值大于字符串长度，startPos为0。&lt;/p&gt;
&lt;h4 id=&quot;提取指定数目的字符substr()-1&quot;&gt;提取指定数目的字符substr()&lt;/h4&gt;&lt;p&gt;substr() 方法从字符串中提取从 startPos位置开始的&lt;strong&gt;指定数目&lt;/strong&gt;的字符串。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;stringObject.&lt;span class=&quot;keyword&quot;&gt;substr&lt;/span&gt;(startPos,&lt;span class=&quot;keyword&quot;&gt;length&lt;/span&gt;)

参数                    描述
startPos            必需，要提取的子串的起始位置，必须是数值
&lt;span class=&quot;keyword&quot;&gt;length&lt;/span&gt;                可选。提取字符串的长度。如果省略一直提取到结束。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意：如果参数startPos是负数，从字符串的尾部开始算起的位置。也就是说，-1 指字符串中最后一个字符，-2 指倒数第二个字符，以此类推。&lt;/p&gt;
&lt;p&gt;如果startPos为负数且绝对值大于字符串长度，startPos为0。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;操作符优先级&quot;&gt;操作符优先级&lt;/h3&gt;&lt;p&gt;操作符之间的优先级（高到低）:&lt;/p&gt;
&lt;p&gt;算术操作符 → 比较操作符 → 逻辑操作符 → “=”赋值符号&lt;/p&gt;
&lt;h3 id=&quot;数组&quot;&gt;数组&lt;/h3&gt;&lt;p&gt;创建数组语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span 
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>js基础篇1</title>
    <link href="http://yoursite.com/2016/04/13/js%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>http://yoursite.com/2016/04/13/js基础篇/</id>
    <published>2016-04-13T04:14:11.000Z</published>
    <updated>2016-04-13T04:25:21.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;初识JS&quot;&gt;初识JS&lt;/h1&gt;&lt;h2 id=&quot;js在页面中的位置&quot;&gt;js在页面中的位置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;放在&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;部分&lt;br&gt;最常用的方式是在页面中head部分放置&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;元素，浏览器解析head部分就会执行这个代码，然后才解析页面的其余部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;放在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;部分&lt;br&gt;JavaScript代码在网页读取到该语句的时候就会执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;注意: javascript作为一种脚本语言可以放在html页面中任何位置，但是浏览器解释html时是按先后顺序的，所以前面的script就先被执行。比如进行页面显示初始化的js必须放在head里面，因为初始化都要求提前进行（如给页面body设置css等）；而如果是通过事件调用执行的function那么对位置没什么要求的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;语句和符号&quot;&gt;语句和符号&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;javascript语句是发送给浏览器的命令。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;变量命令规范&quot;&gt;变量命令规范&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;1.变量必须使用&lt;strong&gt;字母、下划线(_)&lt;/strong&gt;或者&lt;strong&gt;美元符($)&lt;/strong&gt;开始。&lt;/li&gt;
&lt;li&gt;2.然后可以使用任意多个英文字母、&lt;strong&gt;数字&lt;/strong&gt;、下划线(_)或者美元符($)组成。&lt;/li&gt;
&lt;li&gt;3.不能使用JavaScript关键词与JavaScript保留字&lt;/li&gt;
&lt;li&gt;4.变量区分大小写，需要先声明，后使用（规范推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;if…else…&quot;&gt;if…else…&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(条件)
{ 条件成立时执行的代码 }
&lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;
{ 条件不成立时执行的代码 }
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;函数&quot;&gt;函数&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; 函数名(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)
&lt;/span&gt;{
 函数代码;
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;输出内容（document-write）&quot;&gt;输出内容（document.write）&lt;/h2&gt;&lt;p&gt;&lt;code&gt;document.write()&lt;/code&gt; 可用于直接向 HTML 输出流写内容。简单的说就是直接在网页中输出内容。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;输出内容用“”括起，直接输出””号内的内容&lt;/li&gt;
&lt;li&gt;通过变量，输出内容&lt;/li&gt;
&lt;li&gt;输出多项内容，内容之间用+号连接。&lt;/li&gt;
&lt;li&gt;输出HTML标签，并起作用，标签使用“”括起来。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;js输出空格&quot;&gt;js输出空格&lt;/h2&gt;&lt;p&gt;在写JS代码的时候，大家可以会发现这样现象:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.&lt;span class=&quot;command&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;   1  23  &quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   结果: 1 2 3&lt;/p&gt;
&lt;p&gt;无论在输出的内容中什么位置有多少个空格，显示的结果好像只有一个空格。&lt;br&gt;这是因为浏览器显示机制，对手动敲入的空格，将连续多个空格显示成1个空格。&lt;/p&gt;
&lt;p&gt;解决方法:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用输出html标签&amp;nbsp;来解决&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.&lt;span class=&quot;command&quot;&gt;write&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;nbsp;&amp;amp;nbsp;&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&amp;amp;nbsp;&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;23&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;   结果:  1  23&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用CSS样式来解决&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`&lt;span class=&quot;javascript&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;document&lt;/span&gt;.write(&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;span style=&#39;white-space:pre;&#39;&amp;gt;&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;  123&quot;&lt;/span&gt;+&lt;span class=&quot;string&quot;&gt;&quot;&amp;lt;/span&amp;gt;&quot;&lt;/span&gt;);&lt;/span&gt;`
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果:  1    2 3&lt;br&gt;在输出时添加“white-space:pre;”样式属性。这个样式表示”空白会被浏览器保留”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;警告(alert消息兑换框)&quot;&gt;警告(alert消息兑换框)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;alert(字符串或变量)&lt;span class=&quot;comment&quot;&gt;;  &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;确认(confirm消息对话框)&quot;&gt;确认(confirm消息对话框)&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;confirm&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;str&lt;/span&gt;)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;str：在消息对话框中要显示的文本
&lt;/span&gt;返回值: &lt;span class=&quot;keyword&quot;&gt;Boolean值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;当用户点击&lt;span class=&quot;string&quot;&gt;&quot;确定&quot;&lt;/span&gt;按钮时，返回&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;
当用户点击&lt;span class=&quot;string&quot;&gt;&quot;取消&quot;&lt;/span&gt;按钮时，返回&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;提问(prompt消息对话框)&quot;&gt;提问(prompt消息对话框)&lt;/h2&gt;&lt;p&gt;&lt;code&gt;prompt&lt;/code&gt;弹出消息对话框,通常用于询问一些需要与用户交互的信息。弹出消息对话框（包含一个确定按钮、取消按钮与一个文本输入框）。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prompt&lt;span class=&quot;list&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;str1&lt;/span&gt;, str2)&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;attribute&quot;&gt;str1&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;要显示在消息对话框中的文本，不可修改&lt;/span&gt;
&lt;span class=&quot;attribute&quot;&gt;str2：文本框中的内容，可以修改&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;返回值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt; 点击确定按钮，文本框中的内容将作为函数返回值
&lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt; 点击取消按钮，将返回null
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;打开新窗口(window-open)&quot;&gt;打开新窗口(window.open)&lt;/h2&gt;&lt;p&gt;open() 方法可以查找一个已经存在或者新建的浏览器窗口&lt;br&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.open&lt;/span&gt;(&lt;span class=&quot;attr_selector&quot;&gt;[URL]&lt;/span&gt;, &lt;span class=&quot;attr_selector&quot;&gt;[窗口名称]&lt;/span&gt;, &lt;span class=&quot;attr_selector&quot;&gt;[参数字符串]&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;URL：可选参数，在窗口中要显示网页的网址或路径。如果省略这个参数，或者它的值是空字符串，那么窗口就不显示任何文档。
窗口名称：可选参数，被打开窗口的名称。
    &lt;span class=&quot;number&quot;&gt;1.&lt;/span&gt;该名称由字母、数字和下划线字符组成。
    &lt;span class=&quot;number&quot;&gt;2.&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;_top&quot;&lt;/span&gt;、&lt;span class=&quot;string&quot;&gt;&quot;_blank&quot;&lt;/span&gt;、&lt;span class=&quot;string&quot;&gt;&quot;_selft&quot;&lt;/span&gt;具有特殊意义的名称。
       _blank：在新窗口显示目标网页
       _self：在当前窗口显示目标网页
       _top：框架网页中在上部窗口中显示目标网页
    &lt;span class=&quot;number&quot;&gt;3.&lt;/span&gt;相同 name 的窗口只能创建一个，要想创建多个窗口则 name 不能相同。
    &lt;span class=&quot;number&quot;&gt;4.&lt;/span&gt;name 不能包含有空格。
参数字符串：可选参数，设置窗口参数，各参数用逗号隔开。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;参数字符串说明：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;参数           值             说明
top        &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;             窗口顶部离开屏幕顶部的像素数
&lt;span class=&quot;keyword&quot;&gt;left&lt;/span&gt;         &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;          窗口左端离开屏幕左端的像素数
width      &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;          窗口的宽度
height     &lt;span class=&quot;keyword&quot;&gt;number&lt;/span&gt;         窗口的高度
menubar    yes，&lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;        窗口有没有菜单
toolbar    yes，&lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;         窗口有没有工具条
scrollbars yes，&lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;         窗口有没有滚动条
status     yes，&lt;span class=&quot;keyword&quot;&gt;no&lt;/span&gt;         窗口有没有状态栏
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;关闭窗口(window-close)&quot;&gt;关闭窗口(window.close)&lt;/h2&gt;&lt;p&gt;close()关闭窗口&lt;/p&gt;
&lt;p&gt;用法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;window&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;close&lt;/span&gt;();   &lt;span class=&quot;comment&quot;&gt;//关闭本窗口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;或&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;窗口对象&amp;gt;.close&lt;span class=&quot;comment&quot;&gt;()&lt;/span&gt;;   &lt;span class=&quot;comment&quot;&gt;//关闭指定的窗口&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&quot;DOM编程&quot;&gt;DOM编程&lt;/h1&gt;&lt;h2 id=&quot;什么是DOM&quot;&gt;什么是DOM&lt;/h2&gt;&lt;p&gt;文档对象模型DOM（Document Object Model）定义访问和处理HTML文档的标准方法。&lt;strong&gt;DOM 将HTML文档呈现为带有元素、属性和文本的树结构（节点树）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;HTML文档可以说由节点构成的集合，三种常见的DOM节点:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;元素节点&lt;/strong&gt;：上图中&lt;code&gt;&amp;lt;html&amp;gt;、&amp;lt;body&amp;gt;、&amp;lt;p&amp;gt;&lt;/code&gt;等都是元素节点，即标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;文本节点&lt;/strong&gt;:向用户展示的内容，如&lt;code&gt;&amp;lt;li&amp;gt;...&amp;lt;/li&amp;gt;&lt;/code&gt;中的JavaScript、DOM、CSS等文本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;属性节点&lt;/strong&gt;:元素属性，如&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;标签的链接属性href=”&lt;a href=&quot;http://www.imooc.com&amp;quot;。&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.imooc.com&amp;quot;。&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;通过ID获取元素&quot;&gt;通过ID获取元素&lt;/h2&gt;&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;document.&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;getElementById&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(“id”)&lt;/span&gt;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;结果：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;或[&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt; HTMLParagraphElement]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;注:获取的元素是一个对象，如想对元素进行操作，我们要通过它的属性或方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;innerHTML属性&quot;&gt;innerHTML属性&lt;/h2&gt;&lt;p&gt;innerHTML 属性用于获取或替换 HTML 元素的内容。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.innerHTML&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;注意:&lt;/p&gt;
&lt;p&gt;1.Object是获取的元素对象，如通过document.getElementById(“ID”)获取的元素。&lt;/p&gt;
&lt;p&gt;2.注意书写，innerHTML区分大小写&lt;/p&gt;
&lt;h2 id=&quot;改变HTML样式&quot;&gt;改变HTML样式&lt;/h2&gt;&lt;p&gt;HTML DOM 允许 JavaScript 改变 HTML 元素的样式。&lt;/p&gt;
&lt;p&gt;语法:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.style.&lt;span class=&quot;keyword&quot;&gt;property&lt;/span&gt;=&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; style;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;基本属性表：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;属性                    描述
backgroundColor        设置元素的背景颜色
&lt;span class=&quot;attribute&quot;&gt;height&lt;/span&gt;                设置元素的高度
&lt;span class=&quot;attribute&quot;&gt;width&lt;/span&gt;                设置元素的宽度
&lt;span class=&quot;attribute&quot;&gt;color&lt;/span&gt;                设置元素的颜色
&lt;span class=&quot;attribute&quot;&gt;font&lt;/span&gt;                在一行设置所有的字体属性
fontFamily            设置元素的字体系列
fontSize             设置元素的字体大小
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;显示和隐藏(display属性)&quot;&gt;显示和隐藏(display属性)&lt;/h2&gt;&lt;p&gt;网页中经常会看到显示和隐藏的效果，可通过display属性来设置。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Object&lt;span class=&quot;class&quot;&gt;.style&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.display&lt;/span&gt; = value
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;value取值：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;值             描述
&lt;span class=&quot;keyword&quot;&gt;none&lt;/span&gt;        此元素不会被显示（即隐藏）
&lt;span class=&quot;built_in&quot;&gt;block&lt;/span&gt;        此元素将显示为块级元素（即显示）
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;控制类名（className属性）&quot;&gt;控制类名（className属性）&lt;/h2&gt;&lt;p&gt;控制类名（className 属性）&lt;br&gt;className 属性设置或返回元素的class 属性。&lt;/p&gt;
&lt;p&gt;语法：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;tag&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;class&quot;&gt;.className&lt;/span&gt; = classname
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;作用:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取元素的class 属性&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;为网页内的某个元素指定一个css样式来更改该元素的外观&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;removeAttribute清楚样式&quot;&gt;removeAttribute清楚样式&lt;/h2&gt;&lt;p&gt;语法&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;object&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;removeAttribute&lt;/span&gt;(&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;style&quot;&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;初识JS&quot;&gt;初识JS&lt;/h1&gt;&lt;h2 id=&quot;js在页面中的位置&quot;&gt;js在页面中的位置&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;放在&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;部分&lt;br&gt;最常用的方式是在页面中head部分放置&lt;code&gt;&amp;lt;script&amp;gt;&lt;/c
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>字符串操作</title>
    <link href="http://yoursite.com/2016/03/23/%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2016/03/23/字符串操作/</id>
    <published>2016-03-23T00:37:20.000Z</published>
    <updated>2016-03-23T10:28:16.727Z</updated>
    
    <content type="html">&lt;p&gt;串(String)(或字符串是由零个或多个字符串组成的有限序列)。&lt;/p&gt;
&lt;p&gt;串中任意个连续的字符组成的子序列称为该串的子串。&lt;br&gt;包含子串的串相应的称为串。&lt;br&gt;通常称字符在序列中的序号为该字符在串中的位置。&lt;/p&gt;
&lt;p&gt;串的最小操作子集： 串赋值、串比较、求串长、串联接以及求字串 &lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;串(String)(或字符串是由零个或多个字符串组成的有限序列)。&lt;/p&gt;
&lt;p&gt;串中任意个连续的字符组成的子序列称为该串的子串。&lt;br&gt;包含子串的串相应的称为串。&lt;br&gt;通常称字符在序列中的序号为该字符在串中的位置。&lt;/p&gt;
&lt;p&gt;串的最小操作子集： 串赋值、串比较、求串
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MFC常见问题</title>
    <link href="http://yoursite.com/2016/03/18/MFC%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
    <id>http://yoursite.com/2016/03/18/MFC常见问题/</id>
    <published>2016-03-18T07:44:46.000Z</published>
    <updated>2016-03-18T07:58:19.855Z</updated>
    
    <content type="html">&lt;p&gt;在MFC程序中，可以用以下几种方法来获取命令行参数。&lt;br&gt;为方便说明，我们假设执行了命令：C:\test\app.exe -1 -2&lt;/p&gt;
&lt;p&gt;方法一&lt;br&gt;::GetCommandLine();&lt;br&gt;将获取到 “C:\test\app.exe”  -1 -2&lt;/p&gt;
&lt;p&gt;方法二&lt;br&gt;for (int i=0;i&amp;lt;&lt;strong&gt;argc;i++)&lt;br&gt;{
&lt;/strong&gt;argv[i];&lt;br&gt;将依次得到C:\test\app.exe  -1  -2&lt;br&gt;}&lt;/p&gt;
&lt;p&gt;方法三&lt;br&gt;AfxGetApp()-&amp;gt;m_lpCmdLine;&lt;br&gt;将获取到 -1 -2&lt;/p&gt;
&lt;p&gt;让MFC程序在命令行运行，并传入参数，之后直接自动退出程序&lt;/p&gt;
&lt;p&gt;1.MFC主窗口调用某个子dialog&lt;br&gt;int CMainFrame::OnCreate(LPCREATESTRUCT lpCreateStruct){&lt;br&gt;    SetTimer(1, 1000, 0);&lt;br&gt;}&lt;br&gt;2.利用向导添加WM_TIMER的事件处理函数。&lt;br&gt;void CMainFrame::OnTimer(UINT nIDEvent)&lt;br&gt;{&lt;br&gt;    //首先停止计数器&lt;br&gt;    KillTimer(1);&lt;br&gt;    /&lt;em&gt;添加你想要调用的子Dialog,并执行子Dialog&lt;/em&gt;/&lt;br&gt;    PetriNetMC plg;&lt;br&gt;    plg.DoModal();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;CFrameWn&lt;span class=&quot;number&quot;&gt;d::&lt;/span&gt;OnTimer(nIDEvent)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;3.在子Dialog的类中，利用向导添加OnInitDialog()函数，就是在显示Dialog前处理一下问题&lt;br&gt;BOOL PetriNetMC::OnInitDialog(){&lt;br&gt;    CDialog::OnInitDialog();&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&lt;span class=&quot;comment&quot;&gt;/*这句话，可以获取父窗口的指针*/&lt;/span&gt;
CMainFrame *&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;pMain&lt;/span&gt;=&lt;span class=&quot;params&quot;&gt;(CMainFrame*)&lt;/span&gt;&lt;span class=&quot;title&quot;&gt;AfxGetApp&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;-&amp;gt;&lt;/span&gt;m_pMainWnd;
&lt;span class=&quot;comment&quot;&gt;/*添加要处理的事件*/&lt;/span&gt;

&lt;span class=&quot;comment&quot;&gt;/*可以不用显示子窗口，直接退出程序*/&lt;/span&gt;
pMain-&amp;gt;DestroyWindow();

&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; TRUE; 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;}&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;注意：&lt;br&gt;在这个过程中，可以从命令行获取参数，存入到父窗口即主窗口的成员变量中，在子窗口中调用pMain-&amp;gt;xxx就可以获取该成员变量。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;总结：&lt;br&gt;以上，就可以实现，在命令行直接调用一个MFC程序，并且自动执行，最后自动退出程序。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在MFC程序中，可以用以下几种方法来获取命令行参数。&lt;br&gt;为方便说明，我们假设执行了命令：C:\test\app.exe -1 -2&lt;/p&gt;
&lt;p&gt;方法一&lt;br&gt;::GetCommandLine();&lt;br&gt;将获取到 “C:\test\app.exe”  -1 -2&lt;/p
    
    </summary>
    
    
  </entry>
  
</feed>
