{"meta":{"title":"Hexo","subtitle":"知之为知之，不知为不知，是知也。","description":"","author":"jocelynthink","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"gdb tui 使用说明","slug":"gdb-tui-使用说明","date":"2020-03-10T13:01:19.000Z","updated":"2020-03-10T15:11:45.265Z","comments":true,"path":"2020/03/10/gdb-tui-使用说明/","link":"","permalink":"http://yoursite.com/2020/03/10/gdb-tui-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E/","excerpt":"","text":"gdbtui使用说明功能：在使用gdb调试的时候，查看源码 打开TUI模式 方法一、使用gdbtui或者gdb-tui开始调试 Code1gdbtui -q sample 注：通过 gdb -p pid ，可以调试一个正在运行的进程 方法二、直接使用gdb调试代码，在需要的时候切换ctrl+x a调出gdbtui TUI模式下的4个窗口 (cmd)command 命令窗口 (src)source 源代码窗口 (asm)assembly 汇编代码窗口 (reg)register 寄存器窗口 gdbtui相关的其他命令 layout 修改窗口布局 Code1234help layoutlayout srclayout asmlayout split：显示源代码和汇编窗口 winheight 调整各个窗口的高度 Code123help winheightwinheight src +5winheight src -4 refresh 强制刷新gdbtui窗口，与ctrl + L快捷键相同 focus next / prev 在默认设置下，方向键和PageUp PageDn 都是用来控制gdbtui的src窗口的，所以，我们常用的上下键用来显示前一条命令和后一条命令的功能就没有了， 不过这个时候我们可以通过ctrl + n / ctrl +p 来获取这个功能。 \u0011\u0011当我们通过方向键调整了gdbtui 的src 窗口以后，可以通过update命令重新把焦点定位到当前执行的代码上 我们可以通过focus命令来调整焦点位置，默认情况下是在src窗口，通过focus next命令， 焦点就移到cmd窗口了，这时候就可以像以前一样，通过方向键来切换到上一条命令和下一条命令。 Code123help focusfocus cmdfocus src 焦点不在src窗口以后，我们就不同通过方向键来浏览源码了。 查看寄存器Code12tui reg xxtui reg next 寄存器种类：general, float,system, vector,all, save,restore. 更新源代码update：更新源代码窗口到当前运行点 info win：显示正在显示的窗口大小","categories":[],"tags":[{"name":"gdb","slug":"gdb","permalink":"http://yoursite.com/tags/gdb/"}]},{"title":"x86-64架构-过程调用","slug":"x86-64架构-过程调用","date":"2020-03-10T12:17:45.000Z","updated":"2020-03-10T15:20:24.554Z","comments":true,"path":"2020/03/10/x86-64架构-过程调用/","link":"","permalink":"http://yoursite.com/2020/03/10/x86-64%E6%9E%B6%E6%9E%84-%E8%BF%87%E7%A8%8B%E8%B0%83%E7%94%A8/","excerpt":"","text":"x84_64寄存器 过程程序可以用栈来管理它的过程所需要的存储空间，栈和程序寄存器存放着传递控制和数据、分配内存所需要的信息。 x86-64的栈向低地址方向增长，而栈指针%rsp指向栈顶元素。 当x86-64过程需要的存储空间超出寄存器能够存放的大小时，就会在栈上分配空间。这个部分被称为过程的栈帧（stack fram）。 转移控制 call Q：指令为把地址A压入栈中，并将PC设置为Q的起始地址。压入的地址A被称为返回地址。 寻址方式 数据传送（参数传递与返回值）x86-64中，可以通过寄存器最多传递6个整型参数。有顺序和数据类型大小的特殊要求！ 如果一个函数大于6个整型参数，超出6个部分就要通过栈来传递。 通过栈传递参数时，所有的数据大小都向8的倍数对齐。 栈上的局部存储解决的问题有些时候局部数据必须存储在内存中，常见的情况： 寄存器不足够存放所有的本地数据 对一个局部变量使用地址运算符“&amp;”，此时必须为它产生一个地址 某些局部变量是数组或结构，因此必须能够通过数组或结构引用被访问到。 寄存器中的局部存储空间寄存器组是唯一被所有过程共享的资源。 被调用者保存寄存器：寄存器%rbx、%rbp和%r12~%r15。 调用者保存寄存器：所有其他的寄存器，除了栈指针%rsp。 递归过程条件码寄CF：进位标志，最近的操作使最高位产生了进位。可以用来检查无符号操作的溢出。 ZF：零标志，最近的操作得出的结果为0。 SF：符号标志，最近的操作得到的结果为负数。 OF：溢出标志，最近的操作导致一个补码溢出（正溢出和负溢出）。 EFLAGS寄存器eflags寄存器包含一组状态标志、系统标志、以及控制标志。 x86处理器初始化之后，eflags状态寄存器的状态值为0000 0002H。 第1、3、5、15以及22到31位均被保留。 若在中断或异常处理时发生任务切换，那么eflags寄存器的状态将被保存在TSS中。 状态标志（Status Flags）eflags寄存器的状态标志（0、2、4、6、7以及11位）指示算术指令（如ADD，SUB、MUL以及DIV指令）的结果，如下： CF(bit 0)[Carry Flag]：若算术操作产生的结果在最高有效位发生进位或者借位则将其置为1，反之清零。这个标志位指示无符号整型运算的溢出状态，这个标志同样在多倍精度运算中使用。 PF(bit 2)[Parity flag]：如果结果的最低有效字节包含偶数个1位则该位置1，否则清零。 AF(bit 4)[Adjust flag]：如果算术操作在结果的第3位发生进位或借位则将该标志置1，否则清零。这个标志位在BCD(binary-code decimal)算术运算中被使用。 ZF(bit 6)[Zero flag]：若结果为0则置为1，反之清零。 SF(bit 7)[Sign flag]：该标志被设置为有符号整型的最高有效位。（0–正，反之则负）。 OF(bit 11)[Sign flag]：如果整型结果是较大的正数或较小的负数，并且无法匹配目的操作数时将该位置1，反之清零。这个标志为带符号整型运算指示溢出状态。 DF标志 DF (bit 10)：控制串指令（MOVS，CMPS，SCAS，LODS以及STOS），设置DF标志使得串指令自动递减，清除该标志使得串指令自动递增。 STD指令：设置DF标志 CLD指令：清除DF标志 系统状态以及IOPL域控制操作系统或是执行操作，它们不允许被应用程序所修改，作用如下： TF(bit 8)[Trap flag]：将该为设置为1以允许单步调试模式，清零则禁用该模式。 IF(bit 9)[Interrupt enable flag]：该标志用于控制处理器对可屏蔽中断请求的响应。置为1响应屏蔽中断，反之则禁止可屏蔽中断。 IOPL(bit12 和 bit13) [I/O privilege level field]：指示当前运行任务的I/O特权级，正在运行任务的当前特权级(CPL)必须小于或等于I/O特权级才能运行访问I/O地址空间。只能在CPL为0时才能通过POPF以及IRET指令修改。 NT(bit14)[Nested task flag]：控制中断链和被调用任务。若当前任务与前一个执行任务相关则置为1，反之则清零。 RF(bit 16)[Resume flag]：控制处理器对调试异常的响应。 VM(bit 17)[Virtual-8086 mode flag]：置为1运行虚拟8086模式，清除则返回保护模式。 AC(bit 18)[Alignment check flag]：该标志以及在CR0寄存器中的AM位置1时将允许内存引用的对齐检查，以上两个标志中至少有一个被清零则禁用对齐检查。 VIF(bit 19)[Virtual Interrupt flag]：该标志是IF标志的虚拟镜像(Virtual image)，与VIP标志结合起来使用。使用这个标志以及VIP标志，并设置CR4控制寄存器中的VME标志就可以允许虚拟模式扩展(virtual mode extensions)。 VIP(bit 20)[Virtual Interrupt pendding flag]：位置1以指示一个中断正在被挂起，当没有中断挂起时该位清零。 ID(bit 21)[Identification flag]：指示了处理器对CPUID指令的支持。 MOV指令 算术指令 跳转指令","categories":[],"tags":[{"name":"x86-64s","slug":"x86-64s","permalink":"http://yoursite.com/tags/x86-64s/"}]},{"title":"Hello World","slug":"hello-world","date":"2020-03-10T11:28:31.431Z","updated":"2020-03-10T11:28:31.431Z","comments":true,"path":"2020/03/10/hello-world/","link":"","permalink":"http://yoursite.com/2020/03/10/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new postbash1$ hexo new \"My New Post\" More info: Writing Run serverbash1$ hexo server More info: Server Generate static filesbash1$ hexo generate More info: Generating Deploy to remote sitesbash1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}